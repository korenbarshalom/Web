using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI; // הוספת שימוש ב-UI

[RequireComponent(typeof(CharacterController))]
public class PlayerMovement : MonoBehaviour
{
    [Header("Player & Cameras")]
    public Transform playerTransform;
    public Camera playerCamera;

    [Header("Movement Settings")]
    public float walkSpeed = 10f;
    public float jumpPower = 7f;
    public float gravity = 10f;
    public float lookSpeed = 2f;   // רגישות עכבר (ניתן לעדכן באמצעות הסליידר)
    public float lookXLimit = 45f;
    public float defaultHeight = 2f;
    public float crouchHeight = 1f;
    public float crouchSpeed = 3f;
    // משתנה עבור JumpPad
    public float jumpPadForce = 30f;

    [Header("Slide Settings")]
    public float slideDuration = 1f;
    public PhysicsMaterial normalMaterial;
    public PhysicsMaterial slideMaterial;
    public float slideDecelerationThreshold = 0.3f;
    public float slideDeceleration = 3f;
    public float slideSpeedMultiplier = 1.5f;
    public float minSlideAngle = 5f;
    public float lateralControlSmooth = 5f;
    public float slideJumpForwardMultiplier = 0.5f;
    public float slideLateralMultiplier = 0.5f;
    // מהירות הזזה צדדית במצב Slide הרגיל
    public float slideLateralSpeed = 5f;
    // מהירות הזזה צדדית כאשר מחליקים על אובייקטים עם תגית "slide"
    public float slideObjectLateralSpeed = 3f;

    [Header("Slide Acceleration Settings")]
    public float slideAccelerationRate = 2f;

    [Header("Dash Settings")]
    public float dashWindowDuration = 1.5f;
    public float dashCooldown = 10f;
    public float dashDistance = 9f;
    public float dashDuration = 0.2f;
    public ParticleSystem dashParticleSystem;

    [Header("Dash Audio Settings")]
    public AudioClip dashSound;
    public AudioSource dashAudioSource;
    public float dashSoundVolume = 1f;

    [Header("Wall Run Settings")]
    public float wallRunForwardSpeed = 20f;
    public float wallRunJumpBoost = 5f;

    [Header("Wall Run Camera Tilt")]
    public float wallRunTiltAngle = 15f;
    public float tiltSmooth = 5f;
    private float currentTilt = 0f;

    [Header("Wall Run Particle System Settings")]
    public ParticleSystem wallRunParticleSystem;

    [Header("Rigidbody Settings")]
    public Rigidbody playerRigidbody;

    // משתנים עבור Dash
    private bool dashWindowOpen = false;
    private bool isDashing = false;
    private float dashCooldownTimer = 0f;
    private float savedVerticalVelocity = 0f;

    [SerializeField] private GameObject jumpPowerObject;
    private Vector3 externalForce = Vector3.zero;
    public float boostDecay = 0.5f;

    public Vector3 moveDirection = Vector3.zero;
    private float rotationX = 0f;
    private CharacterController characterController;

    public bool canMove = true;

    private bool isUsingSecondaryCamera = false;
    private bool isUsingCarPlayerCamera = false;

    private bool canJumpOnWall = false;
    private bool jumpPowerBoostActive = false;
    private bool jumpPowerBoostTriggered = false;

    private bool isSliding = false;
    private float slideTimer = 0f;
    private Vector3 slideVelocity = Vector3.zero;
    private bool isOnSlideSurface = false;
    private Collider playerCollider;
    private float lateralVelocity = 0f;
    private bool leftControlDisabled = false;

    // משתנה למעקב אחרי מצב תלייה על ledge
    private bool isLedgeGrabbing = false;
    private bool ledgeGrabReleased = true;

    private bool isWallRunning = false;
    private float wallRunTimer = 0f;
    public float wallRunDuration = 0.5f;

    // משתנה לקביעת הטיית המצלמה במצב Wall Run (-1 = שמאל, 1 = ימין, 0 = ללא)
    private int wallRunSide = 0;

    [Header("Slide Audio Settings")]
    public AudioClip slideSound;
    public AudioSource slideAudioSource;
    public float slideSoundVolume = 1f;

    [Header("Slide Object Audio Settings")]
    public AudioClip slideStartSound;
    public AudioClip slideLoopSound;
    public AudioClip slideEndSound;
    public AudioSource slideObjectAudioSource;
    public float slideObjectSoundVolume = 1f;

    [Header("Jump Pad Audio Settings")]
    public AudioClip jumpPadSound;
    public AudioSource jumpPadAudioSource;
    public float jumpPadSoundVolume = 1f;

    [Header("Ledge Audio Settings")]
    public AudioClip ledgeSound;
    public AudioSource ledgeAudioSource;
    public float ledgeSoundVolume = 1f;

    [Header("Speed Pad Sound Settings")]
    public AudioClip speedPadSound;
    public AudioSource speedPadAudioSource;
    public float speedPadSoundVolume = 1f;

    private bool onSpeedPad = false;
    private bool speedPadEffectStarted = false;

    [Header("Speed Pad Particle System Settings")]
    public ParticleSystem speedPadParticleSystem;

    [Header("UI Settings")]
    public Slider mouseSensitivitySlider;

    public bool isSwinging;

    // --- משתנים עבור ניהול סאונד Slide ---
    private Coroutine slideObjectSoundCoroutineRef = null;
    private bool _objectSlidingSoundActive = false;
    private bool objectSlidingSoundActive
    {
        get { return _objectSlidingSoundActive; }
        set
        {
            if (value != _objectSlidingSoundActive)
            {
                if (value)
                {
                    if (slideObjectSoundCoroutineRef != null)
                        StopCoroutine(slideObjectSoundCoroutineRef);
                    slideObjectSoundCoroutineRef = StartCoroutine(SlideObjectSoundCoroutine());
                }
                else
                {
                    if (slideObjectSoundCoroutineRef != null)
                    {
                        StopCoroutine(slideObjectSoundCoroutineRef);
                        slideObjectSoundCoroutineRef = null;
                    }
                    if (slideObjectAudioSource.isPlaying)
                        slideObjectAudioSource.Stop();
                    slideObjectAudioSource.loop = false;
                    slideObjectAudioSource.PlayOneShot(slideEndSound, slideObjectSoundVolume);
                }
            }
            _objectSlidingSoundActive = value;
        }
    }

    private IEnumerator SlideObjectSoundCoroutine()
    {
        slideObjectAudioSource.loop = false;
        slideObjectAudioSource.clip = slideStartSound;
        slideObjectAudioSource.Play();
        while (slideObjectAudioSource.isPlaying)
        {
            yield return null;
        }
        slideObjectAudioSource.clip = slideLoopSound;
        slideObjectAudioSource.loop = true;
        slideObjectAudioSource.Play();
    }
    // --- סוף ניהול סאונד Slide ---

    private bool slideStartedOnSlideSurface = false;
    private Vector3 slideMomentum = Vector3.zero;
    private Vector3 fixedSlideDirection = Vector3.zero;

    [Header("Forward Acceleration Settings")]
    public float forwardAccelerationMultiplier = 1.5f;
    public float forwardAccelerationDuration = 0.5f;
    private float forwardAccelerationTimer = 0f;

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        playerCollider = GetComponent<Collider>();
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
        jumpPower = 18f;

        if (playerCamera != null)
            playerCamera.enabled = true;

        if (slideAudioSource == null)
        {
            slideAudioSource = GetComponent<AudioSource>();
            if (slideAudioSource == null)
                slideAudioSource = gameObject.AddComponent<AudioSource>();
        }
        slideAudioSource.volume = slideSoundVolume;

        if (slideObjectAudioSource == null)
        {
            slideObjectAudioSource = GetComponent<AudioSource>();
            if (slideObjectAudioSource == null)
                slideObjectAudioSource = gameObject.AddComponent<AudioSource>();
        }
        slideObjectAudioSource.volume = slideObjectSoundVolume;

        if (jumpPadAudioSource == null)
        {
            jumpPadAudioSource = GetComponent<AudioSource>();
            if (jumpPadAudioSource == null)
                jumpPadAudioSource = gameObject.AddComponent<AudioSource>();
        }
        jumpPadAudioSource.volume = jumpPadSoundVolume;

        if (ledgeAudioSource == null)
        {
            ledgeAudioSource = GetComponent<AudioSource>();
            if (ledgeAudioSource == null)
                ledgeAudioSource = gameObject.AddComponent<AudioSource>();
        }
        ledgeAudioSource.volume = ledgeSoundVolume;

        if (speedPadAudioSource == null)
        {
            speedPadAudioSource = GetComponent<AudioSource>();
            if (speedPadAudioSource == null)
                speedPadAudioSource = gameObject.AddComponent<AudioSource>();
        }
        speedPadAudioSource.volume = speedPadSoundVolume;

        if (dashAudioSource == null)
        {
            dashAudioSource = GetComponent<AudioSource>();
            if (dashAudioSource == null)
                dashAudioSource = gameObject.AddComponent<AudioSource>();
        }
        dashAudioSource.volume = dashSoundVolume;

        if (dashParticleSystem != null)
        {
            dashParticleSystem.gameObject.SetActive(false);
        }
        if (speedPadParticleSystem != null)
        {
            speedPadParticleSystem.gameObject.SetActive(false);
        }
        if (wallRunParticleSystem != null)
        {
            wallRunParticleSystem.gameObject.SetActive(false);
        }
    }

    void Update()
    {
        if (characterController.isGrounded)
            slideMomentum = Vector3.zero;

        if (mouseSensitivitySlider != null)
        {
            lookSpeed = mouseSensitivitySlider.value;
        }

        if (dashCooldownTimer > 0f)
            dashCooldownTimer -= Time.deltaTime;

        if (isDashing)
            return;

        if (isLedgeGrabbing)
        {
            if (!Input.GetKey(KeyCode.F))
            {
                isLedgeGrabbing = false;
                ledgeGrabReleased = false;
                characterController.enabled = true;
                if (playerRigidbody != null)
                    playerRigidbody.isKinematic = false;
                Debug.Log("Released from Ledge because F was not held.");
                return;
            }

            rotationX += -Input.GetAxis("Mouse Y") * lookSpeed;
            // הוספת הגבלה על סיבוב ציר ה-X
            rotationX = Mathf.Clamp(rotationX, -lookXLimit, lookXLimit);
            playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, 0);
            transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * lookSpeed, 0);

            if (Input.GetKeyDown(KeyCode.Space))
            {
                isLedgeGrabbing = false;
                ledgeGrabReleased = false;
                characterController.enabled = true;
                if (playerRigidbody != null)
                    playerRigidbody.isKinematic = false;
                moveDirection.y = jumpPower;
                Debug.Log("Released from Ledge with impulse");
            }
            return;
        }
        else
        {
            if (Input.GetKeyUp(KeyCode.F))
            {
                ledgeGrabReleased = true;
            }
        }

        if (!dashWindowOpen && dashCooldownTimer <= 0f && Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(DashWindow());
        }
        if (dashWindowOpen && Input.GetKeyDown(KeyCode.E))
        {
            StartCoroutine(PerformDash());
        }

        if (Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(DisableLeftControlCoroutine());
        }

        if (!jumpPowerBoostTriggered && jumpPowerObject == null)
        {
            jumpPowerBoostTriggered = true;
            StartCoroutine(JumpPowerBoostCoroutine());
        }

        if (canMove)
        {
            HandleMovement();
        }

        if (wallRunTimer > 0f)
            wallRunTimer -= Time.deltaTime;
        else
            isWallRunning = false;

        rotationX += -Input.GetAxis("Mouse Y") * lookSpeed;
        // הגבלת הסיבוב האנכי לפי lookXLimit
        rotationX = Mathf.Clamp(rotationX, -lookXLimit, lookXLimit);
        float targetTilt = isWallRunning ? wallRunSide * wallRunTiltAngle : 0f;
        currentTilt = Mathf.Lerp(currentTilt, targetTilt, tiltSmooth * Time.deltaTime);
        playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, currentTilt);
        transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * lookSpeed, 0);

        if (!isWallRunning && wallRunParticleSystem != null && wallRunParticleSystem.isPlaying)
        {
            wallRunParticleSystem.Stop();
            wallRunParticleSystem.gameObject.SetActive(false);
        }

        if (!isSliding && !isDashing && dashParticleSystem != null && dashParticleSystem.isPlaying)
        {
            dashParticleSystem.Stop();
            dashParticleSystem.gameObject.SetActive(false);
        }

        if (onSpeedPad)
        {
            float horizontalInput = Input.GetAxis("Horizontal");
            float verticalInput = Input.GetAxis("Vertical");
            if (Mathf.Abs(horizontalInput) > 0.1f || Mathf.Abs(verticalInput) > 0.1f)
            {
                if (speedPadParticleSystem != null && !speedPadParticleSystem.isPlaying)
                {
                    speedPadParticleSystem.gameObject.SetActive(true);
                    speedPadParticleSystem.Play();
                }
                if (!speedPadEffectStarted)
                {
                    if (speedPadAudioSource != null && speedPadSound != null)
                    {
                        speedPadAudioSource.PlayOneShot(speedPadSound, speedPadSoundVolume);
                    }
                    speedPadEffectStarted = true;
                }
            }
            else
            {
                if (speedPadParticleSystem != null && speedPadParticleSystem.isPlaying)
                {
                    speedPadParticleSystem.Stop();
                    speedPadParticleSystem.gameObject.SetActive(false);
                }
                speedPadEffectStarted = false;
            }
        }

        bool shouldPlaySlideObjectSound = isOnSlideSurface && isSliding;
        if (shouldPlaySlideObjectSound != objectSlidingSoundActive)
        {
            objectSlidingSoundActive = shouldPlaySlideObjectSound;
        }
    }

    void HandleMovement()
    {
        if (isDashing)
            return;

        Vector3 forward = transform.TransformDirection(Vector3.forward);
        Vector3 right = transform.TransformDirection(Vector3.right);

        float inputVertical = Input.GetAxis("Vertical");
        float inputHorizontal = Input.GetAxis("Horizontal");

        RaycastHit hit;
        bool onSlope = false;
        float slopeAngle = 0f;
        Vector3 slopeDirection = Vector3.zero;
        if (Physics.Raycast(transform.position, Vector3.down, out hit, 2f))
        {
            if (hit.collider.CompareTag("slide"))
            {
                isOnSlideSurface = true;
                slopeAngle = Vector3.Angle(hit.normal, Vector3.up);
                if (slopeAngle > minSlideAngle)
                {
                    onSlope = true;
                    slopeDirection = Vector3.ProjectOnPlane(Vector3.down, hit.normal).normalized;
                }
            }
            else
            {
                isOnSlideSurface = false;
            }
        }
        else
        {
            isOnSlideSurface = false;
        }

        if (isSliding && !slideStartedOnSlideSurface)
        {
            isOnSlideSurface = false;
        }

        if (!isSliding && characterController.isGrounded && !leftControlDisabled)
        {
            if (isOnSlideSurface && Input.GetKey(KeyCode.LeftControl))
            {
                slideStartedOnSlideSurface = true;
                if (onSlope)
                {
                    isSliding = true;
                    slideTimer = Mathf.Infinity;
                    float baseSpeed = walkSpeed;
                    fixedSlideDirection = slopeDirection;
                    slideVelocity = fixedSlideDirection * baseSpeed * slideSpeedMultiplier;
                    if (playerCollider != null && slideMaterial != null)
                        playerCollider.material = slideMaterial;
                }
                else
                {
                    isSliding = true;
                    slideTimer = slideDuration;
                    Vector3 initialDir = (forward * inputVertical) + (right * inputHorizontal);
                    if (initialDir.sqrMagnitude < 0.1f)
                        initialDir = transform.forward;
                    fixedSlideDirection = new Vector3(initialDir.x, 0, initialDir.z).normalized;
                    slideVelocity = fixedSlideDirection * walkSpeed * slideSpeedMultiplier;
                    if (playerCollider != null && slideMaterial != null)
                        playerCollider.material = slideMaterial;
                }
            }
            else if (!isOnSlideSurface && Input.GetKeyDown(KeyCode.LeftControl))
            {
                if (Mathf.Abs(inputVertical) > 0.1f || Mathf.Abs(inputHorizontal) > 0.1f)
                {
                    slideStartedOnSlideSurface = false;
                    if (slideAudioSource != null && slideSound != null)
                        slideAudioSource.PlayOneShot(slideSound, slideSoundVolume);
                    isSliding = true;
                    slideTimer = slideDuration;
                    slideVelocity = (forward * walkSpeed * inputVertical) + (right * walkSpeed * inputHorizontal);
                    if (playerCollider != null && slideMaterial != null)
                        playerCollider.material = slideMaterial;
                }
            }
        }

        if (isSliding)
        {
            if (slideStartedOnSlideSurface && isOnSlideSurface)
            {
                if (Input.GetKey(KeyCode.LeftControl))
                {
                    slideVelocity += fixedSlideDirection * slideAccelerationRate * Time.deltaTime;
                }
                else
                {
                    if (float.IsInfinity(slideTimer))
                    {
                        slideTimer = 0.5f;
                    }
                    else
                    {
                        slideTimer -= Time.deltaTime;
                    }
                    Vector3 horizontalVelocity = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                    horizontalVelocity = Vector3.Lerp(horizontalVelocity, Vector3.zero, slideDeceleration * Time.deltaTime);
                    slideVelocity.x = horizontalVelocity.x;
                    slideVelocity.z = horizontalVelocity.z;

                    if (slideTimer <= 0f)
                    {
                        isSliding = false;
                        slideStartedOnSlideSurface = false;
                        if (playerCollider != null && normalMaterial != null)
                            playerCollider.material = normalMaterial;
                        if (!characterController.isGrounded)
                            slideMomentum = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                        else
                            slideMomentum = Vector3.zero;
                        slideVelocity = Vector3.zero;
                    }
                }
            }
            else
            {
                if (!float.IsInfinity(slideTimer))
                {
                    slideTimer -= Time.deltaTime;
                    if (slideTimer <= 0f)
                    {
                        isSliding = false;
                        if (playerCollider != null && normalMaterial != null)
                            playerCollider.material = normalMaterial;
                    }
                    else if (slideTimer < slideDecelerationThreshold)
                    {
                        Vector3 horizontalVelocity = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                        horizontalVelocity = Vector3.Lerp(horizontalVelocity, Vector3.zero, slideDeceleration * Time.deltaTime);
                        slideVelocity.x = horizontalVelocity.x;
                        slideVelocity.z = horizontalVelocity.z;
                    }
                }

                if (isOnSlideSurface && Input.GetKey(KeyCode.LeftControl))
                {
                    slideTimer = Mathf.Infinity;
                    slideVelocity += transform.forward * slideAccelerationRate * Time.deltaTime;
                }
            }


            slideVelocity.y -= gravity * Time.deltaTime;

            float horizontalInput = Input.GetAxis("Horizontal");
            float targetLateralSpeed = isOnSlideSurface ? slideObjectLateralSpeed : slideLateralSpeed;
            lateralVelocity = Mathf.Lerp(lateralVelocity, horizontalInput * targetLateralSpeed, lateralControlSmooth * Time.deltaTime);
            Vector3 lateralMove = transform.right * lateralVelocity;

            moveDirection = slideVelocity + lateralMove;

            if (Input.GetButtonDown("Jump") && characterController.isGrounded)
            {
                Vector3 horizontalMomentum = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                moveDirection.y = jumpPower;
                moveDirection += horizontalMomentum * slideJumpForwardMultiplier;
                isSliding = false;
                slideStartedOnSlideSurface = false;
                slideTimer = 0f;
                if (playerCollider != null && normalMaterial != null)
                    playerCollider.material = normalMaterial;
            }
        }
        else if (isWallRunning)
        {
            moveDirection.y -= gravity * Time.deltaTime;
        }
        else
        {
            if (inputVertical > 0)
            {
                forwardAccelerationTimer += Time.deltaTime;
                if (forwardAccelerationTimer > forwardAccelerationDuration)
                    forwardAccelerationTimer = forwardAccelerationDuration;
            }
            else
            {
                forwardAccelerationTimer = 0f;
            }
            float accelerationMultiplier = 1f;
            if (inputVertical > 0)
            {
                accelerationMultiplier = Mathf.Lerp(forwardAccelerationMultiplier, 1f, forwardAccelerationTimer / forwardAccelerationDuration);
            }
            float currentSpeed = ((Input.GetKey(KeyCode.LeftShift) && !leftControlDisabled) ? crouchSpeed : walkSpeed) * accelerationMultiplier;
            float previousY = moveDirection.y;
            Vector3 inputMovement = (forward * currentSpeed * inputVertical) + (right * currentSpeed * inputHorizontal);
            if (!characterController.isGrounded)
            {
                inputMovement += slideMomentum;
                slideMomentum = Vector3.Lerp(slideMomentum, Vector3.zero, Time.deltaTime * 1f);
            }
            moveDirection = inputMovement;
            moveDirection.y = previousY;

            if (isSwinging == false)
            {
                moveDirection.y -= gravity * Time.deltaTime;
            }

            if (isSwinging == true)
            {
                moveDirection.y -= (gravity / 2f) * Time.deltaTime;
            }
        }

        if (Input.GetButton("Jump") && canMove)
        {
            if (isWallRunning)
            {
                moveDirection.y = jumpPower;
                moveDirection += transform.forward * wallRunJumpBoost;
                isWallRunning = false;
                wallRunTimer = 0f;
                Debug.Log("Wall run jump with forward boost.");
            }
            else if (characterController.isGrounded)
            {
                moveDirection.y = jumpPower;
            }
            else if (canJumpOnWall)
            {
                moveDirection.y = jumpPower;
                canJumpOnWall = false;
            }
        }

        if ((Input.GetKey(KeyCode.LeftShift) && !leftControlDisabled) || isSliding)
            characterController.height = crouchHeight;
        else
        {
            characterController.height = defaultHeight;
            if (onSpeedPad)
            {
                walkSpeed = 60f;
            }
            else
            {
                walkSpeed = 22f;
            }
        }

        moveDirection += externalForce;
        externalForce = Vector3.Lerp(externalForce, Vector3.zero, Time.deltaTime * boostDecay);

        if (characterController.enabled == true)
            characterController.Move(moveDirection * Time.deltaTime);
    }

    IEnumerator DashWindow()
    {
        dashWindowOpen = true;
        yield return new WaitForSeconds(dashWindowDuration);
        dashWindowOpen = false;
    }

    IEnumerator PerformDash()
    {
        dashWindowOpen = false;
        isDashing = true;
        dashCooldownTimer = dashCooldown;
        savedVerticalVelocity = moveDirection.y;

        Vector3 dashInput = new Vector3(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));
        Vector3 dashDirection;
        if (dashInput.sqrMagnitude > 0.1f)
        {
            dashDirection = (transform.right * dashInput.x + transform.forward * dashInput.z).normalized;
        }
        else
        {
            dashDirection = transform.forward.normalized;
        }

        float dashSpeed = dashDistance / dashDuration;
        float timer = 0f;

        if (dashAudioSource != null && dashSound != null)
        {
            dashAudioSource.PlayOneShot(dashSound, dashSoundVolume);
        }

        if (dashParticleSystem != null)
        {
            dashParticleSystem.gameObject.SetActive(true);
            dashParticleSystem.Play();
        }

        while (timer < dashDuration)
        {
            characterController.Move(dashDirection * dashSpeed * Time.deltaTime);
            timer += Time.deltaTime;
            yield return null;
        }

        if (dashParticleSystem != null)
        {
            dashParticleSystem.Stop();
            dashParticleSystem.gameObject.SetActive(false);
        }

        isDashing = false;
        moveDirection.y = savedVerticalVelocity;
    }

    public void ApplyBoost(Vector3 boost)
    {
        externalForce = boost;
    }

    void OnControllerColliderHit(ControllerColliderHit hit)
    {
        if (hit.gameObject.CompareTag("JumpPad"))
        {
            moveDirection.y = jumpPadForce;
            if (jumpPadAudioSource != null && jumpPadSound != null)
            {
                jumpPadAudioSource.volume = jumpPadSoundVolume;
                jumpPadAudioSource.PlayOneShot(jumpPadSound);
            }
            Debug.Log("JumpPad activated!");
            return;
        }

        if (!isLedgeGrabbing && !characterController.isGrounded &&
            hit.gameObject.layer == LayerMask.NameToLayer("Ledge") && Input.GetKey(KeyCode.F) && ledgeGrabReleased)
        {
            if (ledgeAudioSource != null && ledgeSound != null)
            {
                ledgeAudioSource.volume = ledgeSoundVolume;
                ledgeAudioSource.PlayOneShot(ledgeSound);
            }

            Vector3 contactPoint = hit.point;
            contactPoint.y += defaultHeight * 0.5f;
            transform.position = contactPoint;
            moveDirection = Vector3.zero;
            isLedgeGrabbing = true;
            ledgeGrabReleased = false;
            characterController.enabled = false;
            if (playerRigidbody != null)
                playerRigidbody.isKinematic = true;
            Debug.Log("Attached to Ledge at: " + transform.position);
            return;
        }

        if (hit.gameObject.CompareTag("Wall"))
        {
            canJumpOnWall = true;
            StartCoroutine(DisableWallJumpAfterDelay());
        }

        if (hit.gameObject.layer == LayerMask.NameToLayer("WallRun"))
        {
            if (!characterController.isGrounded)
            {
                isWallRunning = true;
                wallRunTimer = wallRunDuration;
                moveDirection = transform.forward * wallRunForwardSpeed;
                moveDirection.y = 0f;

                if (hit.gameObject.CompareTag("Right"))
                {
                    wallRunSide = -1;
                }
                else if (hit.gameObject.CompareTag("Left"))
                {
                    wallRunSide = 1;
                }
                else
                {
                    wallRunSide = 0;
                }
                if (wallRunParticleSystem != null && !wallRunParticleSystem.isPlaying)
                {
                    wallRunParticleSystem.gameObject.SetActive(true);
                    wallRunParticleSystem.Play();
                }
                Debug.Log("Wall running activated.");
            }
        }
        if (hit.gameObject.CompareTag("slide"))
        {
            if (dashParticleSystem != null && !dashParticleSystem.isPlaying)
            {
                dashParticleSystem.gameObject.SetActive(true);
                dashParticleSystem.Play();
            }
        }
    }

    void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("slide"))
        {
            isOnSlideSurface = true;
        }
    }

    void OnCollisionExit(Collision collision)
    {
        if (collision.gameObject.CompareTag("slide"))
        {
            isOnSlideSurface = false;
            if (isSliding && float.IsInfinity(slideTimer))
                slideTimer = 0.5f;
            if (dashParticleSystem != null && dashParticleSystem.isPlaying && !isDashing)
            {
                dashParticleSystem.Stop();
                dashParticleSystem.gameObject.SetActive(false);
            }
        }
    }

    IEnumerator DisableWallJumpAfterDelay()
    {
        yield return new WaitForSeconds(1f);
        canJumpOnWall = false;
    }

    IEnumerator JumpPowerBoostCoroutine()
    {
        jumpPowerBoostActive = true;
        jumpPower = 36f;
        yield return new WaitForSeconds(60f);
        jumpPower = 18f;
    }

    IEnumerator DisableLeftControlCoroutine()
    {
        leftControlDisabled = true;
        yield return new WaitForSeconds(1f);
        leftControlDisabled = false;
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("speed"))
        {
            onSpeedPad = true;
            Debug.Log("Entered Speed Pad: Speed set to 40f.");
        }
    }

    void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("speed"))
        {
            onSpeedPad = false;
            Debug.Log("Exited Speed Pad: Speed restored to normal.");
            if (speedPadParticleSystem != null && speedPadParticleSystem.isPlaying)
            {
                speedPadParticleSystem.Stop();
                speedPadParticleSystem.gameObject.SetActive(false);
            }
            speedPadEffectStarted = false;
        }
    }
}
