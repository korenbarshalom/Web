using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(CharacterController))]
public class PlayerMovement : MonoBehaviour
{
    [Header("Player & Cameras")]
    public Transform playerTransform;
    public Camera playerCamera;
    public GameObject secondaryCameraObject;
    public Transform attachedObject;
    public Transform parentAttachmentPoint;
    public GameObject targetObject;
    public float switchDistance = 8f;

    [Header("Movement Settings")]
    public float walkSpeed = 10f;
    public float runSpeed = 15f;
    public float jumpPower = 7f;
    public float gravity = 10f;
    public float lookSpeed = 2f;
    public float lookXLimit = 45f;
    public float defaultHeight = 2f;
    public float crouchHeight = 1f;
    public float crouchSpeed = 3f;

    [Header("Slide Settings")]
    public float slideDuration = 1f;
    public PhysicsMaterial normalMaterial;
    public PhysicsMaterial slideMaterial;
    public float slideDecelerationThreshold = 0.3f;
    public float slideDeceleration = 3f;
    public float slideSpeedMultiplier = 1.5f;
    public float minSlideAngle = 5f;
    public float lateralControlSmooth = 5f;
    public float slideJumpForwardMultiplier = 0.5f;
    public float slideLateralMultiplier = 0.5f;
    public float slideLateralSpeed = 5f;

    [Header("Dash Settings")]
    // בעת לחיצה על Space נפתח חלון ל־1.5 שניות שבו ניתן לבצע Dash בלחיצה על F
    public float dashWindowDuration = 1.5f;
    // Cooldown של 10 שניות לאחר כל Dash
    public float dashCooldown = 10f;
    // Dash יזיז את השחקן 9 מטר קדימה
    public float dashDistance = 9f;
    // נניח שמשך הדאש הוא 0.2 שניות (ניתן לשנות)
    public float dashDuration = 0.2f;

    // הפניה ל-Particle System עבור אפקט הדאש/slide (שמכובה כברירת מחדל)
    public ParticleSystem dashParticleSystem;

    [Header("Rigidbody Settings")]
    // שדה זה מאפשר לך להכניס את ה־Rigidbody של השחקן, אותו אנו נשנה ל־isKinematic בזמן התפסה
    public Rigidbody playerRigidbody;

    // משתנים פנימיים עבור Dash
    private bool dashWindowOpen = false;
    private bool isDashing = false;
    private float dashCooldownTimer = 0f;
    private float savedVerticalVelocity = 0f;

    // Object for jump power boost
    [SerializeField] private GameObject jumpPowerObject;

    // External force applied to the player (for boost, etc.)
    private Vector3 externalForce = Vector3.zero;
    public float boostDecay = 0.5f;

    private Vector3 moveDirection = Vector3.zero;
    private float rotationX = 0f;
    private CharacterController characterController;

    // מאפשר גישה חיצונית (למשל, עבור מערכות אחרות)
    public bool canMove = true;

    private bool isUsingSecondaryCamera = false;
    private bool isUsingCarPlayerCamera = false;

    private bool canJumpOnWall = false;
    private bool jumpPowerBoostActive = false;
    private bool jumpPowerBoostTriggered = false;

    // Slide variables
    private bool isSliding = false;
    private float slideTimer = 0f;
    private Vector3 slideVelocity = Vector3.zero;
    private bool isOnSlideSurface = false;
    private Collider playerCollider;
    private float lateralVelocity = 0f;
    private bool leftControlDisabled = false;

    // Ledge grabbing – מצב בו השחקן "נתפס" על אובייקט עם Ledge
    private bool isLedgeGrabbing = false;

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        playerCollider = GetComponent<Collider>();
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
        jumpPower = 18f;

        if (playerCamera != null)
            playerCamera.enabled = true;
        if (secondaryCameraObject != null)
            secondaryCameraObject.SetActive(false);
    }

    void Update()
    {
        // עדכון קירור הדאש
        if (dashCooldownTimer > 0f)
            dashCooldownTimer -= Time.deltaTime;

        // אם מתבצע Dash, לא מעבדים תנועה רגילה
        if (isDashing)
            return;

        // טיפול במצב Ledge Grabbing:
        // כאשר השחקן "נתפס" על האובייקט, אנו לא מעדכנים תנועת גוף – השחקן "קפוא" במיקום שקבענו
        if (isLedgeGrabbing)
        {
            // עדכון סיבוב המצלמה – השחקן עדיין יכול לסובב
            rotationX += -Input.GetAxis("Mouse Y") * lookSpeed;
            playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, 0);
            transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * lookSpeed, 0);

            // לחיצה על Space תשחרר את השחקן
            if (Input.GetKeyDown(KeyCode.Space))
            {
                isLedgeGrabbing = false;
                // הפעל מחדש את ה־CharacterController
                characterController.enabled = true;
                // החזרת ה־Rigidbody למצב דינמי
                if (playerRigidbody != null)
                    playerRigidbody.isKinematic = false;
                moveDirection.y = jumpPower; // תנופה לשחרור
                Debug.Log("Released from Ledge with impulse");
            }
            return; // אין לעדכן תנועת גוף בזמן שהשחקן קפוא
        }

        // כאשר לוחצים על Space, פותחים חלון dash (אם הדאש לא בקירור)
        if (!dashWindowOpen && dashCooldownTimer <= 0f && Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(DashWindow());
        }

        // במהלך חלון ה-Dash, אם לוחצים על F, מתבצע Dash
        if (dashWindowOpen && Input.GetKeyDown(KeyCode.F))
        {
            StartCoroutine(PerformDash());
        }

        // שאר עדכון הקלט – למשל, השבתת LeftControl בעת לחיצה על Space
        if (Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(DisableLeftControlCoroutine());
        }

        if (!jumpPowerBoostTriggered && jumpPowerObject == null)
        {
            jumpPowerBoostTriggered = true;
            StartCoroutine(JumpPowerBoostCoroutine());
        }

        if (Input.GetKeyDown(KeyCode.V))
        {
            ToggleCameraAndMovement();
        }

        if (isUsingSecondaryCamera && Input.GetKeyDown(KeyCode.U))
        {
            ToggleCarCameraView();
        }

        if (canMove)
        {
            HandleMovement();
        }
    }

    void HandleMovement()
    {
        // אם Dash מתבצע, לא מעבדים תנועה רגילה
        if (isDashing)
            return;

        Vector3 forward = transform.TransformDirection(Vector3.forward);
        Vector3 right = transform.TransformDirection(Vector3.right);

        bool isRunning = Input.GetKey(KeyCode.LeftShift);
        float inputVertical = Input.GetAxis("Vertical");
        float inputHorizontal = Input.GetAxis("Horizontal");

        // בדיקת השיפוע מתחת לשחקן – לזיהוי משטח עם תג "slide"
        RaycastHit hit;
        bool onSlope = false;
        float slopeAngle = 0f;
        Vector3 slopeDirection = Vector3.zero;
        if (Physics.Raycast(transform.position, Vector3.down, out hit, 2f))
        {
            if (hit.collider.CompareTag("slide"))
            {
                isOnSlideSurface = true;
                slopeAngle = Vector3.Angle(hit.normal, Vector3.up);
                if (slopeAngle > minSlideAngle)
                {
                    onSlope = true;
                    slopeDirection = Vector3.ProjectOnPlane(Vector3.down, hit.normal).normalized;
                }
            }
            else
            {
                isOnSlideSurface = false;
            }
        }
        else
        {
            isOnSlideSurface = false;
        }

        // התחלת מצב החלקה
        if (!isSliding && characterController.isGrounded && Input.GetKeyDown(KeyCode.LeftControl) && !leftControlDisabled)
        {
            if (isOnSlideSurface && onSlope)
            {
                isSliding = true;
                slideTimer = Mathf.Infinity;
                float baseSpeed = isRunning ? runSpeed : walkSpeed;
                slideVelocity = slopeDirection * baseSpeed * slideSpeedMultiplier;
                if (playerCollider != null && slideMaterial != null)
                {
                    playerCollider.material = slideMaterial;
                }
            }
            else
            {
                isSliding = true;
                slideTimer = slideDuration;
                slideVelocity = (forward * (isRunning ? runSpeed : walkSpeed) * inputVertical) +
                                (right * (isRunning ? runSpeed : walkSpeed) * inputHorizontal);
                if (playerCollider != null && slideMaterial != null)
                {
                    playerCollider.material = slideMaterial;
                }
            }
        }

        // סיום מצב החלקה כאשר לוחצים Ctrl או תנאים אחרים
        if (isSliding && isOnSlideSurface && !Input.GetKey(KeyCode.LeftControl))
        {
            isSliding = false;
            if (playerCollider != null && normalMaterial != null)
            {
                playerCollider.material = normalMaterial;
            }
        }

        // חישוב תנועת השחקן
        if (isSliding)
        {
            if (!isOnSlideSurface)
            {
                slideTimer -= Time.deltaTime;
                if (slideTimer <= 0f)
                {
                    isSliding = false;
                    if (playerCollider != null && normalMaterial != null)
                    {
                        playerCollider.material = normalMaterial;
                    }
                }
                else if (slideTimer < slideDecelerationThreshold)
                {
                    Vector3 horizontalVelocity = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                    horizontalVelocity = Vector3.Lerp(horizontalVelocity, Vector3.zero, slideDeceleration * Time.deltaTime);
                    slideVelocity.x = horizontalVelocity.x;
                    slideVelocity.z = horizontalVelocity.z;
                }
            }
            slideVelocity.y -= gravity * Time.deltaTime;

            float horizontalInput = Input.GetAxis("Horizontal");
            if (isOnSlideSurface)
            {
                lateralVelocity = Mathf.Lerp(lateralVelocity, horizontalInput * slideLateralSpeed, lateralControlSmooth * Time.deltaTime);
            }
            else
            {
                lateralVelocity = 0f;
            }
            Vector3 lateralMove = transform.right * lateralVelocity;

            moveDirection = slideVelocity + lateralMove;

            if (Input.GetButtonDown("Jump") && characterController.isGrounded)
            {
                Vector3 horizontalMomentum = new Vector3(slideVelocity.x, 0, slideVelocity.z);
                moveDirection.y = jumpPower;
                moveDirection += horizontalMomentum * slideJumpForwardMultiplier;
                isSliding = false;
                slideTimer = 0f;
                if (playerCollider != null && normalMaterial != null)
                {
                    playerCollider.material = normalMaterial;
                }
            }
        }
        else
        {
            if (Input.GetKey(KeyCode.LeftControl) && !leftControlDisabled)
            {
                moveDirection.x = 0f;
                moveDirection.z = 0f;
            }
            else
            {
                float currentSpeed = isRunning ? runSpeed : walkSpeed;
                float previousY = moveDirection.y;
                moveDirection = (forward * currentSpeed * inputVertical) + (right * currentSpeed * inputHorizontal);
                moveDirection.y = previousY;
            }

            if (Input.GetButton("Jump") && canMove)
            {
                if (characterController.isGrounded)
                {
                    moveDirection.y = jumpPower;
                }
                else if (canJumpOnWall)
                {
                    moveDirection.y = jumpPower;
                    canJumpOnWall = false;
                }
            }

            if (!characterController.isGrounded)
            {
                moveDirection.y -= gravity * Time.deltaTime;
            }
        }

        if (isSliding && isOnSlideSurface)
        {
            if (dashParticleSystem != null && !dashParticleSystem.isPlaying)
            {
                dashParticleSystem.gameObject.SetActive(true);
                dashParticleSystem.Play();
            }
        }
        else
        {
            if (dashParticleSystem != null && dashParticleSystem.isPlaying)
            {
                dashParticleSystem.Stop();
                dashParticleSystem.gameObject.SetActive(false);
            }
        }

        if (Input.GetKey(KeyCode.LeftControl) && !leftControlDisabled)
        {
            characterController.height = crouchHeight;
        }
        else
        {
            characterController.height = defaultHeight;
            walkSpeed = 22f;
            runSpeed = 22f;
        }

        moveDirection += externalForce;
        externalForce = Vector3.Lerp(externalForce, Vector3.zero, Time.deltaTime * boostDecay);

        characterController.Move(moveDirection * Time.deltaTime);

        rotationX += -Input.GetAxis("Mouse Y") * lookSpeed;
        playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, 0);
        transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * lookSpeed, 0);
    }

    IEnumerator DashWindow()
    {
        dashWindowOpen = true;
        yield return new WaitForSeconds(dashWindowDuration);
        dashWindowOpen = false;
    }

    IEnumerator PerformDash()
    {
        dashWindowOpen = false;
        isDashing = true;
        dashCooldownTimer = dashCooldown;
        savedVerticalVelocity = moveDirection.y;
        Vector3 dashDirection = transform.forward.normalized;
        float dashSpeed = dashDistance / dashDuration;
        float timer = 0f;

        if (dashParticleSystem != null)
        {
            dashParticleSystem.gameObject.SetActive(true);
            dashParticleSystem.Play();
        }

        while (timer < dashDuration)
        {
            characterController.Move(dashDirection * dashSpeed * Time.deltaTime);
            timer += Time.deltaTime;
            yield return null;
        }

        if (dashParticleSystem != null)
        {
            dashParticleSystem.Stop();
            dashParticleSystem.gameObject.SetActive(false);
        }

        isDashing = false;
        moveDirection.y = savedVerticalVelocity;
    }

    public void ApplyBoost(Vector3 boost)
    {
        externalForce = boost;
    }

    void ToggleCameraAndMovement()
    {
        if (targetObject == null || playerTransform == null || secondaryCameraObject == null)
            return;

        float distance = Vector3.Distance(playerTransform.position, targetObject.transform.position);

        if (distance <= switchDistance)
        {
            isUsingSecondaryCamera = !isUsingSecondaryCamera;

            if (isUsingSecondaryCamera)
            {
                playerCamera.enabled = false;
                secondaryCameraObject.SetActive(true);
                isUsingCarPlayerCamera = false;
                canMove = false;

                if (attachedObject != null)
                {
                    playerTransform.SetParent(attachedObject);

                    if (parentAttachmentPoint != null)
                    {
                        playerTransform.position = parentAttachmentPoint.position;
                        playerTransform.rotation = parentAttachmentPoint.rotation;
                    }
                    else
                    {
                        playerTransform.localPosition = Vector3.zero;
                        playerTransform.localRotation = Quaternion.identity;
                    }
                }
                if (characterController != null)
                {
                    characterController.enabled = false;
                }
                Debug.Log("Player switched to car mode (secondary camera).");
            }
            else
            {
                playerCamera.enabled = true;
                secondaryCameraObject.SetActive(false);
                canMove = true;
                playerTransform.SetParent(null);

                if (attachedObject != null)
                {
                    playerTransform.position = attachedObject.position - attachedObject.forward * 5f;
                }
                if (characterController != null)
                {
                    characterController.enabled = true;
                }
                isUsingCarPlayerCamera = false;
                Debug.Log("Player exited car mode (primary camera active).");
            }
        }
        else
        {
            Debug.Log("Player is too far away (max " + switchDistance + "m) to switch.");
        }
    }

    void ToggleCarCameraView()
    {
        if (playerCamera == null || secondaryCameraObject == null)
            return;

        if (!isUsingCarPlayerCamera)
        {
            secondaryCameraObject.SetActive(false);
            playerCamera.enabled = true;
            isUsingCarPlayerCamera = true;
            Debug.Log("Switched to main camera view in car mode.");
        }
        else
        {
            playerCamera.enabled = false;
            secondaryCameraObject.SetActive(true);
            isUsingCarPlayerCamera = false;
            Debug.Log("Switched back to secondary car camera view.");
        }
    }

    // כאן מתבצעת "snapping" כאשר מתבצעת התנגשות עם אובייקט ששייך לשכבת Ledge.
    void OnControllerColliderHit(ControllerColliderHit hit)
    {
        // אם השחקן אינו על הקרקע ונוגע באובייקט בשכבת "Ledge"
        if (!isLedgeGrabbing && !characterController.isGrounded &&
            hit.gameObject.layer == LayerMask.NameToLayer("Ledge"))
        {
            // חישוב נקודת המגע והוספת offset
            Vector3 contactPoint = hit.point;
            contactPoint.y += defaultHeight * 0.5f;
            transform.position = contactPoint;
            moveDirection = Vector3.zero;
            isLedgeGrabbing = true;
            // השבתת ה-CharacterController כדי למנוע דחיפה אחורה
            characterController.enabled = false;
            // הפיכת ה־Rigidbody ל־isKinematic כדי למנוע נפילה
            if (playerRigidbody != null)
                playerRigidbody.isKinematic = true;
            Debug.Log("Attached to Ledge at: " + transform.position);
            return; // לא מעבדים התנגשות נוספת בזמן שהתפיסה מופעלת
        }

        if (hit.gameObject.CompareTag("Wall"))
        {
            canJumpOnWall = true;
            StartCoroutine(DisableWallJumpAfterDelay());
        }
    }

    void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("slide"))
        {
            isOnSlideSurface = true;
            if (!isSliding && dashParticleSystem != null && !dashParticleSystem.isPlaying)
            {
                dashParticleSystem.gameObject.SetActive(true);
                dashParticleSystem.Play();
            }
        }
    }

    void OnCollisionExit(Collision collision)
    {
        if (collision.gameObject.CompareTag("slide"))
        {
            isOnSlideSurface = false;
            if (isSliding && float.IsInfinity(slideTimer))
            {
                slideTimer = 0.5f;
            }
            if (dashParticleSystem != null && dashParticleSystem.isPlaying)
            {
                dashParticleSystem.Stop();
                dashParticleSystem.gameObject.SetActive(false);
            }
        }
    }

    IEnumerator DisableWallJumpAfterDelay()
    {
        yield return new WaitForSeconds(1f);
        canJumpOnWall = false;
    }

    IEnumerator JumpPowerBoostCoroutine()
    {
        jumpPowerBoostActive = true;
        jumpPower = 36f;
        yield return new WaitForSeconds(30f);
        jumpPower = 18f;
    }

    IEnumerator DisableLeftControlCoroutine()
    {
        leftControlDisabled = true;
        yield return new WaitForSeconds(1f);
        leftControlDisabled = false;
    }
}
