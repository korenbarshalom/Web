using UnityEngine;
using UnityEngine.AI;

public class GorillaEnemyAI : MonoBehaviour
{
    [Header("Chase Settings")]
    public float chaseRange = 20f;
    public float walkRange = 8f;
    public float attackRange = 2f;
    public float stopDistance = 1.5f;

    public float runSpeed = 6f;
    public float walkSpeed = 3.5f;
    public float idleSpeed = 1.5f;

    [Header("New Walk/Run Range Settings")]
    public float walkAnimationRange = 50f;
    public float walkAnimationSpeed = 4f;
    public float runAnimationSpeed = 7f;

    [Range(1, 99)] public int avoidancePriority = 50;
    public string targetTag = "Player";

    [Header("Rotation Settings")]
    [SerializeField] private float rotationSpeed = 5f;

    [Header("References")]
    [SerializeField] private Animator animator;

    private NavMeshAgent agent;
    private Transform player;

    private float attackCooldown = 3.8f;
    private float lastAttackTime = -Mathf.Infinity;
    private int lastAttackIndex = -1;

    [Header("Damage Control")]
    [HideInInspector] public bool isInvulnerable = false;

    // ✅ Bots
    private GameObject[] bots;
    private Transform randomBotTarget;
    private float botFocusChance = 0.1f; // 🔽 היה 0.25
    private float botAttackChance = 0.1f; // 🔽 היה 0.33
    private float botCheckCooldown = 2f;
    private float lastBotCheckTime = -999f;

    private bool isAttackingBot = false;

    void Start()
    {
        agent = GetComponent<NavMeshAgent>();
        if (agent == null)
        {
            Debug.LogError("Missing NavMeshAgent component!");
            enabled = false;
            return;
        }

        agent.avoidancePriority = avoidancePriority;
        agent.speed = idleSpeed;
        agent.stoppingDistance = stopDistance;

        if (animator == null)
            animator = GetComponent<Animator>();

        GameObject playerObject = GameObject.FindGameObjectWithTag(targetTag);
        if (playerObject != null)
        {
            player = playerObject.transform;
        }
    }

    void Update()
    {
        if (player == null || agent == null || !agent.isOnNavMesh)
            return;

        // ✅ עדכון בוטים אחת ל־botCheckCooldown שניות
        if (Time.time - lastBotCheckTime >= botCheckCooldown)
        {
            bots = GameObject.FindGameObjectsWithTag("Bots");
            randomBotTarget = null;

            foreach (var bot in bots)
            {
                float distToBot = Vector3.Distance(transform.position, bot.transform.position);
                float distToPlayer = Vector3.Distance(transform.position, player.position);

                if (Random.value < botFocusChance && distToBot <= 10f && distToPlayer > 12f)
                {
                    randomBotTarget = bot.transform;
                    break;
                }
            }

            lastBotCheckTime = Time.time;
        }

        Transform currentTarget = player;
        if (randomBotTarget != null && Random.value < 0.25f) // 🔽 פחות סיכוי להעדיף בוט
            currentTarget = randomBotTarget;

        float distance = Vector3.Distance(transform.position, currentTarget.position);

        if (distance <= attackRange)
        {
            agent.SetDestination(transform.position);
            agent.velocity = Vector3.zero;

            if (Time.time - lastAttackTime >= attackCooldown)
            {
                if (currentTarget.CompareTag("Bots") && Random.value < botAttackChance)
                {
                    PlayRandomAttackAnimation();
                    lastAttackTime = Time.time;
                    isAttackingBot = true;
                    Invoke(nameof(ReturnToPlayerFocus), 1.5f); // 🔽 פחות זמן מבוט
                }
                else if (currentTarget.CompareTag("Player"))
                {
                    PlayRandomAttackAnimation();
                    lastAttackTime = Time.time;
                    isAttackingBot = false;
                }
            }

            SetAnimationState(run: false, walk: false, idle: false);
        }
        else if (distance <= walkRange)
        {
            agent.speed = walkSpeed;
            if (distance > stopDistance)
            {
                agent.SetDestination(currentTarget.position);
            }
            else
            {
                agent.SetDestination(transform.position);
                agent.velocity = Vector3.zero;
            }
            SetAnimationState(run: false, walk: true, idle: false);
        }
        else if (distance <= chaseRange)
        {
            agent.speed = runSpeed;
            if (distance > stopDistance)
            {
                agent.SetDestination(currentTarget.position);
            }
            else
            {
                agent.SetDestination(transform.position);
                agent.velocity = Vector3.zero;
            }
            SetAnimationState(run: true, walk: false, idle: false);
        }
        else
        {
            agent.SetDestination(player.position);

            if (distance <= walkAnimationRange && distance > attackRange)
            {
                agent.speed = walkAnimationSpeed;
                SetAnimationState(run: false, walk: true, idle: false);
            }
            else
            {
                agent.speed = runAnimationSpeed;
                SetAnimationState(run: true, walk: false, idle: false);
            }
        }

        if (isAttackingBot && randomBotTarget != null)
            RotateTowards(randomBotTarget);
        else
            RotateTowards(player);
    }

    private void PlayRandomAttackAnimation()
    {
        int newAttackIndex;
        do
        {
            newAttackIndex = Random.Range(0, 3);
        } while (newAttackIndex == lastAttackIndex);

        lastAttackIndex = newAttackIndex;
        isInvulnerable = true;

        switch (newAttackIndex)
        {
            case 0:
                animator.SetTrigger("Attack");
                break;
            case 1:
                animator.SetTrigger("Attack2");
                break;
            case 2:
                animator.SetTrigger("Attack3");
                break;
        }
    }

    public void EndAttack()
    {
        isInvulnerable = false;
    }

    private void RotateTowards(Transform target)
    {
        Vector3 direction = target.position - transform.position;
        direction.y = 0;
        if (direction.magnitude > 0.5f)
        {
            Quaternion lookRotation = Quaternion.LookRotation(direction);
            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * rotationSpeed);
        }
    }

    private void SetAnimationState(bool run, bool walk, bool idle)
    {
        animator.SetBool("run", run);
        animator.SetBool("walk", walk);
        animator.SetBool("idle", idle);
    }

    private void ReturnToPlayerFocus()
    {
        isAttackingBot = false;
        randomBotTarget = null;
    }
}
