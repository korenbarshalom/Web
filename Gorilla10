using UnityEngine;
using UnityEngine.AI;
using System.Collections;

public class GorillaEnemyAI : MonoBehaviour
{
    [Header("Chase Settings")]
    public float chaseRange = 20f, walkRange = 8f, stopDistance = 1.5f;
    public float runSpeed = 6f, walkSpeed = 3.5f, idleSpeed = 1.5f;
    [Range(1, 99)] public int avoidancePriority = 50;
    public string targetTag = "Player";

    [Header("Rotation & References")]
    [SerializeField] private float rotationSpeed = 5f;
    [SerializeField] private Animator animator;
    public GorillaHealth gorillaHealth;
    public Transform resumePoint;

    public CapsuleCollider attackTriggerCollider;

    private NavMeshAgent agent;
    private Transform player;

    private float attackCooldown = 2.5f, lastAttackTime = -Mathf.Infinity;
    private int lastAttackIndex = -1;
    [HideInInspector] public bool isInvulnerable = false;

    [Header("Swing Settings")]
    public Transform[] swingPoints;
    public Transform swingStartPoint;
    public float swingTriggerDistance = 8f, swingSpeed = 2f, swingHeight = 4f, approachSpeed = 6f;

    private int currentSwingIndex = 0;
    private bool isSwinging = false, preparingToSwing = false, triggeredSwing = false, finishedSwing = false;
    private float swingProgress = 0f;
    private Vector3 swingStart, swingEnd;
    [Header("Roll Settings")]
    public float rollSpeed = 20f;
    public float maxRollDistance = 40f;
    public float maxArcHeight = 4f;
    [Header("Roll Trigger Settings")]
    public float rollCheckInterval = 5f;
    public float rollTriggerChance = 0.25f; // 25%
    public float rollTriggerDistance = 50f;

    private float rollCheckTimer = 0f;



    private bool waitingForPlayerAfterSwing = false;
    private float stuckTimer = 0f;
    private Vector3 lastPosition;

    private bool isRolling = false;
    private float rollCooldown = 6f;
    private float lastRollTime = -999f;

    void Start()
    {
        agent = GetComponent<NavMeshAgent>();
        if (!agent) { Debug.LogError("Missing NavMeshAgent!"); enabled = false; return; }

        agent.avoidancePriority = avoidancePriority;
        agent.speed = idleSpeed;
        agent.stoppingDistance = stopDistance;

        if (!animator) animator = GetComponent<Animator>();

        GameObject playerObject = GameObject.FindGameObjectWithTag(targetTag);
        if (playerObject) player = playerObject.transform;

        if (attackTriggerCollider != null)
            attackTriggerCollider.isTrigger = true;
    }

    void Update()
    {
        if (player == null || player.gameObject == null)
    return;

        if (!isRolling &&
    agent.enabled &&
    player != null &&
    gorillaHealth.CurrentHealth <= gorillaHealth.maxHealth * 0.7f &&
    gorillaHealth.CurrentHealth > gorillaHealth.maxHealth * 0.5f &&
    !IsPlayerInAttackRange())


        {
            rollCheckTimer += Time.deltaTime;

            if (rollCheckTimer >= rollCheckInterval)
            {
                rollCheckTimer = 0f;

                float distToPlayer = Vector3.Distance(transform.position, player.position);
                if (distToPlayer <= rollTriggerDistance)
                {
                    if (Random.value < rollTriggerChance)
                    {
                        StartCoroutine(PerformRollAttack());
                    }
                }
            }
        }


        if (finishedSwing)
        {
            float distToPlayer = Vector3.Distance(transform.position, player.position);
            if (!waitingForPlayerAfterSwing)
            {
                waitingForPlayerAfterSwing = true;
                agent.enabled = false;
                SetAnimationState(false, false, true);
            }

            if (distToPlayer < 35f)
            {
                agent.enabled = true;
                if (agent.isOnNavMesh)
                    agent.SetDestination(player.position);

                SetAnimationState(true, false, false);
                finishedSwing = false;
                triggeredSwing = false;
                waitingForPlayerAfterSwing = false;
            }

            return;
        }

        if (!triggeredSwing && gorillaHealth.CurrentHealth <= gorillaHealth.maxHealth * 0.3f && swingStartPoint != null)
        {
            triggeredSwing = true;
            agent.speed = runSpeed;
            if (agent.isOnNavMesh)
                agent.SetDestination(swingStartPoint.position);

            SetAnimationState(true, false, false);
            StartCoroutine(TempInvulnerability());
            return;
        }

        if (triggeredSwing && !preparingToSwing && !isSwinging && swingStartPoint != null)
        {
            float dist = Vector3.Distance(transform.position, swingStartPoint.position);
            if (dist > swingTriggerDistance)
            {
                if (agent.isOnNavMesh)
                    agent.SetDestination(swingStartPoint.position);

                SetAnimationState(false, true, false);
                return;
            }
            else
            {
                BeginSwingApproach();
                return;
            }
        }

        if (HandleSwing()) return;

        float distance = Vector3.Distance(transform.position, player.position);
        agent.speed = (distance <= walkRange) ? walkSpeed : runSpeed;

        if (agent.isOnNavMesh)
            agent.SetDestination(player.position);

        SetAnimationState(distance > walkRange, distance <= walkRange, false);
        RotateTowards(player);

        if (Vector3.Distance(transform.position, lastPosition) < 0.1f)
            stuckTimer += Time.deltaTime;
        else
            stuckTimer = 0f;

        lastPosition = transform.position;

        if (stuckTimer > 2f)
        {
            Debug.Log("⛔ הגורילה תקועה – ResetPath");
            if (agent.isOnNavMesh)
                agent.ResetPath();
            stuckTimer = 0f;
        }

        if (attackTriggerCollider != null && player != null)
        {
            Collider playerCollider = player.GetComponent<Collider>();
            if (playerCollider != null && attackTriggerCollider.bounds.Intersects(playerCollider.bounds))
            {
                if (Time.time - lastAttackTime >= attackCooldown)
                {
                    PlayRandomAttackAnimation();
                    lastAttackTime = Time.time;
                }
            }
        }
    }

   

    private IEnumerator PerformRollAttack()
    {
        isRolling = true;

        if (player == null || player.gameObject == null)
            yield break;

        agent.enabled = false;

        float preRollWait = 0.9f;
        float timer = 0f;

        animator.SetTrigger("Roll");

        while (timer < preRollWait)
        {
            RotateTowards(player);
            timer += Time.deltaTime;
            yield return null;
        }


        Vector3 rollStartPosition = transform.position;
        Vector3 direction = (player.position - rollStartPosition).normalized;

        float intendedDistance = Vector3.Distance(rollStartPosition, player.position) + 7f;
        float targetDistance = Mathf.Min(intendedDistance, maxRollDistance);


        float distanceTraveled = 0f;

        while (distanceTraveled < targetDistance)
        {
            float t = distanceTraveled / targetDistance;

            Vector3 flatPos = rollStartPosition + direction * distanceTraveled;
            float arcY = Mathf.Sin(Mathf.PI * t) * maxArcHeight;

            float groundY = rollStartPosition.y;
            if (Physics.Raycast(flatPos + Vector3.up * 2f, Vector3.down, out RaycastHit hit, 10f))
            {
                groundY = hit.point.y;
            }

            Vector3 nextPos = flatPos;
            nextPos.y = groundY + arcY;

            transform.position = nextPos;

            distanceTraveled += rollSpeed * Time.deltaTime;
            yield return null;
        }

        yield return new WaitForSeconds(0.5f);

// ✅ תיקון – ניסיון לחזור לנקודת NavMesh הקרובה
bool warped = agent.Warp(transform.position);

if (!warped)
{
    Debug.LogWarning("⚠️ הגורילה נחתה מחוץ ל־NavMesh ולא הצליחה לחזור. נשארת סטטית.");
    // אופציונלי: תוכל להעביר אותה לנקודת גיבוי אם אתה שומר אחת
}

agent.enabled = true;
isRolling = false;

    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player") && Time.time - lastAttackTime >= attackCooldown)
        {
            PlayRandomAttackAnimation();
            lastAttackTime = Time.time;
        }
    }

    private bool HandleSwing()
    {
        if (preparingToSwing) { PrepareSwingMovement(); return true; }
        if (isSwinging) { DoArcSwing(); return true; }
        return false;
    }

    private void BeginSwingApproach()
    {
        agent.enabled = false;
        preparingToSwing = true;
        animator.SetTrigger("Swing");
        transform.rotation = Quaternion.identity;
    }

    private void PrepareSwingMovement()
    {
        Vector3 target = swingPoints[0].position;
        transform.position = Vector3.MoveTowards(transform.position, target, approachSpeed * Time.deltaTime);

        if (Vector3.Distance(transform.position, target) < 0.1f)
        {
            preparingToSwing = false;
            StartSwing();
        }
    }

    private void DoArcSwing()
    {
        if (currentSwingIndex >= swingPoints.Length) return;

        swingProgress += Time.deltaTime * swingSpeed;
        Vector3 flatPos = Vector3.Lerp(swingStart, swingEnd, swingProgress);
        float heightOffset = Mathf.Sin(swingProgress * Mathf.PI) * swingHeight;
        transform.position = flatPos + Vector3.up * heightOffset;

        if (swingProgress >= 1f)
        {
            if (++currentSwingIndex >= swingPoints.Length)
                EndSwing();
            else
            {
                swingStart = swingPoints[currentSwingIndex - 1].position;
                swingEnd = swingPoints[currentSwingIndex].position;
                swingProgress = 0f;
            }
        }
    }

    private void StartSwing()
    {
        isSwinging = true;
        currentSwingIndex = 1;
        swingStart = swingPoints[0].position;
        swingEnd = swingPoints[1].position;
        swingProgress = 0f;
    }

    private void EndSwing()
    {
        isSwinging = false;
        preparingToSwing = false;
        finishedSwing = true;

        runSpeed *= 1.5f;
        walkSpeed *= 1.5f;
        idleSpeed *= 1.5f;
        approachSpeed *= 1.5f;
        attackCooldown = 1.5f;

        if (swingStartPoint != null)
        {
            Destroy(swingStartPoint.gameObject);
            swingStartPoint = null;
        }
    }

    private void PlayRandomAttackAnimation()
    {
        int newIndex;
        do { newIndex = Random.Range(0, 3); } while (newIndex == lastAttackIndex);
        lastAttackIndex = newIndex;
        isInvulnerable = true;

        animator.SetTrigger(newIndex switch
        {
            0 => "Attack",
            1 => "Attack2",
            2 => "Attack3",
            _ => "Attack"
        });
    }

    public void EndAttack() => isInvulnerable = false;

    private void RotateTowards(Transform target)
    {
        Vector3 dir = target.position - transform.position;
        dir.y = 0;
        if (dir.magnitude > 0.5f)
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), Time.deltaTime * rotationSpeed);
    }

    private void SetAnimationState(bool run, bool walk, bool idle)
    {
        animator.SetBool("run", run);
        animator.SetBool("walk", walk);
        animator.SetBool("idle", idle);
    }

    private IEnumerator TempInvulnerability()
    {
        gorillaHealth.isInvulnerable = true;
        yield return new WaitForSeconds(10f);
        gorillaHealth.isInvulnerable = false;
    }
    private bool IsPlayerInAttackRange()
    {
        if (attackTriggerCollider == null || player == null) return false;

        Collider playerCollider = player.GetComponent<Collider>();
        if (playerCollider == null) return false;

        return attackTriggerCollider.bounds.Intersects(playerCollider.bounds);
    }

}
