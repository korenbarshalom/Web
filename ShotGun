using UnityEngine;
using System.Collections;
using TMPro; // חשוב לייבא את הספרייה של TextMeshPro

public class Gun11 : MonoBehaviour
{
    // נקודת ה-FirePoint שממנה יוצא הקליע
    public Transform firePoint;
    // הפריפאב של הקליע
    public GameObject bulletPrefab;
    // האובייקט שיסובב בזמן ה-reload
    public Transform reloadRotateObject;
    // מערך של אובייקטים נוספים שיסובבו (וגם יזוזו) בזמן ה-reload
    public Transform[] additionalReloadRotateObjects;

    // מערך של אובייקטים שיש להתנתק (כמו מגזינים)
    public GameObject[] detachableObjects;

    // רכיבי AudioSource נפרדים לכל אחד מהצלילים
    public AudioSource shootAudioSource;
    public AudioSource reloadAudioSource;
    // הצליל שישמע בכל ירייה
    public AudioClip shootSound;
    // הצליל שישמע פעם אחת בעת ביצוע reload
    public AudioClip reloadSound;

    // Particle System לירי
    public ParticleSystem shootParticle;

    // TextMeshPro להצגת האממו – מוצג כ: "קליעים נוכחיים / מחסניות שנותרו"
    public TMP_Text ammoText;

    // משתנה לבדיקת מצב reload
    private bool isReloading = false;
    // משתנה לאחסון הקרוטינה הפעילה של ה-reload
    private Coroutine currentReloadCoroutine;
    // דגל שמסמן כי תהליך reload נקטע (למשל עקב כיבוי) ויש להשלים אותו בעת הדלקה מחדש
    private bool needsReload = false;

    // מערכת המחסניות:
    // currentMagazineBullets – מספר הקליעים במחסנית הנוכחית (מתחיל ב-2)
    // magazinesCount – מספר המחסניות הכולל (מתחיל ב-6)
    private int currentMagazineBullets = 2;
    private int magazinesCount = 6;

    // משתנים לשמירת המצב ההתחלתי של האובייקטים שמבצעים אנימציית reload
    private Quaternion _originalReloadRotation;
    private Quaternion[] _additionalOriginalRotations;
    private Vector3[] _additionalOriginalPositions;

    void Start()
    {
        UpdateAmmoText();
    }

    // עדכון הטקסט להצגת מספר הקליעים במחסנית הנוכחית ומספר המחסניות שנותרו
    void UpdateAmmoText()
    {
        if (ammoText != null)
            ammoText.text = currentMagazineBullets.ToString() + " / " + magazinesCount.ToString();
    }

    void Update()
    {
        // אם מתבצע reload – אין אפשרות לירות
        if (isReloading)
            return;

        // אם אין קליעים במחסנית וגם אין מחסניות נוספות – אין ירייה
        if (currentMagazineBullets <= 0 && magazinesCount <= 0)
            return;

        if (Input.GetMouseButtonDown(0))
        {
            // ניתן לירות רק אם במחסנית הנוכחית יש לפחות קליע אחד
            if (currentMagazineBullets > 0)
            {
                // יורים קליע
                Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);

                if (shootParticle != null)
                    shootParticle.Play();

                if (shootAudioSource != null && shootSound != null)
                    shootAudioSource.PlayOneShot(shootSound);

                // הפחתת קליע במחסנית הנוכחית ועדכון הטקסט
                currentMagazineBullets--;
                UpdateAmmoText();

                // אם המחסנית נתרוקנה אך קיימת מחסנית במלאי – מתחילים reload
                if (currentMagazineBullets == 0 && magazinesCount > 0)
                {
                    currentReloadCoroutine = StartCoroutine(ReloadCoroutine());
                }
            }
        }
    }

    // כאשר האובייקט נכבה (למשל בגלל כיבוי הנשק) – אם מתבצע reload, מאפסים את האנימציה וסומנים שיש להשלים reload בעת הפעלה מחדש
    void OnDisable()
    {
        if (isReloading)
        {
            if (reloadRotateObject != null)
                reloadRotateObject.localRotation = _originalReloadRotation;

            if (additionalReloadRotateObjects != null && _additionalOriginalRotations != null && _additionalOriginalPositions != null)
            {
                for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
                {
                    additionalReloadRotateObjects[i].localRotation = _additionalOriginalRotations[i];
                    additionalReloadRotateObjects[i].localPosition = _additionalOriginalPositions[i];
                }
            }
            needsReload = true;
            if (currentReloadCoroutine != null)
            {
                StopCoroutine(currentReloadCoroutine);
                currentReloadCoroutine = null;
            }
            isReloading = false;
        }
    }

    // בעת הפעלה מחדש – אם יש reload לא הושלם, מתחילים אותו מחדש
    void OnEnable()
    {
        if (needsReload)
        {
            currentReloadCoroutine = StartCoroutine(ReloadCoroutine());
            needsReload = false;
        }
    }

    // קרוטינה לאנימציית reload, הכוללת טיפול באובייקטים להתנתקות (למשל מגזינים) ואנימציה של סיבוב
    private IEnumerator ReloadCoroutine()
    {
        isReloading = true;

        if (reloadAudioSource != null && reloadSound != null)
            reloadAudioSource.PlayOneShot(reloadSound);

        // טיפול באובייקטים שיש להתנתק (למשל מגזינים)
        if (detachableObjects != null)
        {
            foreach (GameObject obj in detachableObjects)
            {
                if (obj != null)
                {
                    // שמירת ה-parent, המיקום והסיבוב המקומיים המקוריים
                    Transform originalParent = obj.transform.parent;
                    Vector3 originalLocalPos = obj.transform.localPosition;
                    Quaternion originalLocalRot = obj.transform.localRotation;

                    // ניתוק מה-parent – הפיכה לעצמאי
                    obj.transform.SetParent(null);

                    // חישוב מהירות התחלתית: זריקה בכיוון ההפוך של firePoint.forward עם תוספת למעלה
                    Vector3 initialVelocity = (-firePoint.forward + Vector3.up).normalized * 10f;

                    // זריקה ידנית למשך 0.3 שניות
                    StartCoroutine(ThrowObjectWithoutRigidbody(obj, initialVelocity, 0.3f));
                    // לאחר 0.3 שניות, החזרת האובייקט למיקומו המקורי
                    StartCoroutine(ReparentAfterDelay(obj, originalParent, originalLocalPos, originalLocalRot, 0.3f));
                }
            }
        }

        // שמירת המצב ההתחלתי של האובייקטים לפני האנימציה
        _originalReloadRotation = reloadRotateObject.localRotation;
        _additionalOriginalRotations = new Quaternion[additionalReloadRotateObjects.Length];
        _additionalOriginalPositions = new Vector3[additionalReloadRotateObjects.Length];

        for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
        {
            _additionalOriginalRotations[i] = additionalReloadRotateObjects[i].localRotation;
            _additionalOriginalPositions[i] = additionalReloadRotateObjects[i].localPosition;
        }

        float reloadDuration = 1f;
        float halfDuration = reloadDuration / 2f;

        Quaternion originalLocalRotation = reloadRotateObject.localRotation;
        Quaternion targetLocalRotation = originalLocalRotation * Quaternion.Euler(40, 0, 0);

        Quaternion[] additionalTargetRotations = new Quaternion[additionalReloadRotateObjects.Length];
        Vector3[] additionalTargetPositions = new Vector3[additionalReloadRotateObjects.Length];

        for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
        {
            additionalTargetRotations[i] = _additionalOriginalRotations[i] * Quaternion.Euler(40, 0, 0);
            additionalTargetPositions[i] = _additionalOriginalPositions[i] + new Vector3(0f, -0.2f, 0f);
        }

        float elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);

            reloadRotateObject.localRotation = Quaternion.Lerp(originalLocalRotation, targetLocalRotation, t);

            for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
            {
                additionalReloadRotateObjects[i].localRotation = Quaternion.Lerp(_additionalOriginalRotations[i], additionalTargetRotations[i], t);
                additionalReloadRotateObjects[i].localPosition = Vector3.Lerp(_additionalOriginalPositions[i], additionalTargetPositions[i], t);
            }
            yield return null;
        }

        elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);

            reloadRotateObject.localRotation = Quaternion.Lerp(targetLocalRotation, originalLocalRotation, t);

            for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
            {
                additionalReloadRotateObjects[i].localRotation = Quaternion.Lerp(additionalTargetRotations[i], _additionalOriginalRotations[i], t);
                additionalReloadRotateObjects[i].localPosition = Vector3.Lerp(additionalTargetPositions[i], _additionalOriginalPositions[i], t);
            }
            yield return null;
        }

        // הבטחה שהאובייקטים יחזרו למצב ההתחלתי
        reloadRotateObject.localRotation = originalLocalRotation;
        for (int i = 0; i < additionalReloadRotateObjects.Length; i++)
        {
            additionalReloadRotateObjects[i].localRotation = _additionalOriginalRotations[i];
            additionalReloadRotateObjects[i].localPosition = _additionalOriginalPositions[i];
        }

        // בשלב זה מתבצע "החלפת מחסנית":
        // מחסנית אחת נצרכת, והקליעים במחסנית החדשה מתאפסים ל-2
        magazinesCount--;
        // במידה והמחסניות נגמרו – לא ניתן לטעון מחדש (אפשר להוסיף טיפול מיוחד במקרה זה)
        if (magazinesCount < 0)
            magazinesCount = 0;

        currentMagazineBullets = 2;
        UpdateAmmoText();

        isReloading = false;
        currentReloadCoroutine = null;
    }

    // קורוטינה המדמה זריקה ידנית ללא שימוש ב-Rigidbody (על ידי שינוי transform)
    private IEnumerator ThrowObjectWithoutRigidbody(GameObject obj, Vector3 initialVelocity, float duration)
    {
        float elapsed = 0f;
        Vector3 velocity = initialVelocity;
        while (elapsed < duration)
        {
            if (obj == null)
                yield break;
            if (obj.transform.parent != null)
                break;
            velocity += Physics.gravity * Time.deltaTime;
            obj.transform.position += velocity * Time.deltaTime;
            elapsed += Time.deltaTime;
            yield return null;
        }
    }

    // קורוטינה הממתינה delay נתון ואז מחזירה את האובייקט ל-parent, למיקום ולרוטציה המקוריים
    private IEnumerator ReparentAfterDelay(GameObject obj, Transform originalParent, Vector3 originalLocalPos, Quaternion originalLocalRot, float delay)
    {
        yield return new WaitForSeconds(delay);
        if (obj != null && originalParent != null)
        {
            obj.transform.SetParent(originalParent);
            obj.transform.localPosition = originalLocalPos;
            obj.transform.localRotation = originalLocalRot;
        }
    }
}
