using UnityEngine;
using System.Collections;
using TMPro; // TextMesh Pro
using System.Collections.Generic;

public class WeaponSwitcher : MonoBehaviour
{
    // --- הגדרות החלפת וניהול נשקים ---
    public GameObject gun;         // נשק 1 (למשל אקדח)
    public GameObject ak47;        // AK47
    public GameObject knife;       // סכין
    public GameObject pistol;      // אקדח (משמש לנשק נוסף, במקרה זה לא בשימוש)
    public GameObject extraWeapon; // נשק נוסף – יוצג בגלגלת רק לאחר פתיחה
    public GameObject extraWeapon2; // נשק נוסף 2 – מוצג בגלגלת רק לאחר פתיחה
    public GameObject extraWeapon3; // נשק נוסף 3 – pickup חדש
    public GameObject extraWeapon4; // נשק נוסף 4 – pickup חדש
    public GameObject extraWeapon5; // נשק נוסף 5 – pickup חדש
    public GameObject extraWeapon6;          // נשק נוסף 6 – pickup חדש

    // Pickup objects for weapon pickups
    public Transform gunPickupObject; // Pickup עבור ה-Gun
    public Transform akPickupObject;  // Pickup עבור ה-AK47
    public Transform extraWeaponPickupObject;  // Pickup עבור extraWeapon
    public Transform extraWeaponPickupObject2; // Pickup עבור extraWeapon2
    public Transform extraWeaponPickupObject3; // Pickup עבור extraWeapon3
    public Transform extraWeaponPickupObject4; // Pickup עבור extraWeapon4
    public Transform extraWeaponPickupObject5; // Pickup עבור extraWeapon5
    public Transform extraWeaponPickupObject6; // Pickup עבור extraWeapon6

    // דגלי פתיחה (Unlock) עבור הנשקים שהופכים ל-Pickup
    private bool gunUnlocked = false;
    private bool akUnlocked = false;
    private bool extraWeaponUnlocked = false;
    private bool extraWeapon2Unlocked = false;
    private bool extraWeapon3Unlocked = false;
    private bool extraWeapon4Unlocked = false;
    private bool extraWeapon5Unlocked = false;
    private bool extraWeapon6Unlocked = false;

    // הגדרות ירי עבור הרובה (במקרה זה האקדח הוא gun)
    public GameObject bulletPrefab; // פרפאב כדור
    public Transform firePoint;     // נקודת ירי ל־gun
    public float bulletSpeed = 20f; // מהירות כדור
    public float fireRate = 0.5f;   // קצב ירי ל־gun
    public ParticleSystem muzzleFlash; // אפקט פירור עבור ה־gun

    // שדות סאונד הירי
    public AudioClip gunShootSound;
    public float gunShootVolume = 1f;
    public AudioSource gunAudioSource;

    // שדות סאונד הרילוד
    public AudioClip reloadSound;
    public float reloadVolume = 1f;
    public AudioSource reloadAudioSource;

    // **שדות סאונד רילוד עבור ה-AK47**
    public AudioClip akReloadSound;
    public AudioSource akReloadAudioSource;

    // שדות סאונד לקיחת הנשק (Pickup) – ישמשו לכל הנשקים
    public AudioClip gunPickupSound;
    public AudioSource gunPickupAudioSource;

    // הגדרות ירי עבור ה־AK47
    public Transform akFirePoint;
    public float akFireRate = 0.3f;
    public ParticleSystem akMuzzleFlash;

    public Transform bulletsParent;

    // ניהול ירי
    private float nextFireTime = 0f;
    private bool isReloading = false;

    // ניהול כדורים – הגדרות של מאגר וקליפ
    public int maxAmmo = 90;    // סך כל הכדורים (כולל קליפ + מאגר)
    public int clipSize = 30;   // מספר כדורים בכל קליפ
    private int gunCurrentAmmo; // כדורים בקליפ של gun
    private int gunReserveAmmo; // כדורים במאגר של gun
    private int ak47CurrentAmmo; // כדורים בקליפ של ה-AK47
    private int ak47ReserveAmmo; // כדורים במאגר של ה-AK47

    // הגדרות ריקול עבור ירי
    public float recoilAmount = 0.1f;
    public float recoilSpeed = 5f;
    private Vector3 initialGunPosition;
    private Vector3 initialAK47Position;

    // הגדרת אנימציית הזזת ה־slides (לרילוד)
    public Transform[] slides;
    public float slideBackDistance = 0.2f;
    public float slideAnimDuration = 0.2f;
    private Vector3[] initialSlidePositions;
    public Vector3 slideDirection = new Vector3(1f, 0f, 0f);

    // מערך הנשקים ואינדקס הנשק הפעיל
    // הסדר חשוב: index 0 = gun, 1 = ak47, 2 = knife, 3 = pistol, 4 = extraWeapon, 5 = extraWeapon2, 6 = extraWeapon3, 7 = extraWeapon4, 8 = extraWeapon5
    private int currentWeaponIndex = 0;
    private GameObject[] weapons;

    // הגדרות לסוויי הנשק (תנועה קטנה בעקבות העכבר)
    [Header("Weapon Sway Settings")]
    public float swayAmount = 0.05f;
    public float swaySmoothing = 5f;
    private Vector3[] initialPositions;
    private Quaternion[] initialRotations;  // שמירת סיבובי הנשקים ההתחלתיים

    // משתנה לניהול נשק pickup נוכחי (ערך -1 אם לא הועלה נשק)
    // ערכים: 0 עבור Gun, 1 עבור AK47, 4 עבור extraWeapon, 5 עבור extraWeapon2, 6 עבור extraWeapon3, 7 עבור extraWeapon4, 8 עבור extraWeapon5
    private int currentPickupWeaponIndex = -1;

    // זמן השהייה לפני שה-Pickup יחזור לחיים (למשל 30 שניות)
    public float pickupRespawnDelay = 30f;

    // אזור איסור ירי
    public Transform noShootObject;
    public Transform player;

    // TextMesh Pro לתצוגת כדורים
    public TMP_Text ammoCountdownText;

    // Pickup של כדורים – כל אחד מוסיף 15 כדורים למאגר
    public GameObject[] ammoPickupObjects;
    private bool[] ammoPickupUsedFlags;

    // הגדרות בוסט
    public float backwardBoost = 10f;
    public float upwardBoost = 5f;
    public float boostCooldown = 15f;
    private float lastBoostTime = -15f;
    public PlayerMovement playerMovement;

    // מעבר חלק בין הנשקים
    [Header("Weapon Switch Smooth Transition")]
    public float switchOutDuration = 0.25f;
    public float switchInDuration = 0.25f;
    private bool isSwitching = false;

    // משתנה לניהול זמן Idle – אם אין תנועה או ירי למשך 3 שניות, תתחיל אנימציית Idle
    private float idleTimer = 0f;

    private void Start()
    {
        // אתחול מערך הנשקים – הסדר חשוב: gun, ak47, knife, pistol, extraWeapon, extraWeapon2, extraWeapon3, extraWeapon4, extraWeapon5
        weapons = new GameObject[] { gun, ak47, knife, pistol, extraWeapon, extraWeapon2, extraWeapon3, extraWeapon4, extraWeapon5, extraWeapon6 };

        // שמירת המיקום והסיבוב ההתחלתי לכל נשק לצורך אנימציות סוויי והחלפה
        initialPositions = new Vector3[weapons.Length];
        initialRotations = new Quaternion[weapons.Length];
        for (int i = 0; i < weapons.Length; i++)
        {
            if (weapons[i] != null)
            {
                initialPositions[i] = weapons[i].transform.localPosition;
                initialRotations[i] = weapons[i].transform.localRotation;
            }
        }

        // הפעלה מיידית של הנשק הסטנדרטי (למשל סכין, index 2) כדי לא להפעיל נשק pickup שלא נפתח
        SwitchWeaponImmediate(3);

        // שמירת מיקום התחלתי עבור הנשקים עם ריקול
        if (gun != null)
        {
            initialGunPosition = gun.transform.localPosition;
        }
        if (ak47 != null)
        {
            initialAK47Position = ak47.transform.localPosition;
        }

        // שמירת המיקום ההתחלתי של כל slide במערך (אם הוגדר)
        if (slides != null && slides.Length > 0)
        {
            initialSlidePositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                if (slides[i] != null)
                    initialSlidePositions[i] = slides[i].localPosition;
            }
        }

        // אתחול משתני כדורים לנשקים – קליפ מלא ומאגר בהתאם
        gunCurrentAmmo = clipSize;
        gunReserveAmmo = maxAmmo - clipSize;
        ak47CurrentAmmo = clipSize;
        ak47ReserveAmmo = maxAmmo - clipSize;

        // אתחול דגלי אחסון לאמפאפים
        if (ammoPickupObjects != null && ammoPickupObjects.Length > 0)
        {
            ammoPickupUsedFlags = new bool[ammoPickupObjects.Length];
        }
    }

    private void Update()
    {
        // בדיקה האם השחקן זז או יורה – אם יש תנועה או לחצן ירי פעיל, מאפסים את ה־idleTimer
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");
        if (Mathf.Abs(horizontalInput) > 0.1f || Mathf.Abs(verticalInput) > 0.1f || Input.GetButton("Fire1"))
        {
            idleTimer = 0f;
        }
        else
        {
            idleTimer += Time.deltaTime;
        }

        // --- Pickup עבור Gun ---
        if (!gunUnlocked && gunPickupObject != null && Input.GetKeyDown(KeyCode.F))
        {
            float distance = Vector3.Distance(player.position, gunPickupObject.position);
            if (distance <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 0)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 0;
                gunUnlocked = true;
                Debug.Log("Gun unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                gunPickupObject.gameObject.SetActive(false);
                if (currentWeaponIndex != 0)
                {
                    StartCoroutine(SmoothSwitchWeapon(0));
                }
            }
        }

        // --- פתיחת AK47 ---
        if (!akUnlocked && akPickupObject != null && Input.GetKeyDown(KeyCode.F))
        {
            float distance = Vector3.Distance(player.position, akPickupObject.position);
            if (distance <= 3f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 1)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 1;
                akUnlocked = true;
                Debug.Log("AK47 unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                akPickupObject.gameObject.SetActive(false);
                if (currentWeaponIndex != 1)
                {
                    StartCoroutine(SmoothSwitchWeapon(1));
                }
            }
        }

        // --- Extra Weapon Pickup ---
        if (!extraWeaponUnlocked && extraWeaponPickupObject != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist = Vector3.Distance(player.position, extraWeaponPickupObject.position);
            if (dist <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 4)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 4;
                extraWeaponUnlocked = true;
                Debug.Log("Extra Weapon unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                StartCoroutine(SmoothSwitchWeapon(4)); // index 4
                extraWeaponPickupObject.gameObject.SetActive(false);
            }
        }

        // --- Extra Weapon 2 Pickup (נשק נוסף) ---
        if (!extraWeapon2Unlocked && extraWeaponPickupObject2 != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist2 = Vector3.Distance(player.position, extraWeaponPickupObject2.position);
            if (dist2 <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 5)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 5;
                extraWeapon2Unlocked = true;
                Debug.Log("Extra Weapon 2 unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                StartCoroutine(SmoothSwitchWeapon(5)); // index 5
                extraWeaponPickupObject2.gameObject.SetActive(false);
            }
        }

        // --- Extra Weapon 3 Pickup (נשק נוסף חדש) ---
        if (!extraWeapon3Unlocked && extraWeaponPickupObject3 != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist3 = Vector3.Distance(player.position, extraWeaponPickupObject3.position);
            if (dist3 <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 6)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 6;
                extraWeapon3Unlocked = true;
                Debug.Log("Extra Weapon 3 unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                StartCoroutine(SmoothSwitchWeapon(6)); // index 6
                extraWeaponPickupObject3.gameObject.SetActive(false);
            }
        }

        // --- Extra Weapon 4 Pickup (נשק נוסף חדש) ---
        if (!extraWeapon4Unlocked && extraWeaponPickupObject4 != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist4 = Vector3.Distance(player.position, extraWeaponPickupObject4.position);
            if (dist4 <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 7)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 7;
                extraWeapon4Unlocked = true;
                Debug.Log("Extra Weapon 4 unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                StartCoroutine(SmoothSwitchWeapon(7)); // index 7
                extraWeaponPickupObject4.gameObject.SetActive(false);
            }
        }

        // --- Extra Weapon 5 Pickup (נשק נוסף חדש) ---
        if (!extraWeapon5Unlocked && extraWeaponPickupObject5 != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist5 = Vector3.Distance(player.position, extraWeaponPickupObject5.position);
            if (dist5 <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 8)
                {
                    DropWeapon(currentPickupWeaponIndex);
                }
                currentPickupWeaponIndex = 8;
                extraWeapon5Unlocked = true;
                Debug.Log("Extra Weapon 5 unlocked!");
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }
                StartCoroutine(SmoothSwitchWeapon(8)); // index 8
                extraWeaponPickupObject5.gameObject.SetActive(false);
            }
        }
        // --- Extra Weapon 6 Pickup (נשק נוסף חדש) ---
        if (!extraWeapon6Unlocked && extraWeaponPickupObject6 != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist6 = Vector3.Distance(player.position, extraWeaponPickupObject6.position);
            if (dist6 <= 2f)
            {
                if (currentPickupWeaponIndex != -1 && currentPickupWeaponIndex != 9)
                    DropWeapon(currentPickupWeaponIndex);

                currentPickupWeaponIndex = 9;
                extraWeapon6Unlocked = true;
                Debug.Log("Extra Weapon 6 unlocked!");

                if (gunPickupSound != null && gunPickupAudioSource != null)
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);

                StartCoroutine(SmoothSwitchWeapon(9));      // index 9
                extraWeaponPickupObject6.gameObject.SetActive(false);
            }
        }

        // --- החלפת נשקים בגלגלת העכבר ---
        float scroll = Input.GetAxis("Mouse ScrollWheel");
        if (scroll != 0f && !isSwitching)
        {
            int direction = scroll > 0f ? 1 : -1;
            int nextIndex = currentWeaponIndex;
            int attempts = 0;
            do
            {
                nextIndex = (nextIndex + direction + weapons.Length) % weapons.Length;
                attempts++;
                if (attempts > weapons.Length) break;
            }
            while ((weapons[nextIndex] == knife) ||                             // ← חדש
             (weapons[nextIndex] == gun && !gunUnlocked) ||
             (weapons[nextIndex] == ak47 && !akUnlocked) ||
             (weapons[nextIndex] == extraWeapon && !extraWeaponUnlocked) ||
             (weapons[nextIndex] == extraWeapon2 && !extraWeapon2Unlocked) ||
             (weapons[nextIndex] == extraWeapon3 && !extraWeapon3Unlocked) ||
             (weapons[nextIndex] == extraWeapon4 && !extraWeapon4Unlocked) ||
             (weapons[nextIndex] == extraWeapon5 && !extraWeapon5Unlocked) ||
              (weapons[nextIndex] == extraWeapon6 && !extraWeapon6Unlocked));



            if (nextIndex != currentWeaponIndex)
            {
                StartCoroutine(SmoothSwitchWeapon(nextIndex));
            }
        }

        // --- בדיקה האם מותר לירות ---
        bool canShoot = true;
        if (noShootObject != null && player != null)
        {
            float distanceToNoShoot = Vector3.Distance(player.position, noShootObject.position);
            if (distanceToNoShoot <= 5f)
            {
                canShoot = false;
            }
        }

        // --- ירי ב־gun (האקדח) ---
        if (gun.activeSelf && Input.GetButton("Fire1") && !isReloading && canShoot)
        {
            if (gunCurrentAmmo > 0)
            {
                if (Time.time >= nextFireTime)
                {
                    Shoot(firePoint, muzzleFlash);
                    if (gunShootSound != null && gunAudioSource != null)
                    {
                        gunAudioSource.volume = gunShootVolume;
                        gunAudioSource.PlayOneShot(gunShootSound, gunShootVolume);
                    }
                    StartCoroutine(AnimateGunRecoilRotation());
                    nextFireTime = Time.time + fireRate;
                    gunCurrentAmmo--;
                    if (gunCurrentAmmo == 0 && gunReserveAmmo > 0)
                    {
                        StartCoroutine(Reload());
                    }
                }
            }
            else
            {
                Debug.Log("No more ammo in the gun!");
            }
        }
        // --- ירי ב־AK47 ---
        else if (ak47.activeSelf && Input.GetButton("Fire1") && !isReloading && canShoot)
        {
            if (ak47CurrentAmmo > 0)
            {
                if (Time.time >= nextFireTime)
                {
                    Shoot(akFirePoint, akMuzzleFlash);
                    if (gunShootSound != null && gunAudioSource != null)
                    {
                        gunAudioSource.volume = gunShootVolume;
                        gunAudioSource.PlayOneShot(gunShootSound, gunShootVolume);
                    }
                    nextFireTime = Time.time + akFireRate;
                    ak47CurrentAmmo--;
                    if (ak47CurrentAmmo == 0 && ak47ReserveAmmo > 0)
                    {
                        StartCoroutine(Reload());
                    }
                }
            }
            else
            {
                Debug.Log("No more ammo in the AK47!");
            }
        }

        // --- אפשרות לבצע רילוד ידני על ידי לחיצה על מקש R ---
        if ((gun.activeSelf || ak47.activeSelf) && Input.GetKeyDown(KeyCode.R) && !isReloading)
        {
            if (gun.activeSelf && gunCurrentAmmo < clipSize && gunReserveAmmo > 0)
            {
                StartCoroutine(Reload());
            }
            else if (ak47.activeSelf && ak47CurrentAmmo < clipSize && ak47ReserveAmmo > 0)
            {
                StartCoroutine(Reload());
            }
        }

        // --- בוסט במקשי C לנשק ה־gun ---
        if (gun.activeSelf && Input.GetKeyDown(KeyCode.C))
        {
            if (Time.time >= lastBoostTime + boostCooldown)
            {
                if (playerMovement != null)
                {
                    Vector3 boost = (-playerMovement.transform.forward * backwardBoost) + (Vector3.up * upwardBoost);
                    playerMovement.ApplyBoost(boost);
                    lastBoostTime = Time.time;
                    Debug.Log("Boost applied to the player!");
                }
                else
                {
                    Debug.LogWarning("PlayerMovement not assigned!");
                }
            }
            else
            {
                float timeLeft = (lastBoostTime + boostCooldown) - Time.time;
                Debug.Log("Boost on cooldown. Try again in " + timeLeft.ToString("F1") + " seconds.");
            }
        }

        // הגדרת תנועת Idle – תופעל רק אם השחקן עומד ולא יורה למשך 3 שניות
        float idleFrequency = 2.0f;
        float idleAmplitude = 0.02f;
        float idleOffsetY = Mathf.Sin(Time.time * idleFrequency) * idleAmplitude;

        // --- Recoil & Weapon Sway (לכל הנשקים חוץ מ־Knife) ---
        // עבור כל נשק (מלבד Knife) נשתמש באותה לוגיקה כמו ב־Gun/AK47:
        if (gun.activeSelf)
        {
            Vector3 recoilTarget = initialGunPosition + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            gun.transform.localPosition = Vector3.Lerp(gun.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (ak47.activeSelf)
        {
            Vector3 recoilTarget = initialAK47Position + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            ak47.transform.localPosition = Vector3.Lerp(ak47.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        // עבור כל הנשקים האחרים (למעט Knife) – משתמשים ב־initialPositions:
        if (pistol.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, pistol);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            pistol.transform.localPosition = Vector3.Lerp(pistol.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (extraWeapon != null && extraWeapon.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            extraWeapon.transform.localPosition = Vector3.Lerp(extraWeapon.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (extraWeapon2 != null && extraWeapon2.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon2);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            extraWeapon2.transform.localPosition = Vector3.Lerp(extraWeapon2.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (extraWeapon3 != null && extraWeapon3.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon3);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            extraWeapon3.transform.localPosition = Vector3.Lerp(extraWeapon3.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (extraWeapon4 != null && extraWeapon4.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon4);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            extraWeapon4.transform.localPosition = Vector3.Lerp(extraWeapon4.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        // --- Weapon Sway עבור extraWeapon5 ---
        if (extraWeapon5 != null && extraWeapon5.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon5);
            Vector3 recoilTarget = initialPositions[index] + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            if (idleTimer > 2f)
            {
                combinedTarget += new Vector3(0, idleOffsetY, 0);
            }
            extraWeapon5.transform.localPosition = Vector3.Lerp(extraWeapon5.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }

        // --- Weapon Sway עבור extraWeapon6 ---
        if (extraWeapon6 != null && extraWeapon6.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon6);

            Vector3 recoilTarget = initialPositions[index] +
                                   (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);

            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount,
                                               -Input.GetAxis("Mouse Y") * swayAmount, 0);

            Vector3 combinedTarget = recoilTarget + swayOffset;

            if (idleTimer > 2f)
                combinedTarget += new Vector3(0, idleOffsetY, 0);

            extraWeapon6.transform.localPosition =
                Vector3.Lerp(extraWeapon6.transform.localPosition,
                             combinedTarget,
                             Time.deltaTime * recoilSpeed);
        }

        // --- שימוש ב־Knife ---
        if (knife.activeSelf && Input.GetButtonDown("Fire2"))
        {
            UseKnife();
        }

        // --- עדכון תצוגת כדורים ---
        if (gun.activeSelf)
        {
            ammoCountdownText.text = gunCurrentAmmo.ToString() + " / " + gunReserveAmmo.ToString();
        }
        else if (ak47.activeSelf)
        {
            ammoCountdownText.text = ak47CurrentAmmo.ToString() + " / " + ak47ReserveAmmo.ToString();
        }
        else
        {
            ammoCountdownText.text = "";
        }

        // --- טיפול באספני כדורים (Ammo Pickups) ---
        if (ammoPickupObjects != null && ammoPickupUsedFlags != null)
        {
            for (int i = 0; i < ammoPickupObjects.Length; i++)
            {
                if (!ammoPickupUsedFlags[i] && ammoPickupObjects[i] == null)
                {
                    gunReserveAmmo = Mathf.Min(gunReserveAmmo + 15, maxAmmo - clipSize);
                    ak47ReserveAmmo = Mathf.Min(ak47ReserveAmmo + 15, maxAmmo - clipSize);
                    ammoPickupUsedFlags[i] = true;
                    Debug.Log("Ammo pickup applied: +15 bullets to both gun and AK47");
                }
            }
        }
    }

    // מתודה לעדכון ירי – שינינו אותה כך שכאשר הנשק הוא gun או ak47, הכדור ינוע בכיוון ה־Camera.main.forward
    private void Shoot(Transform point, ParticleSystem flash)
    {
        // חשב את כיוון הירי - באופן ברירת מחדל הכיוון יהיה כפי שה-firePoint מגדיר
        Vector3 shootDirection = point.forward;

        // אם הנשק הפעיל הוא gun או ak47, השתמש בכיוון המצלמה הראשית (הכוונת)
        if ((gun != null && gun.activeSelf) || (ak47 != null && ak47.activeSelf))
        {
            shootDirection = Camera.main.transform.forward;
        }

        // עדכון סיבוב הקליע כך שיתאים לכיוון הירי החדש
        Quaternion adjustedRotation = Quaternion.LookRotation(shootDirection);
        GameObject bullet = Instantiate(bulletPrefab, point.position, adjustedRotation);

        if (bulletsParent != null)
        {
            bullet.transform.SetParent(bulletsParent);
        }

        Rigidbody rb = bullet.GetComponent<Rigidbody>();
        rb.linearVelocity = shootDirection * bulletSpeed;

        Destroy(bullet, 4f);

        if (flash != null)
        {
            flash.Play();
        }
    }

    private IEnumerator Reload()
    {
        isReloading = true;
        Debug.Log("Reloading...");

        float totalReloadTime = (slides != null && slides.Length > 0) ? (3 * slideAnimDuration + 0.05f) : 0.5f;
        if (ak47.activeSelf)
        {
            // במקום סיבוב 360, מבצעים סיבוב 50 מעלות על ציר ה-Z ואז חזרה
            StartCoroutine(RotateAK(totalReloadTime));
            // בנוסף – הזזת האובייקט של AK47 על ציר ה-Z 2 מטר למטה ואז חזרה למקומו ההתחלתי
            StartCoroutine(TranslateAK(totalReloadTime));
        }

        if (gun.activeSelf)
        {
            if (reloadSound == null)
            {
                Debug.LogWarning("Reload sound clip is not assigned!");
            }
            if (reloadAudioSource == null)
            {
                Debug.LogWarning("Reload AudioSource is not assigned!");
            }
            else if (reloadSound != null)
            {
                reloadAudioSource.PlayOneShot(reloadSound, reloadVolume);
            }
        }
        else if (ak47.activeSelf)
        {
            if (akReloadSound == null)
            {
                Debug.LogWarning("AK reload sound clip is not assigned!");
            }
            if (akReloadAudioSource == null)
            {
                Debug.LogWarning("AK reload AudioSource is not assigned!");
            }
            else if (akReloadSound != null)
            {
                akReloadAudioSource.PlayOneShot(akReloadSound, reloadVolume);
            }
        }

        if (slides != null && slides.Length > 0)
        {
            Vector3[] targetPositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                targetPositions[i] = initialSlidePositions[i] + slideDirection.normalized * slideBackDistance;
            }
            float elapsed = 0f;
            while (elapsed < slideAnimDuration)
            {
                for (int i = 0; i < slides.Length; i++)
                {
                    slides[i].localPosition = Vector3.Lerp(initialSlidePositions[i], targetPositions[i], elapsed / slideAnimDuration);
                }
                elapsed += Time.deltaTime;
                yield return null;
            }
            for (int i = 0; i < slides.Length; i++)
            {
                slides[i].localPosition = targetPositions[i];
            }
        }

        yield return new WaitForSeconds(0.05f);

        if (slides != null && slides.Length > 0)
        {
            Vector3[] targetPositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                targetPositions[i] = initialSlidePositions[i] + slideDirection.normalized * slideBackDistance;
            }
            float elapsed = 0f;
            while (elapsed < slideAnimDuration)
            {
                for (int i = 0; i < slides.Length; i++)
                {
                    slides[i].localPosition = Vector3.Lerp(targetPositions[i], initialSlidePositions[i], elapsed / slideAnimDuration);
                }
                elapsed += Time.deltaTime;
                yield return null;
            }
            for (int i = 0; i < slides.Length; i++)
            {
                slides[i].localPosition = initialSlidePositions[i];
            }
        }

        if (gun.activeSelf)
        {
            int needed = clipSize - gunCurrentAmmo;
            if (gunReserveAmmo >= needed)
            {
                gunCurrentAmmo = clipSize;
                gunReserveAmmo -= needed;
            }
            else
            {
                gunCurrentAmmo += gunReserveAmmo;
                gunReserveAmmo = 0;
            }
        }
        else if (ak47.activeSelf)
        {
            int needed = clipSize - ak47CurrentAmmo;
            if (ak47ReserveAmmo >= needed)
            {
                ak47CurrentAmmo = clipSize;
                ak47ReserveAmmo -= needed;
            }
            else
            {
                ak47CurrentAmmo += ak47ReserveAmmo;
                ak47ReserveAmmo = 0;
            }
        }

        nextFireTime = Time.time;
        isReloading = false;
    }

    // קורוטינה לסיבוב 50 מעלות על ציר ה-Z עבור ה-AK47 בזמן הרילוד, ואז חזרה למצב המקורי
    private IEnumerator RotateAK(float duration)
    {
        Quaternion originalRotation = ak47.transform.localRotation;
        Quaternion targetRotation = originalRotation * Quaternion.Euler(0, 50, 0f);
        float halfDuration = duration / 2f;
        float elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);
            ak47.transform.localRotation = Quaternion.Lerp(originalRotation, targetRotation, t);
            yield return null;
        }
        ak47.transform.localRotation = targetRotation;
        elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);
            ak47.transform.localRotation = Quaternion.Lerp(targetRotation, originalRotation, t);
            yield return null;
        }
        ak47.transform.localRotation = originalRotation;
    }

    // קורוטינה להזזת ה-AK47 על ציר ה-Z 2 מטר למטה ואז חזרה למקומו ההתחלתי בזמן הרילוד
    private IEnumerator TranslateAK(float duration)
    {
        Vector3 originalPosition = initialAK47Position;
        Vector3 targetPosition = originalPosition + new Vector3(0f, -0.3f, 0f);
        float halfDuration = duration / 2f;
        float elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);
            ak47.transform.localPosition = Vector3.Lerp(originalPosition, targetPosition, t);
            yield return null;
        }
        ak47.transform.localPosition = targetPosition;
        elapsed = 0f;
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / halfDuration);
            ak47.transform.localPosition = Vector3.Lerp(targetPosition, originalPosition, t);
            yield return null;
        }
        ak47.transform.localPosition = originalPosition;
    }

    // מעבר מיידי ללא אנימציה (למשל בהתחלה)
    private void SwitchWeaponImmediate(int weaponIndex)
    {
        for (int i = 0; i < weapons.Length; i++)
        {
            if (weapons[i] != null)
                weapons[i].SetActive(i == weaponIndex);
        }
        currentWeaponIndex = weaponIndex;
    }

    // מעבר חלק בין הנשקים – כולל שינוי מיקום וסיבוב (אנימציה של הוצאת והכנסת הנשק)
    private IEnumerator SmoothSwitchWeapon(int newIndex)
    {
        if (isSwitching)
            yield break;
        isSwitching = true;

        if (newIndex == currentWeaponIndex)
        {
            isSwitching = false;
            yield break;
        }

        GameObject currentWeapon = weapons[currentWeaponIndex];
        Vector3 startPos = currentWeapon.transform.localPosition;
        Quaternion startRot = currentWeapon.transform.localRotation;
        Vector3 exitPos = startPos + new Vector3(0, -0.5f, 0);
        Quaternion exitRot = Quaternion.Euler(0, 0, -30) * startRot;
        float timer = 0f;
        while (timer < switchOutDuration)
        {
            timer += Time.deltaTime;
            float t = timer / switchOutDuration;
            currentWeapon.transform.localPosition = Vector3.Lerp(startPos, exitPos, t);
            currentWeapon.transform.localRotation = Quaternion.Slerp(startRot, exitRot, t);
            yield return null;
        }
        currentWeapon.transform.localPosition = exitPos;
        currentWeapon.transform.localRotation = exitRot;
        currentWeapon.SetActive(false);

        // כאשר נשק שהופסק הופך ללא פעיל, אם הוא היה pickup – מתחילים ספירה להחזרתו
        if (currentWeapon == gun && gunPickupObject != null)
        {
            StartCoroutine(RespawnPickupCoroutine(gunPickupObject));
        }
        else if (currentWeapon == ak47 && akPickupObject != null)
        {
            StartCoroutine(RespawnPickupCoroutine(akPickupObject));
        }
        else if (currentWeapon == extraWeapon && extraWeaponPickupObject != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject));
        }
        else if (currentWeapon == extraWeapon2 && extraWeaponPickupObject2 != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject2));
        }
        else if (currentWeapon == extraWeapon3 && extraWeaponPickupObject3 != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject3));
        }
        else if (currentWeapon == extraWeapon4 && extraWeaponPickupObject4 != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject4));
        }
        else if (currentWeapon == extraWeapon5 && extraWeaponPickupObject5 != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject5));
        }
        else if (currentWeapon == extraWeapon6 && extraWeaponPickupObject6 != null)
        {
            StartCoroutine(RespawnPickupCoroutine(extraWeaponPickupObject6));
        }

        currentWeaponIndex = newIndex;
        GameObject newWeapon = weapons[newIndex];
        newWeapon.SetActive(true);
        Vector3 newInitialPos = initialPositions[newIndex];
        Quaternion newInitialRot = initialRotations[newIndex];
        Vector3 entryPos = newInitialPos + new Vector3(0, -0.5f, 0);
        Quaternion entryRot = Quaternion.Euler(0, 0, 30) * newInitialRot;
        newWeapon.transform.localPosition = entryPos;
        newWeapon.transform.localRotation = entryRot;

        timer = 0f;
        while (timer < switchInDuration)
        {
            timer += Time.deltaTime;
            float t = timer / switchInDuration;
            newWeapon.transform.localPosition = Vector3.Lerp(entryPos, newInitialPos, t);
            newWeapon.transform.localRotation = Quaternion.Slerp(entryRot, newInitialRot, t);
            yield return null;
        }
        newWeapon.transform.localPosition = newInitialPos;
        newWeapon.transform.localRotation = newInitialRot;

        isSwitching = false;
    }

    // מטודה המשחררת (מטילה) נשק pickup קודם, מסמנת אותו כלא פעיל, ומפעילה ספירה להחזרתו
    private void DropWeapon(int index)
    {
        if (index == 0)
        {
            gunUnlocked = false;
        }
        else if (index == 1)
        {
            akUnlocked = false;
        }
        else if (index == 4)
        {
            extraWeaponUnlocked = false;
        }
        else if (index == 5)
        {
            extraWeapon2Unlocked = false;
        }
        else if (index == 6)
        {
            extraWeapon3Unlocked = false;
        }
        else if (index == 7)
        {
            extraWeapon4Unlocked = false;
        }
        else if (index == 8)
        {
            extraWeapon5Unlocked = false;
        }
        else if (index == 9)                                  // ← הוספת זה כאן
        {
            extraWeapon6Unlocked = false;
        }

        if (weapons[index] != null)
            weapons[index].SetActive(false);
    }

    private void UseKnife()
    {
        Debug.Log("Used Knife");
    }

    // קורוטינה להחזרת חיי Pickup – פשוט ממתינה למשך pickupRespawnDelay ואז מחזירה את האובייקט לפעילות
    private IEnumerator RespawnPickupCoroutine(Transform pickupObject)
    {
        yield return new WaitForSeconds(pickupRespawnDelay);
        if (pickupObject != null)
        {
            pickupObject.gameObject.SetActive(true);
        }
    }

    // קורוטינה לאנימציית recoil ל־gun:
    // מבצעת מעבר חלק של 6 מעלות סביב ציר ה-Z ביחס לסיבוב הנוכחי, ואז מחזירה את האקדח למצבו.
    private IEnumerator AnimateGunRecoilRotation()
    {
        Quaternion originalRotation = gun.transform.localRotation;
        Quaternion targetRotation = originalRotation * Quaternion.Euler(0, 0, 6f);
        float localDuration = 0.11f; // משך כל שלב (לסיבוב ולחזרה)
        float t = 0f;
        while (t < localDuration)
        {
            t += Time.deltaTime;
            gun.transform.localRotation = Quaternion.Slerp(originalRotation, targetRotation, t / localDuration);
            yield return null;
        }
        gun.transform.localRotation = targetRotation;
        t = 0f;
        while (t < localDuration)
        {
            t += Time.deltaTime;
            gun.transform.localRotation = Quaternion.Slerp(targetRotation, originalRotation, t / localDuration);
            yield return null;
        }
        gun.transform.localRotation = originalRotation;
    }
} 
