using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

public class SpaceGun : MonoBehaviour
{
    public float bulletSpeed = 20f;
    public Transform firePoint;
    public GameObject bulletPrefab;
    public ParticleSystem shootingEffect;
    public GameObject[] objectsToEnable;

    [Header("UI")]
    public Slider heatSlider;
    public TextMeshProUGUI overheatText;
    public float sliderSmoothSpeed = 5f;
    public Image heatFillImage; // fill של הסליידר

    private float attackCooldown = 0.2f;
    private float nextTimeToFire = 0f;
    private int totalShotsFired = 0;
    private int enabledObjectsCount = 0;
    private bool resetInProgress = false;
    private Coroutine reverseDisableCoroutine = null;
    private bool isFiring = false;

    private float currentSliderValue = 0f;

    void Start()
    {
        if (heatSlider != null)
        {
            heatSlider.minValue = 0;
            heatSlider.maxValue = objectsToEnable.Length;
            heatSlider.value = 0;
            currentSliderValue = 0;
        }

        if (overheatText != null)
        {
            overheatText.gameObject.SetActive(true);
            overheatText.text = "";
        }

        if (heatFillImage != null)
        {
            heatFillImage.color = Color.green;
        }
    }

    void Update()
    {
        if (Input.GetMouseButton(0))
        {
            isFiring = true;

            if (Time.time >= nextTimeToFire && !resetInProgress)
            {
                nextTimeToFire = Time.time + attackCooldown;
                Shoot();
            }

            if (reverseDisableCoroutine != null)
            {
                StopCoroutine(reverseDisableCoroutine);
                reverseDisableCoroutine = null;
            }
        }
        else if (isFiring)
        {
            isFiring = false;

            if (!resetInProgress && enabledObjectsCount > 0)
            {
                reverseDisableCoroutine = StartCoroutine(DisableInReverse());
            }
        }

        if (heatSlider != null && !resetInProgress)
        {
            currentSliderValue = Mathf.Lerp(currentSliderValue, enabledObjectsCount, Time.deltaTime * sliderSmoothSpeed);
            heatSlider.value = currentSliderValue;
        }

        UpdateSliderColor();
    }

    void Shoot()
    {
        GameObject bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
        bullet.AddComponent<BulletMover>().speed = bulletSpeed;

        if (shootingEffect != null)
        {
            shootingEffect.Play();
        }

        totalShotsFired++;

        if (totalShotsFired % 3 == 0 && enabledObjectsCount < objectsToEnable.Length)
        {
            GameObject objToEnable = objectsToEnable[enabledObjectsCount];
            if (objToEnable != null)
            {
                objToEnable.SetActive(true);
            }

            enabledObjectsCount++;

            if (enabledObjectsCount == 12)
            {
                StartCoroutine(ShowOverheat());
                StartCoroutine(ResetAfterDelay());
            }
        }
    }

    IEnumerator ShowOverheat()
    {
        if (overheatText != null)
        {
            overheatText.text = "OVERHEAT";
            yield return new WaitForSeconds(5f);
            overheatText.text = "";
        }
    }

    IEnumerator ResetAfterDelay()
    {
        resetInProgress = true;

        // אפס את הסליידר מידית עד הסוף
        if (heatSlider != null)
        {
            heatSlider.value = heatSlider.maxValue;
            currentSliderValue = heatSlider.maxValue;
        }

        UpdateSliderColor();

        yield return new WaitForSeconds(5f);

        foreach (GameObject obj in objectsToEnable)
        {
            if (obj != null)
                obj.SetActive(false);
        }

        totalShotsFired = 0;
        enabledObjectsCount = 0;

        if (heatSlider != null)
        {
            heatSlider.value = 0;
            currentSliderValue = 0;
        }

        UpdateSliderColor();

        resetInProgress = false;
    }

    IEnumerator DisableInReverse()
    {
        while (enabledObjectsCount > 0)
        {
            enabledObjectsCount--;
            if (objectsToEnable[enabledObjectsCount] != null)
            {
                objectsToEnable[enabledObjectsCount].SetActive(false);
            }

            yield return new WaitForSeconds(1f);
        }

        totalShotsFired = 0;
    }

    void UpdateSliderColor()
    {
        if (heatFillImage != null && heatSlider != null)
        {
            float t = heatSlider.value / heatSlider.maxValue;

            if (t < 0.5f)
            {
                // ירוק לצהוב
                heatFillImage.color = Color.Lerp(Color.green, Color.yellow, t * 2f);
            }
            else
            {
                // צהוב לאדום
                heatFillImage.color = Color.Lerp(Color.yellow, Color.red, (t - 0.5f) * 2f);
            }
        }
    }
}

public class BulletMover : MonoBehaviour
{
    public float speed = 20f;

    void Update()
    {
        transform.Translate(Vector3.forward * speed * Time.deltaTime);
    }
}
