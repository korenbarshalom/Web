using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

public class SpaceGun : MonoBehaviour
{
    public float bulletSpeed = 20f;
    public Transform firePoint;
    public GameObject bulletPrefab;
    public ParticleSystem shootingEffect;
    public GameObject[] objectsToEnable;

    [Header("Weapon Overheat Animation")]
    public Transform weaponTransform;
    public float overheatMoveDistance = 0.5f;
    public float overheatRotationZ = 80f;
    public float overheatDuration = 5f;

    [Header("Overheat Particle")]
    public ParticleSystem overheatEffect;

    [Header("UI")]
    public Slider heatSlider;
    public TextMeshProUGUI overheatText;
    public float sliderSmoothSpeed = 10f;
    public float resetSmoothDuration = 0.5f;
    public Image heatFillImage;

    [Header("Heat Settings")]
    public int shotsPerHeatStage = 3; // כמה יריות דרושות כדי לעלות שלב אחד של חום

    private float attackCooldown = 0.2f;
    private float nextTimeToFire = 0f;
    private int totalShotsFired = 0;
    private int enabledObjectsCount = 0;
    private bool resetInProgress = false;
    private Coroutine reverseDisableCoroutine = null;
    private Coroutine overheatCoroutine = null;
    private float currentSliderValue = 0f;
    private float overheatStartTime = -1f;

    private Vector3 savedOrigPos;
    private Quaternion savedOrigRot;
    private bool hasSavedOverheatTransform = false;

    private float timeSinceLastShot = 0f;
    public float heatDecayDelay = 1f;

    void Start()
    {
        heatSlider.minValue = 0;
        heatSlider.maxValue = objectsToEnable.Length;
        heatSlider.value = 0;
        currentSliderValue = 0f;

        overheatText.gameObject.SetActive(true);
        overheatText.text = "";

        heatFillImage.color = Color.green;
    }

    void OnEnable()
    {
        if (resetInProgress && overheatStartTime > 0f)
        {
            float timePassed = Time.time - overheatStartTime;
            float remainingTime = overheatDuration - timePassed;

            if (remainingTime > 0f)
            {
                overheatCoroutine = StartCoroutine(ContinueOverheatFrom(timePassed));
            }
            else
            {
                StartCoroutine(FinishOverheatImmediately());
            }
        }
    }

    void Update()
    {
        timeSinceLastShot += Time.deltaTime;

        if (!resetInProgress && Input.GetMouseButton(0) && Time.time >= nextTimeToFire)
        {
            nextTimeToFire = Time.time + attackCooldown;
            Shoot();
            timeSinceLastShot = 0f;
        }

        if (!resetInProgress && timeSinceLastShot >= heatDecayDelay && enabledObjectsCount > 0)
        {
            if (reverseDisableCoroutine == null)
                reverseDisableCoroutine = StartCoroutine(DisableInReverse());
        }

        if (!resetInProgress)
        {
            currentSliderValue = Mathf.Lerp(currentSliderValue, enabledObjectsCount, Time.deltaTime * sliderSmoothSpeed);
            heatSlider.value = currentSliderValue;
        }

        UpdateSliderColor();
    }

    void Shoot()
    {
        if (bulletPrefab != null && firePoint != null)
        {
            var bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
            bullet.AddComponent<BulletMover>().speed = bulletSpeed;
        }
        shootingEffect?.Play();

        totalShotsFired++;

        if (totalShotsFired % shotsPerHeatStage == 0 && enabledObjectsCount < objectsToEnable.Length)
        {
            objectsToEnable[enabledObjectsCount]?.SetActive(true);
            enabledObjectsCount++;

            if (enabledObjectsCount == objectsToEnable.Length)
            {
                if (overheatCoroutine == null)
                {
                    overheatCoroutine = StartCoroutine(ShowOverheatAndAnimate());
                }
            }
        }

        StopReverseCoroutine();
    }

    IEnumerator ShowOverheatAndAnimate()
    {
        resetInProgress = true;
        overheatStartTime = Time.time;

        overheatText.text = "OVERHEAT";
        if (overheatEffect != null) overheatEffect.Play();

        heatSlider.value = heatSlider.maxValue;
        currentSliderValue = heatSlider.maxValue;
        UpdateSliderColor();

        if (weaponTransform != null && !hasSavedOverheatTransform)
        {
            savedOrigPos = weaponTransform.localPosition;
            savedOrigRot = weaponTransform.localRotation;
            hasSavedOverheatTransform = true;
        }

        StartCoroutine(WeaponOverheatAnimation());

        yield return new WaitForSeconds(overheatDuration);

        yield return StartCoroutine(FinishOverheatReset());
    }

    IEnumerator ContinueOverheatFrom(float elapsedTime)
    {
        overheatText.text = "OVERHEAT";
        if (overheatEffect != null && !overheatEffect.isPlaying) overheatEffect.Play();

        StartCoroutine(WeaponOverheatAnimation(elapsedTime));

        yield return new WaitForSeconds(overheatDuration - elapsedTime);

        yield return StartCoroutine(FinishOverheatReset());
    }

    IEnumerator FinishOverheatReset()
    {
        overheatText.text = "";

        foreach (var obj in objectsToEnable)
            obj?.SetActive(false);

        totalShotsFired = 0;
        enabledObjectsCount = 0;

        float elapsed = 0f;
        float startVal = currentSliderValue;
        while (elapsed < resetSmoothDuration)
        {
            elapsed += Time.deltaTime;
            currentSliderValue = Mathf.Lerp(startVal, 0f, elapsed / resetSmoothDuration);
            heatSlider.value = currentSliderValue;
            UpdateSliderColor();
            yield return null;
        }

        currentSliderValue = 0f;
        heatSlider.value = 0f;
        UpdateSliderColor();

        resetInProgress = false;
        overheatCoroutine = null;
        overheatStartTime = -1f;
        hasSavedOverheatTransform = false;
    }

    IEnumerator FinishOverheatImmediately()
    {
        yield return StartCoroutine(FinishOverheatReset());
    }

    IEnumerator WeaponOverheatAnimation(float startTime = 0f)
    {
        if (weaponTransform == null || !hasSavedOverheatTransform) yield break;

        Vector3 origPos = savedOrigPos;
        Quaternion origRot = savedOrigRot;
        Vector3 targetPos = origPos + Vector3.back * overheatMoveDistance;
        Quaternion targetRot = origRot * Quaternion.Euler(0f, 0f, overheatRotationZ);

        float halfTime = overheatDuration / 2f;
        float elapsed = startTime;

        while (elapsed < overheatDuration)
        {
            elapsed += Time.deltaTime;

            if (elapsed <= halfTime)
            {
                float f = elapsed / halfTime;
                weaponTransform.localPosition = Vector3.Lerp(origPos, targetPos, f);
                weaponTransform.localRotation = Quaternion.Slerp(origRot, targetRot, f);
            }
            else
            {
                float f = (elapsed - halfTime) / halfTime;
                weaponTransform.localPosition = Vector3.Lerp(targetPos, origPos, f);
                weaponTransform.localRotation = Quaternion.Slerp(targetRot, origRot, f);
            }

            yield return null;
        }

        weaponTransform.localPosition = origPos;
        weaponTransform.localRotation = origRot;
    }

    IEnumerator DisableInReverse()
    {
        while (enabledObjectsCount > 0)
        {
            enabledObjectsCount--;
            objectsToEnable[enabledObjectsCount]?.SetActive(false);
            yield return new WaitForSeconds(0.5f);
        }
        totalShotsFired = 0;
        reverseDisableCoroutine = null;
    }

    void UpdateSliderColor()
    {
        float t = heatSlider.value / heatSlider.maxValue;
        if (t < 0.5f)
            heatFillImage.color = Color.Lerp(Color.green, Color.yellow, t * 2f);
        else
            heatFillImage.color = Color.Lerp(Color.yellow, Color.red, (t - 0.5f) * 2f);
    }

    void StopReverseCoroutine()
    {
        if (reverseDisableCoroutine != null)
        {
            StopCoroutine(reverseDisableCoroutine);
            reverseDisableCoroutine = null;
        }
    }
}

public class BulletMover : MonoBehaviour
{
    public float speed = 20f;
    void Update()
    {
        transform.Translate(Vector3.forward * speed * Time.deltaTime);
    }
}
