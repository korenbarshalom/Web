using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

public class SpaceGun : MonoBehaviour
{
    public float bulletSpeed = 20f;
    public Transform firePoint;
    public GameObject bulletPrefab;
    public ParticleSystem shootingEffect;
    public GameObject[] objectsToEnable;

    [Header("UI")]
    public Slider heatSlider;
    public TextMeshProUGUI overheatText;
    [Tooltip("בכמה מהר הסליידר יתקרב לערך המטרה")]
    public float sliderSmoothSpeed = 10f;             // הוגדל ל־10
    [Tooltip("כמה שניות יארך איפוס הסליידר בסוף")]
    public float resetSmoothDuration = 0.5f;          // חצי שניה לאיפוס חלק

    public Image heatFillImage;

    private float attackCooldown = 0.2f;
    private float nextTimeToFire = 0f;
    private int totalShotsFired = 0;
    private int enabledObjectsCount = 0;
    private bool resetInProgress = false;
    private Coroutine reverseDisableCoroutine = null;
    private bool isFiring = false;

    private float currentSliderValue = 0f;

    void Start()
    {
        heatSlider.minValue = 0;
        heatSlider.maxValue = objectsToEnable.Length;
        heatSlider.value = 0;
        currentSliderValue = 0;

        overheatText.gameObject.SetActive(true);
        overheatText.text = "";

        heatFillImage.color = Color.green;
    }

    void Update()
    {
        // לחיצה בודדת
        if (Input.GetMouseButtonDown(0) && !resetInProgress)
        {
            isFiring = true;
            StopReverseCoroutine();
            nextTimeToFire = Time.time + attackCooldown;
            Shoot();
        }
        // החזקת כפתור
        else if (Input.GetMouseButton(0) && Time.time >= nextTimeToFire && !resetInProgress)
        {
            isFiring = true;
            StopReverseCoroutine();
            nextTimeToFire = Time.time + attackCooldown;
            Shoot();
        }
        // עצירת ירי
        else if (isFiring && !Input.GetMouseButton(0))
        {
            isFiring = false;
            if (!resetInProgress && enabledObjectsCount > 0)
                reverseDisableCoroutine = StartCoroutine(DisableInReverse());
        }

        // עדכון חלק של הסליידר
        if (!resetInProgress)
        {
            currentSliderValue = Mathf.Lerp(currentSliderValue, enabledObjectsCount, Time.deltaTime * sliderSmoothSpeed);
            heatSlider.value = currentSliderValue;
        }

        UpdateSliderColor();
    }

    void Shoot()
    {
        var bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
        bullet.AddComponent<BulletMover>().speed = bulletSpeed;
        shootingEffect?.Play();

        totalShotsFired++;

        if (totalShotsFired % 3 == 0 && enabledObjectsCount < objectsToEnable.Length)
        {
            objectsToEnable[enabledObjectsCount]?.SetActive(true);
            enabledObjectsCount++;

            if (enabledObjectsCount == objectsToEnable.Length)
            {
                StartCoroutine(ShowOverheat());
                StartCoroutine(ResetAfterDelay());
            }
        }
    }

    IEnumerator ShowOverheat()
    {
        overheatText.text = "OVERHEAT";
        yield return new WaitForSeconds(5f);
        overheatText.text = "";
    }

    IEnumerator ResetAfterDelay()
    {
        resetInProgress = true;

        // למקסימום מיידית כדי להציג OVERHEAT במלואו
        heatSlider.value = heatSlider.maxValue;
        currentSliderValue = heatSlider.maxValue;
        UpdateSliderColor();

        yield return new WaitForSeconds(5f);

        // כיבוי כל האובייקטים
        foreach (var obj in objectsToEnable)
            obj?.SetActive(false);

        totalShotsFired = enabledObjectsCount = 0;

        // איפוס חלק של הסליידר
        float elapsed = 0f;
        float startVal = currentSliderValue;
        while (elapsed < resetSmoothDuration)
        {
            elapsed += Time.deltaTime;
            currentSliderValue = Mathf.Lerp(startVal, 0f, elapsed / resetSmoothDuration);
            heatSlider.value = currentSliderValue;
            UpdateSliderColor();
            yield return null;
        }

        // וודא איפוס מלא
        currentSliderValue = 0f;
        heatSlider.value = 0f;
        UpdateSliderColor();

        resetInProgress = false;
    }

    IEnumerator DisableInReverse()
    {
        while (enabledObjectsCount > 0)
        {
            enabledObjectsCount--;
            objectsToEnable[enabledObjectsCount]?.SetActive(false);
            yield return new WaitForSeconds(1f);
        }
        totalShotsFired = 0;
    }

    void UpdateSliderColor()
    {
        float t = heatSlider.value / heatSlider.maxValue;
        if (t < 0.5f)
            heatFillImage.color = Color.Lerp(Color.green, Color.yellow, t * 2f);
        else
            heatFillImage.color = Color.Lerp(Color.yellow, Color.red, (t - 0.5f) * 2f);
    }

    void StopReverseCoroutine()
    {
        if (reverseDisableCoroutine != null)
        {
            StopCoroutine(reverseDisableCoroutine);
            reverseDisableCoroutine = null;
        }
    }
}

public class BulletMover : MonoBehaviour
{
    public float speed = 20f;
    void Update()
    {
        transform.Translate(Vector3.forward * speed * Time.deltaTime);
    }
}
