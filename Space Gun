using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

public class SpaceGun : MonoBehaviour
{
    public float bulletSpeed = 20f;
    public Transform firePoint;
    public GameObject bulletPrefab;
    public ParticleSystem shootingEffect;
    public GameObject[] objectsToEnable;

    [Header("Weapon Overheat Animation")]
    public Transform weaponTransform;
    public float overheatMoveDistance = 0.5f;
    public float overheatRotationZ = 80f;
    public float overheatDuration = 5f;

    [Header("UI")]
    public Slider heatSlider;
    public TextMeshProUGUI overheatText;
    public float sliderSmoothSpeed = 10f;
    public float resetSmoothDuration = 0.5f;
    public Image heatFillImage;

    private float attackCooldown = 0.2f;
    private float nextTimeToFire = 0f;
    private int totalShotsFired = 0;
    private int enabledObjectsCount = 0;
    private bool resetInProgress = false;
    private Coroutine reverseDisableCoroutine = null;
    private bool isFiring = false;
    private float currentSliderValue = 0f;

    void Start()
    {
        heatSlider.minValue = 0;
        heatSlider.maxValue = objectsToEnable.Length;
        heatSlider.value = 0;
        currentSliderValue = 0f;

        overheatText.gameObject.SetActive(true);
        overheatText.text = "";

        heatFillImage.color = Color.green;
    }

    void Update()
    {
        if (!resetInProgress && Input.GetMouseButtonDown(0))
        {
            isFiring = true;
            StopReverseCoroutine();
            nextTimeToFire = Time.time + attackCooldown;
            Shoot();
        }
        else if (!resetInProgress && Input.GetMouseButton(0) && Time.time >= nextTimeToFire)
        {
            isFiring = true;
            StopReverseCoroutine();
            nextTimeToFire = Time.time + attackCooldown;
            Shoot();
        }
        else if (isFiring && !Input.GetMouseButton(0))
        {
            isFiring = false;
            if (!resetInProgress && enabledObjectsCount > 0)
                reverseDisableCoroutine = StartCoroutine(DisableInReverse());
        }

        if (!resetInProgress)
        {
            currentSliderValue = Mathf.Lerp(currentSliderValue, enabledObjectsCount, Time.deltaTime * sliderSmoothSpeed);
            heatSlider.value = currentSliderValue;
        }

        UpdateSliderColor();
    }

    void Shoot()
    {
        if (bulletPrefab != null && firePoint != null)
        {
            var bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
            bullet.AddComponent<BulletMover>().speed = bulletSpeed;
        }
        shootingEffect?.Play();

        totalShotsFired++;

        if (totalShotsFired % 3 == 0 && enabledObjectsCount < objectsToEnable.Length)
        {
            objectsToEnable[enabledObjectsCount]?.SetActive(true);
            enabledObjectsCount++;

            if (enabledObjectsCount == objectsToEnable.Length)
            {
                StartCoroutine(ShowOverheatAndAnimate());
            }
        }
    }

    IEnumerator ShowOverheatAndAnimate()
    {
        // תחילת OVERHEAT
        resetInProgress = true;
        overheatText.text = "OVERHEAT";

        // קפיצה מיידית של הסליידר לערך המקסימלי
        heatSlider.value = heatSlider.maxValue;
        currentSliderValue = heatSlider.maxValue;
        UpdateSliderColor();

        // התחלת אנימציית הנשק לאורך כל ה‑OVERHEAT
        StartCoroutine(WeaponOverheatAnimation());

        // ממתינים לסיום ה‑OVERHEAT
        yield return new WaitForSeconds(overheatDuration);
        overheatText.text = "";

        // כיבוי אובייקטים
        foreach (var obj in objectsToEnable)
            obj?.SetActive(false);

        totalShotsFired = 0;
        enabledObjectsCount = 0;

        // איפוס חלק של הסליידר בצורה חלקה
        float elapsed = 0f;
        float startVal = currentSliderValue;
        while (elapsed < resetSmoothDuration)
        {
            elapsed += Time.deltaTime;
            currentSliderValue = Mathf.Lerp(startVal, 0f, elapsed / resetSmoothDuration);
            heatSlider.value = currentSliderValue;
            UpdateSliderColor();
            yield return null;
        }
        currentSliderValue = 0f;
        heatSlider.value = 0f;
        UpdateSliderColor();

        // סוף מצב OVERHEAT
        resetInProgress = false;
    }

    IEnumerator WeaponOverheatAnimation()
    {
        if (weaponTransform == null) yield break;

        Vector3 origPos = weaponTransform.localPosition;
        Quaternion origRot = weaponTransform.localRotation;
        Vector3 targetPos = origPos + Vector3.back * overheatMoveDistance;
        Quaternion targetRot = origRot * Quaternion.Euler(0f, 0f, overheatRotationZ);

        float halfTime = overheatDuration / 2f;
        float elapsed = 0f;

        while (elapsed < overheatDuration)
        {
            elapsed += Time.deltaTime;
            if (elapsed <= halfTime)
            {
                float f = elapsed / halfTime;
                weaponTransform.localPosition = Vector3.Lerp(origPos, targetPos, f);
                weaponTransform.localRotation = Quaternion.Slerp(origRot, targetRot, f);
            }
            else
            {
                float f = (elapsed - halfTime) / halfTime;
                weaponTransform.localPosition = Vector3.Lerp(targetPos, origPos, f);
                weaponTransform.localRotation = Quaternion.Slerp(targetRot, origRot, f);
            }
            yield return null;
        }

        weaponTransform.localPosition = origPos;
        weaponTransform.localRotation = origRot;
    }

    IEnumerator DisableInReverse()
    {
        while (enabledObjectsCount > 0)
        {
            enabledObjectsCount--;
            objectsToEnable[enabledObjectsCount]?.SetActive(false);
            yield return new WaitForSeconds(1f);
        }
        totalShotsFired = 0;
    }

    void UpdateSliderColor()
    {
        float t = heatSlider.value / heatSlider.maxValue;
        if (t < 0.5f)
            heatFillImage.color = Color.Lerp(Color.green, Color.yellow, t * 2f);
        else
            heatFillImage.color = Color.Lerp(Color.yellow, Color.red, (t - 0.5f) * 2f);
    }

    void StopReverseCoroutine()
    {
        if (reverseDisableCoroutine != null)
        {
            StopCoroutine(reverseDisableCoroutine);
            reverseDisableCoroutine = null;
        }
    }
}

public class BulletMover : MonoBehaviour
{
    public float speed = 20f;
    void Update()
    {
        transform.Translate(Vector3.forward * speed * Time.deltaTime);
    }
}
