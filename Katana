using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using UnityEngine.VFX;  // חובה לייבא את המודול של VFX

public class PlayerController : MonoBehaviour
{
    [Header("References")]
    public Animator animator;         // רכיב האנימציה של הדמות
    public AudioSource audioSource;   // מקור הקול לאפקטים
    public Camera cam;                // המצלמה לקביעת כיוון ההתקפה

    [Header("Enemy Damage Particle")]
    public GameObject enemyDamageParticle; // אפקט Particle שמופעל בעת פגיעה באויב

    [Header("Attack 4 Particle")]
    public GameObject attack4Particle; // אפקט VFX/Particle שמופעל פעם אחת כאשר Attack 4 מופעל

    // ---------- //
    // ANIMATIONS //
    // ---------- //
    public const string IDLE = "Idle";
    public const string WALK = "Walk";
    public const string ATTACK1 = "Attack 1";
    public const string ATTACK2 = "Attack 2";
    public const string ATTACK3 = "Attack 3"; // Attack 3
    public const string ATTACK4 = "Attack 4"; // Attack 4

    string currentAnimationState;

    public void ChangeAnimationState(string newState)
    {
        currentAnimationState = newState;
        animator.CrossFadeInFixedTime(currentAnimationState, 0.2f);
    }

    // ------------------- //
    // ATTACKING BEHAVIOUR //
    // ------------------- //
    [Header("Attacking")]
    public float attackDistance = 3f;
    public int attackDamage = 50;          // נזק בסיסי של 50 (ל־Attack3 נשתמש ב־100)
    public LayerMask attackLayer;          // שכבת ה־Layer בה מתבצעת בדיקת Raycast

    public GameObject hitEffect;           // אפקט Particle שמופעל במיקום הפגיעה (עם עיכוב)
    public AudioClip swordSwing;
    public AudioClip hitSound;

    // Cooldowns נפרדים:
    private bool canAttackLeftRight = true;  // עבור Attack1, Attack2
    private bool canAttack3 = true;          // עבור Attack3
    private bool canAttack4 = true;          // עבור Attack4

    // עבור לחיצה לסירוגין על העכבר השמאלי:
    private bool useAttack1 = true;
    private bool flipHitEffectRotation = false;

    // Attack1 – AttackLeft (50 damage)
    public void AttackLeft()
    {
        if (!canAttackLeftRight)
            return;

        canAttackLeftRight = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK1);
        AttackRaycast(attackDamage);
        StartCoroutine(AttackCooldownLeftRight(0.5f));
    }

    // Attack2 – AttackRight (50 damage)
    public void AttackRight()
    {
        if (!canAttackLeftRight)
            return;

        canAttackLeftRight = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK2);
        AttackRaycast(attackDamage);
        StartCoroutine(AttackCooldownLeftRight(0.5f));
    }

    // Attack3 – 100 damage, עם cooldown של שניה בלבד
    public void Attack3()
    {
        if (!canAttack3)
            return;

        canAttack3 = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK3);
        AttackRaycast(100); // Attack3 מוריד 100 נזק
        StartCoroutine(AttackCooldown3(1f)); // cooldown של 1 שניה עבור Attack3 בלבד
    }

    // Attack4 – 50 damage; כאשר Attack4 מופעל, מופעל גם אפקט VFX פעם אחת
    public void Attack4()
    {
        if (!canAttack4)
            return;

        canAttack4 = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK4);

        // יצירת מופע של אפקט ה־attack4Particle במיקום השחקן
        if (attack4Particle != null)
        {
            GameObject effect = Instantiate(attack4Particle, transform.position, Quaternion.identity);
            effect.SetActive(true);

            // נסיון לקבל את רכיב ה-VisualEffect ולהפעילו
            VisualEffect vfx = effect.GetComponent<VisualEffect>();
            if (vfx != null)
            {
                vfx.Reinit();  // מאתחל את ה-VFX מחדש
                vfx.Play();
            }
            else
            {
                // אם אין VisualEffect, ננסה לקבל ParticleSystem ולהפעילו
                ParticleSystem ps = effect.GetComponent<ParticleSystem>();
                if (ps != null)
                {
                    ps.Play();
                }
            }
            Destroy(effect, 5f);
        }

        AttackRaycast(attackDamage);
        StartCoroutine(AttackCooldown4(0.5f));
    }

    // מתודה המבצעת Raycast ובודקת אם נפגע אובייקט; damage - ערך הנזק להעברה
    void AttackRaycast(int damage)
    {
        bool hitEnemy = false;
        if (Physics.Raycast(cam.transform.position, cam.transform.forward, out RaycastHit hit, attackDistance, attackLayer))
        {
            float distanceToHit = Vector3.Distance(cam.transform.position, hit.point);
            if (distanceToHit <= 5f)
            {
                StartCoroutine(DelayedHitTarget(hit.point, hit.normal));

                // שימוש ב-SimpleEnemyHealth1
                SimpleEnemyHealth1 enemyHealth = hit.collider.GetComponent<SimpleEnemyHealth1>();
                // נבדוק אם הבריאות גדולה מ-0
                if (enemyHealth != null && enemyHealth.health > 0)
                {
                    StartCoroutine(DamageEnemy(hit.collider.gameObject, hit.point, damage));
                    if (hit.collider.gameObject.layer == LayerMask.NameToLayer("Enemy"))
                    {
                        hitEnemy = true;
                    }
                }
            }
        }
        if (!hitEnemy)
        {
            StartCoroutine(PlaySwordSwingAfterDelay(0.1f));
        }
    }

    // מנגן את סאונד ה־sword swing לאחר עיכוב קצר, אם לא נפגע אויב
    private IEnumerator PlaySwordSwingAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        audioSource.pitch = Random.Range(0.9f, 1.1f);
        audioSource.PlayOneShot(swordSwing);
    }

    // קורוטינה להמתנה לפני הפעלת אפקט הפגיעה (hitEffect)
    private IEnumerator DelayedHitTarget(Vector3 pos, Vector3 normal)
    {
        yield return new WaitForSeconds(0.5f);
        HitTarget(pos, normal);
    }

    // הפעלת אפקט ה־hitEffect במיקום הפגיעה, והשמדתו 5 שניות לאחר הופעתו
    void HitTarget(Vector3 pos, Vector3 normal)
    {
        audioSource.pitch = 1f;
        audioSource.PlayOneShot(hitSound);

        Quaternion rotation = Quaternion.LookRotation(normal);
        if (flipHitEffectRotation)
        {
            rotation = rotation * Quaternion.Euler(0, 180, 0);
        }

        GameObject effect = Instantiate(hitEffect, pos, rotation);
        // שינוי: השמדת האפקט 5 שניות לאחר יצירתו
        Destroy(effect, 5f);

        flipHitEffectRotation = !flipHitEffectRotation;
    }

    // cooldown עבור Attack1/Attack2
    private IEnumerator AttackCooldownLeftRight(float delay)
    {
        yield return new WaitForSeconds(delay);
        canAttackLeftRight = true;
    }

    // cooldown עבור Attack3 בלבד
    private IEnumerator AttackCooldown3(float delay)
    {
        yield return new WaitForSeconds(delay);
        canAttack3 = true;
    }

    // cooldown עבור Attack4
    private IEnumerator AttackCooldown4(float delay)
    {
        yield return new WaitForSeconds(delay);
        canAttack4 = true;
    }

    // קורוטינה שמורידה חיים מהאויב ומפעילה את אפקט הנזק במיקום הפגיעה
    private IEnumerator DamageEnemy(GameObject enemyObj, Vector3 hitPoint, int damage)
    {
        yield return new WaitForSeconds(0.1f);
        SimpleEnemyHealth1 enemyHealth = enemyObj.GetComponent<SimpleEnemyHealth1>();
        // נבדוק אם הבריאות גדולה מ-0
        if (enemyHealth != null && enemyHealth.health > 0)
        {
            enemyHealth.TakeDamage(damage);
            if (enemyDamageParticle != null)
            {
                GameObject dmgEffect = Instantiate(enemyDamageParticle, hitPoint, Quaternion.identity);
                Destroy(dmgEffect, 5f);
            }
        }
    }

    // --- מתודה זו מתבצעת כאשר הנשק מופעל מחדש (למשל בעת מעבר נשקים) --- 
    private void OnEnable()
    {
        // איפוס מצבי הקולדאון
        canAttackLeftRight = true;
        canAttack3 = true;
        canAttack4 = true;
        // איפוס מצב האנימציה ל-IDLE והבטחה שהאנימטור מאופס
        ChangeAnimationState(IDLE);
        animator.Rebind();
        animator.Update(0f);
    }

    void Update()
    {
        // לחיצה על העכבר השמאלי – לסירוגין Attack1 ו־Attack2
        if (Input.GetMouseButtonDown(0))
        {
            if (useAttack1)
            {
                AttackLeft();
            }
            else
            {
                AttackRight();
            }
            useAttack1 = !useAttack1;
        }

        // לחיצה על העכבר הימני מפעילה את Attack3
        if (Input.GetMouseButtonDown(1))
        {
            Attack3();
        }

        // לחיצה על מקש C מפעילה את Attack4
        if (Input.GetKeyDown(KeyCode.C))
        {
            Attack4();
        }

        AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
        if ((stateInfo.IsName(ATTACK3) || stateInfo.IsName(ATTACK4)) &&
            stateInfo.normalizedTime >= 1f &&
            !animator.IsInTransition(0))
        {
            ChangeAnimationState(IDLE);
        }

        if (!stateInfo.IsName(ATTACK1) &&
            !stateInfo.IsName(ATTACK2) &&
            !stateInfo.IsName(ATTACK3) &&
            !stateInfo.IsName(ATTACK4))
        {
            bool isMoving = Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.A) ||
                           Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.D);
            animator.SetBool(WALK, isMoving);
        }
    }
}
