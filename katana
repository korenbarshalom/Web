using System.Collections;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [Header("References")]
    public Animator animator;         // Animator component for the character
    public AudioSource audioSource;   // Audio source for sound effects
    public Camera cam;                // Camera used to determine attack direction

    [Header("Player Reference")]
    public GameObject player;         // שדה להזנת השחקן

    [Header("Enemy Reference")]
    public GameObject enemy;          // שדה להזנת האויב (ניתן לגרור את האובייקט מה־Inspector)

    // ---------- //
    // ANIMATIONS //
    // ---------- //
    public const string IDLE = "Idle";
    public const string WALK = "Walk";
    public const string ATTACK1 = "Attack 1";
    public const string ATTACK2 = "Attack 2";

    string currentAnimationState;

    public void ChangeAnimationState(string newState)
    {
        currentAnimationState = newState;
        animator.CrossFadeInFixedTime(currentAnimationState, 0.2f);
    }

    // ------------------- //
    // ATTACKING BEHAVIOUR //
    // ------------------- //
    [Header("Attacking")]
    public float attackDistance = 3f;
    public int attackDamage = 50;          // כל התקפה מורידה 50 נקודות חיים
    public LayerMask attackLayer;

    public GameObject hitEffect;
    public AudioClip swordSwing;
    public AudioClip hitSound;

    private bool canAttack = true;

    // התקפה בלחיצה על כפתור העכבר השמאלי – Attack 1
    public void AttackLeft()
    {
        if (!canAttack)
            return;

        canAttack = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK1);
        StartCoroutine(PlaySoundWhenAnimationPlays(ATTACK1));
        AttackRaycast();
        TryDamageEnemy();
        StartCoroutine(AttackCooldown());
    }

    // התקפה בלחיצה על כפתור העכבר הימני – Attack 2
    public void AttackRight()
    {
        if (!canAttack)
            return;

        canAttack = false;
        animator.SetBool(WALK, false);
        ChangeAnimationState(ATTACK2);
        StartCoroutine(PlaySoundWhenAnimationPlays(ATTACK2));
        AttackRaycast();
        TryDamageEnemy();
        StartCoroutine(AttackCooldown());
    }

    // קורוטינה שממתינה עד שהאנימציה הרצויה מופעלת ואז מנגנת את סאונד החרב
    private IEnumerator PlaySoundWhenAnimationPlays(string attackAnimation)
    {
        while (!animator.GetCurrentAnimatorStateInfo(0).IsName(attackAnimation))
        {
            yield return null;
        }
        audioSource.pitch = Random.Range(0.9f, 1.1f);
        audioSource.PlayOneShot(swordSwing);
    }

    void AttackRaycast()
    {
        if (Physics.Raycast(cam.transform.position, cam.transform.forward, out RaycastHit hit, attackDistance, attackLayer))
        {
            StartCoroutine(DelayedHitTarget(hit.point));
        }
    }

    private IEnumerator DelayedHitTarget(Vector3 pos)
    {
        yield return new WaitForSeconds(0.5f);
        HitTarget(pos);
    }

    void HitTarget(Vector3 pos)
    {
        audioSource.pitch = 1f;
        audioSource.PlayOneShot(hitSound);

        GameObject effect = Instantiate(hitEffect, pos, Quaternion.identity);
        Destroy(effect, 20f);
    }

    // קורוטינה שמאפשרת התקפה חדשה רק לאחר חצי שניה
    private IEnumerator AttackCooldown()
    {
        yield return new WaitForSeconds(0.5f);
        canAttack = true;
    }

    // בודקת אם האויב נמצא במרחק 5 מטר מהשחקן ומוודאת שהאויב לא מת
    private void TryDamageEnemy()
    {
        GameObject enemyObj = enemy != null ? enemy : GameObject.FindGameObjectWithTag("enemy");
        if (enemyObj != null)
        {
            SimpleEnemyHealth enemyHealth = enemyObj.GetComponent<SimpleEnemyHealth>();
            // אם האויב קיים ועדיין חי
            if (enemyHealth != null && !enemyHealth.isDead)
            {
                Vector3 playerPos = (player != null) ? player.transform.position : transform.position;
                float distance = Vector3.Distance(playerPos, enemyObj.transform.position);
                if (distance <= 7f)
                {
                    StartCoroutine(DamageEnemy(enemyObj));
                }
            }
        }
    }

    // קורוטינה שממתינה חצי שניה ואז מורידה 50 נקודות חיים מהאויב דרך SimpleEnemyHealth
    private IEnumerator DamageEnemy(GameObject enemyObj)
    {
        yield return new WaitForSeconds(0.5f);
        SimpleEnemyHealth enemyHealth = enemyObj.GetComponent<SimpleEnemyHealth>();
        if (enemyHealth != null && !enemyHealth.isDead)
        {
            enemyHealth.TakeDamage(attackDamage);
        }
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            AttackLeft();
        }
        if (Input.GetMouseButtonDown(1))
        {
            AttackRight();
        }

        if (!animator.GetCurrentAnimatorStateInfo(0).IsName(ATTACK1) &&
            !animator.GetCurrentAnimatorStateInfo(0).IsName(ATTACK2))
        {
            bool isMoving = Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.A) ||
                            Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.D);
            animator.SetBool(WALK, isMoving);
        }
    }
}
