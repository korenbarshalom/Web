using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class CrossBow : MonoBehaviour
{
    public float bobDistance = 0.3f;
    public float backwardDuration = 0.4f;
    public float forwardDuration = 0.15f;

    public GameObject arrow;
    public GameObject hitEffectPrefab;

    public float minArrowSpeed = 20f;
    public float maxArrowSpeed = 100f;
    public float chargeTime = 3f;

    public LayerMask enemyLayer;
    public LayerMask hitLayers;

    public Slider chargeSlider;
    public Image chargeFillImage; // ✅ תמונת ה-Fill לשינוי צבע

    private Vector3 initialLocalPosition;
    private Vector3 stretchedPosition;
    private Coroutine moveCoroutine;
    private Coroutine autoReturnCoroutine;
    private Coroutine sliderResetCoroutine;

    private bool isStretching = false;
    private bool isReturning = false;
    private bool arrowReleased = false;
    private bool arrowFlying = false;
    private float holdTimer = 0f;
    private bool isHolding = false;

    private Vector3 arrowInitialLocalPos;
    private Quaternion arrowInitialLocalRot;

    void Start()
    {
        initialLocalPosition = transform.localPosition;
        stretchedPosition = initialLocalPosition - Vector3.up * bobDistance;

        if (arrow != null)
        {
            arrowInitialLocalPos = arrow.transform.localPosition;
            arrowInitialLocalRot = arrow.transform.localRotation;
        }

        if (chargeSlider != null)
        {
            chargeSlider.minValue = 0f;
            chargeSlider.maxValue = 1f;
            chargeSlider.value = 0f;
            UpdateChargeSliderColor(0f); // התחלה בצבע ירוק
        }
    }

    void Update()
    {
        bool arrowReady =
            arrow != null &&
            !arrowReleased &&
            !arrowFlying &&
            arrow.transform.parent == transform;

        if (Input.GetMouseButtonDown(1))
        {
            if (arrowReady && !isStretching && !isReturning)
            {
                moveCoroutine = StartCoroutine(StretchRope());
                isHolding = true;
                holdTimer = 0f;
            }
        }

        if (Input.GetMouseButton(1) && isHolding)
        {
            holdTimer += Time.deltaTime;

            float chargeRatio = Mathf.Clamp01(holdTimer / chargeTime);

            if (chargeSlider != null)
            {
                chargeSlider.value = chargeRatio;
                UpdateChargeSliderColor(chargeRatio); // ✅ עדכון צבע לפי ערך
            }

            if (holdTimer >= chargeTime && !arrowReleased)
            {
                isHolding = false;
                StopCoroutine(moveCoroutine);
                isStretching = false;
                StartCoroutine(ReturnRope(transform.localPosition));
            }
        }

        if (Input.GetMouseButtonUp(1))
        {
            if (isHolding)
            {
                isHolding = false;

                if (sliderResetCoroutine != null)
                    StopCoroutine(sliderResetCoroutine);

                sliderResetCoroutine = StartCoroutine(SmoothResetSlider(0.15f));

                if (isStretching)
                {
                    StopCoroutine(moveCoroutine);
                    isStretching = false;
                    StartCoroutine(ReturnRope(transform.localPosition));
                }
                else if (!isReturning && transform.localPosition != initialLocalPosition)
                {
                    StartCoroutine(ReturnRope(transform.localPosition));
                }
            }
        }

        if (arrowFlying && arrow != null)
        {
            float arrowSpeed = CalculateArrowSpeed();
            Vector3 moveDirection = -arrow.transform.up;
            Vector3 moveStep = moveDirection * arrowSpeed * Time.deltaTime;

            if (Physics.Raycast(arrow.transform.position, moveDirection, out RaycastHit hit, moveStep.magnitude + 0.1f, enemyLayer))
            {
                SimpleEnemyHealth1 health = hit.collider.GetComponent<SimpleEnemyHealth1>();
                if (health == null && hit.collider.transform.parent != null)
                    health = hit.collider.transform.parent.GetComponent<SimpleEnemyHealth1>();

                if (health != null)
                {
                    if (hit.collider.CompareTag("Head"))
                        health.TakeDamage(150);
                    else
                        health.TakeDamage(50);
                }

                SpawnHitEffect(hit.point, hit.normal);
                StopAutoReturn();
                ResetArrow();
            }
            else if (Physics.Raycast(arrow.transform.position, moveDirection, out RaycastHit hit2, moveStep.magnitude + 0.1f, hitLayers))
            {
                SpawnHitEffect(hit2.point, hit2.normal);
                StopAutoReturn();
                ResetArrow();
            }
            else
            {
                arrow.transform.position += moveStep;
            }
        }
    }

    void SpawnHitEffect(Vector3 position, Vector3 normal)
    {
        if (hitEffectPrefab != null)
        {
            Instantiate(hitEffectPrefab, position, Quaternion.LookRotation(normal));
        }
    }

    float CalculateArrowSpeed()
    {
        float chargeRatio = Mathf.Clamp01(holdTimer / chargeTime);
        return minArrowSpeed + (maxArrowSpeed - minArrowSpeed) * chargeRatio;
    }

    IEnumerator SmoothResetSlider(float duration)
    {
        if (chargeSlider == null) yield break;

        float startValue = chargeSlider.value;
        float elapsed = 0f;

        while (elapsed < duration)
        {
            float t = elapsed / duration;
            float current = Mathf.Lerp(startValue, 0f, t);
            chargeSlider.value = current;
            UpdateChargeSliderColor(current);
            elapsed += Time.deltaTime;
            yield return null;
        }

        chargeSlider.value = 0f;
        UpdateChargeSliderColor(0f);
    }

    void UpdateChargeSliderColor(float value)
    {
        if (chargeFillImage == null) return;

        if (value < 0.4f)
            chargeFillImage.color = Color.green;
        else if (value < 0.8f)
            chargeFillImage.color = Color.yellow;
        else
            chargeFillImage.color = Color.red;
    }

    IEnumerator StretchRope()
    {
        isStretching = true;
        float elapsed = 0f;
        Vector3 startPos = transform.localPosition;
        Vector3 targetPos = stretchedPosition;

        while (elapsed < backwardDuration)
        {
            float t = elapsed / backwardDuration;
            transform.localPosition = Vector3.Lerp(startPos, targetPos, t);
            elapsed += Time.deltaTime;
            yield return null;
        }

        transform.localPosition = targetPos;
        isStretching = false;
    }

    IEnumerator ReturnRope(Vector3 fromPosition)
    {
        isReturning = true;

        if (arrow != null && !arrowReleased)
        {
            arrowReleased = true;
            arrow.transform.parent = null;

            Rigidbody rb = arrow.GetComponent<Rigidbody>();
            if (rb != null)
                rb.isKinematic = true;

            arrowFlying = true;

            autoReturnCoroutine = StartCoroutine(AutoReturnAfterDelay(2.5f));
        }

        float elapsed = 0f;
        while (elapsed < forwardDuration)
        {
            float t = elapsed / forwardDuration;
            transform.localPosition = Vector3.Lerp(fromPosition, initialLocalPosition, t);
            elapsed += Time.deltaTime;
            yield return null;
        }

        transform.localPosition = initialLocalPosition;
        isReturning = false;
    }

    IEnumerator AutoReturnAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);

        if (arrowFlying)
        {
            ResetArrow();
        }
    }

    void StopAutoReturn()
    {
        if (autoReturnCoroutine != null)
        {
            StopCoroutine(autoReturnCoroutine);
            autoReturnCoroutine = null;
        }
    }

    void ResetArrow()
    {
        StopAutoReturn();
        arrowFlying = false;
        arrowReleased = false;

        if (sliderResetCoroutine != null)
            StopCoroutine(sliderResetCoroutine);

        sliderResetCoroutine = StartCoroutine(SmoothResetSlider(0.15f));

        arrow.transform.parent = transform;
        arrow.transform.localPosition = arrowInitialLocalPos;
        arrow.transform.localRotation = arrowInitialLocalRot;
    }

    void OnDrawGizmosSelected()
    {
        if (arrow != null)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawLine(arrow.transform.position, arrow.transform.position + (-arrow.transform.up * 1f));
        }
    }
}
