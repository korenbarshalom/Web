using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using TMPro; // âœ… TextMeshPro

public class TripleShooter : MonoBehaviour
{
    [Header("Bullet Settings")]
    public GameObject bulletPrefab;
    public Transform firePoint;
    public float bulletSpeed = 50f;
    public float spreadAngle = 10f;
    public float bulletMaxDistance = 20f;
    public Transform bulletContainer;

    [Header("Fire Settings")]
    public float fireRate = 0.25f;
    private float nextFireTime = 0f;
    private int shotsFired = 0;

    [Header("Shoot Animation Settings")]
    public Transform shootAnimationObject;
    public float recoilAngle = 6f;
    public float recoilDuration = 0.1f;

    [Header("Reload Settings")]
    public Transform reloadAnimationObject;
    public float reloadDistance = 0.3f;
    public float reloadDuration = 0.3f;

    [Header("Sound Settings")]
    public AudioSource shootAudioSource;
    public AudioClip shootSoundClip;
    public AudioSource reloadAudioSource;
    public AudioClip reloadSoundClip;

    [Header("Ammo Settings")]
    public int maxAmmoPerMagazine = 2;
    public int currentAmmo = 2;
    public int magazines = 6;
    public TextMeshProUGUI ammoText;

    [Header("Muzzle Flash Settings")]
    public ParticleSystem muzzleFlash;

    private bool isReloading = false;
    private bool waitingForReload = false;

    // List to track robots for destruction detection
    private List<GameObject> trackedRobots = new List<GameObject>();

    void Start()
    {
        UpdateAmmoUI();
        // Init tracking of all robots in the scene
        trackedRobots = new List<GameObject>(GameObject.FindGameObjectsWithTag("Robot"));
    }

    void Update()
    {
        // Fire logic
        if (Input.GetMouseButton(0) && Time.time >= nextFireTime && !isReloading && currentAmmo > 0)
        {
            nextFireTime = Time.time + fireRate;
            FireTriple();
            shotsFired++;

            if (shootAnimationObject != null)
                StartCoroutine(PlayShootAnimation());

            if (shotsFired >= 2 && !waitingForReload)
            {
                waitingForReload = true;
                StartCoroutine(Reload());
            }
        }

        // Detect and handle destroyed robots
        DetectDestroyedRobots();
    }

    void DetectDestroyedRobots()
    {
        GameObject[] currentRobots = GameObject.FindGameObjectsWithTag("Robot");
        if (currentRobots.Length < trackedRobots.Count)
        {
            int destroyedCount = trackedRobots.Count - currentRobots.Length;
            AddMagazines(2 * destroyedCount);
        }
        trackedRobots = new List<GameObject>(currentRobots);
    }

    void FireTriple()
    {
        if (currentAmmo <= 0)
            return;

        ShootBullet(firePoint.position, firePoint.rotation);
        ShootBullet(firePoint.position, firePoint.rotation * Quaternion.Euler(0f, -spreadAngle, 0f));
        ShootBullet(firePoint.position, firePoint.rotation * Quaternion.Euler(0f, spreadAngle, 0f));

        if (shootAudioSource != null && shootSoundClip != null)
            shootAudioSource.PlayOneShot(shootSoundClip);

        if (muzzleFlash != null)
            muzzleFlash.Play();

        currentAmmo--;
        UpdateAmmoUI();
    }

    void ShootBullet(Vector3 position, Quaternion rotation)
    {
        GameObject bullet = Instantiate(bulletPrefab, position, rotation, bulletContainer);

        Rigidbody rb = bullet.GetComponent<Rigidbody>();
        if (rb != null)
        {
            rb.isKinematic = true;
            rb.useGravity = false;
        }

        Bullet4 bulletScript = bullet.GetComponent<Bullet4>();
        if (bulletScript != null)
            bulletScript.SetStartPosition(position);

        StartCoroutine(MoveAndDestroy(bullet, position));
    }

    IEnumerator MoveAndDestroy(GameObject bullet, Vector3 startPosition)
    {
        while (bullet != null)
        {
            bullet.transform.position += bullet.transform.forward * bulletSpeed * Time.deltaTime;
            if (Vector3.Distance(startPosition, bullet.transform.position) >= bulletMaxDistance)
            {
                Destroy(bullet);
                yield break;
            }
            yield return null;
        }
    }

    IEnumerator PlayShootAnimation()
    {
        Quaternion startRot = shootAnimationObject.localRotation;
        Quaternion recoilRot = startRot * Quaternion.Euler(0f, recoilAngle, 0f);
        float elapsed = 0f;

        while (elapsed < recoilDuration)
        {
            shootAnimationObject.localRotation = Quaternion.Slerp(startRot, recoilRot, elapsed / recoilDuration);
            elapsed += Time.deltaTime;
            yield return null;
        }
        shootAnimationObject.localRotation = recoilRot;

        elapsed = 0f;
        while (elapsed < recoilDuration)
        {
            shootAnimationObject.localRotation = Quaternion.Slerp(recoilRot, startRot, elapsed / recoilDuration);
            elapsed += Time.deltaTime;
            yield return null;
        }
        shootAnimationObject.localRotation = startRot;
    }

    IEnumerator Reload()
    {
        isReloading = true;

        if (reloadAudioSource != null && reloadSoundClip != null)
            reloadAudioSource.PlayOneShot(reloadSoundClip);

        if (reloadAnimationObject != null)
        {
            Vector3 startPos = reloadAnimationObject.localPosition;
            Vector3 backPos = startPos + Vector3.left * reloadDistance;
            float elapsed = 0f;

            while (elapsed < reloadDuration)
            {
                reloadAnimationObject.localPosition = Vector3.Lerp(startPos, backPos, elapsed / reloadDuration);
                elapsed += Time.deltaTime;
                yield return null;
            }
            reloadAnimationObject.localPosition = backPos;

            elapsed = 0f;
            while (elapsed < reloadDuration)
            {
                reloadAnimationObject.localPosition = Vector3.Lerp(backPos, startPos, elapsed / reloadDuration);
                elapsed += Time.deltaTime;
                yield return null;
            }
            reloadAnimationObject.localPosition = startPos;
        }

        if (magazines > 0)
        {
            magazines--;
            currentAmmo = maxAmmoPerMagazine;
        }
        else currentAmmo = 0;

        UpdateAmmoUI();
        shotsFired = 0;
        isReloading = false;
        waitingForReload = false;
    }

    public void AddMagazines(int amount)
    {
        magazines += amount;
        UpdateAmmoUI();
    }

    void UpdateAmmoUI()
    {
        if (ammoText != null)
            ammoText.text = currentAmmo + " / " + magazines;
    }
}
