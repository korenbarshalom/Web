using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class PlayerMovement : MonoBehaviour
{
    [SerializeField] private float maximumSpeed;
    [SerializeField] private float rotationSpeed;
    [SerializeField] private float jumpSpeed;
    [SerializeField] private float jumpButtonGracePeriod;
    [SerializeField] private Transform cameraTransform;
    [SerializeField] private float mouseSensitivity = 2f;
    [SerializeField] private float Gravity = -9.81f;
    [SerializeField] private float cameraBackwardAmount = 0.5f;
    [SerializeField] private float cameraLerpSpeed = 5f;
    [SerializeField] private float cameraSideAmount = 0.2f;
    [SerializeField] private float sprintMultiplier = 1.5f;
    [SerializeField] private float rollForce = 8f;
    [SerializeField] private Animator animator;

    [Header("Camera Rotation Limits")]
    [SerializeField] private Vector2 cameraLimit = new Vector2(-40, 40);

    [Header("Mouse Sensitivity UI")]
    [SerializeField] private Slider mouseSensitivitySlider;
    [SerializeField] private TextMeshProUGUI mouseSensitivityText;
    [SerializeField] private float minMouseSensitivity = 0f;
    [SerializeField] private float maxMouseSensitivity = 5f;

    [Header("Sword Activation")]
    [SerializeField] private GameObject swordObject;

    private bool attackBlocked = false;

    private Vector3 initialCameraLocalPosition;
    private CharacterController characterController;
    private float ySpeed;
    private float originalStepOffset;
    private float? lastGroundedTime;
    private float? jumpButtonPressedTime;
    private float currentRotationY;
    private float mouseX;
    private float mouseY;
    private bool hasJumped = false;
    private bool wasGroundedLastFrame = false;
    private bool isRolling = false;
    private Vector3 rollDirection = Vector3.zero;
    private float rollTimer = 0f;
    private float rollDuration = 0.5f;

    private bool externalJumpTriggered = false;
    private bool isKnockbackActive = false;

    private float rollCooldown = 1f;
    private float nextRollTime = 0f;

    private float attackCooldown = 0.75f;
    private float nextAttackTime = 0f;

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        originalStepOffset = characterController.stepOffset;
        currentRotationY = transform.eulerAngles.y;

        if (cameraTransform != null)
            initialCameraLocalPosition = cameraTransform.localPosition;

        if (animator == null)
            animator = GetComponent<Animator>();

        if (mouseSensitivitySlider != null)
        {
            mouseSensitivitySlider.minValue = minMouseSensitivity;
            mouseSensitivitySlider.maxValue = maxMouseSensitivity;
            mouseSensitivitySlider.value = mouseSensitivity;
            mouseSensitivitySlider.onValueChanged.AddListener(OnMouseSensitivityChanged);
        }

        if (mouseSensitivityText != null)
        {
            mouseSensitivityText.text = mouseSensitivity.ToString("F2");
        }
    }

    void Update()
    {
        GameObject bomb = GameObject.FindGameObjectWithTag("Bomb");
        attackBlocked = bomb != null && bomb.activeSelf;

        HandleMovement();
        HandleJump();
        HandleRoll();
        RotateWithMouse();
        UpdateCameraPosition();
        HandleAttacks();
    }

    private void HandleMovement()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        if (isKnockbackActive)
            horizontalInput = 0f;

        Vector3 forward = cameraTransform.forward;
        Vector3 right = cameraTransform.right;
        forward.y = 0f;
        right.y = 0f;
        forward.Normalize();
        right.Normalize();

        Vector3 moveDirection = forward * verticalInput + right * horizontalInput;
        float inputMagnitude = Mathf.Clamp01(moveDirection.magnitude);

        animator.SetFloat("Input Magnitude", inputMagnitude, 0.05f, Time.deltaTime);

        float speed = inputMagnitude * maximumSpeed;
        bool isSprinting = Input.GetKey(KeyCode.W) && (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift));
        if (isSprinting)
            speed *= sprintMultiplier;

        moveDirection.Normalize();
        ySpeed += Gravity * Time.deltaTime;

        if (characterController.isGrounded)
        {
            if (!wasGroundedLastFrame)
            {
                lastGroundedTime = Time.time;
                wasGroundedLastFrame = true;
                hasJumped = false;
            }

            if (ySpeed < 0)
                ySpeed = -0.5f;

            if (Input.GetButtonDown("Jump"))
                jumpButtonPressedTime = Time.time;
        }
        else
        {
            wasGroundedLastFrame = false;
        }

        if (Time.time - lastGroundedTime <= jumpButtonGracePeriod)
        {
            characterController.stepOffset = originalStepOffset;

            if ((jumpButtonPressedTime.HasValue && Time.time - jumpButtonPressedTime <= jumpButtonGracePeriod && !hasJumped) || externalJumpTriggered)
            {
                ySpeed = jumpSpeed;
                jumpButtonPressedTime = null;
                lastGroundedTime = null;

                animator.SetTrigger("Jump");
                hasJumped = true;
                externalJumpTriggered = false;
            }
        }
        else
        {
            characterController.stepOffset = 0;
        }

        Vector3 velocity = moveDirection * speed;
        velocity.y = ySpeed;

        if (isRolling)
            velocity += rollDirection * rollForce;

        characterController.Move(velocity * Time.deltaTime);

        HandleAnimationStates(horizontalInput, verticalInput, isSprinting);

        if (moveDirection.magnitude > 0.1f)
        {
            Quaternion targetRotation = Quaternion.LookRotation(moveDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
    }

    private void HandleRoll()
    {
        if (Input.GetKeyDown(KeyCode.C) && !isRolling && Time.time >= nextRollTime)
        {
            bool isW = Input.GetKey(KeyCode.W);
            bool isA = Input.GetKey(KeyCode.A);
            bool isS = Input.GetKey(KeyCode.S);
            bool isD = Input.GetKey(KeyCode.D);

            if (isW)
            {
                animator.SetTrigger("RollForward");
                rollDirection = transform.forward;
            }
            else if (isS)
            {
                animator.SetTrigger("RollBackward");
                rollDirection = -transform.forward;
            }
            else if (isA)
            {
                animator.SetTrigger("RollLeft");
                rollDirection = -transform.right;
            }
            else if (isD)
            {
                animator.SetTrigger("RollRight");
                rollDirection = transform.right;
            }
            else
            {
                animator.SetTrigger("RollForward");
                rollDirection = transform.forward;
            }

            isRolling = true;
            rollTimer = rollDuration;
            nextRollTime = Time.time + rollCooldown;
        }

        if (isRolling)
        {
            rollTimer -= Time.deltaTime;
            if (rollTimer <= 0f)
            {
                isRolling = false;
                rollDirection = Vector3.zero;
            }
        }
    }

    private void HandleAttacks()
    {
        if (Time.time < nextAttackTime) return;

        if (attackBlocked)
        {
            if (Input.GetMouseButtonDown(0))
            {
                animator.SetTrigger("Throw");
                nextAttackTime = Time.time + attackCooldown;
            }
            return;
        }

        if (Input.GetMouseButtonDown(0))
        {
            animator.SetTrigger("Attack1");
            nextAttackTime = Time.time + attackCooldown;
        }
        else if (Input.GetMouseButtonDown(1))
        {
            animator.SetTrigger("Attack2");
            nextAttackTime = Time.time + attackCooldown;
        }
        else if (Input.GetKeyDown(KeyCode.Q))
        {
            animator.SetTrigger("Attack3");
            nextAttackTime = Time.time + attackCooldown;
        }
        else if (Input.GetKeyDown(KeyCode.E))
        {
            animator.SetTrigger("Attack4");
            nextAttackTime = Time.time + attackCooldown;
        }
    }

    public void RestoreAttacks()
    {
        attackBlocked = false;
        if (swordObject != null)
        {
            swordObject.SetActive(true);
        }
    }

    private void HandleAnimationStates(float horizontalInput, float verticalInput, bool isSprinting)
    {
        bool isW = Input.GetKey(KeyCode.W);
        bool isA = Input.GetKey(KeyCode.A);
        bool isS = Input.GetKey(KeyCode.S);
        bool isD = Input.GetKey(KeyCode.D);

        animator.SetBool("RunForward", isW);
        animator.SetBool("RunBackward", isS);
        animator.SetBool("RunLeft", isA);
        animator.SetBool("RunRight", isD);
        animator.SetBool("Sprint", isSprinting);
    }

    private void HandleJump() { }

    private void RotateWithMouse()
    {
        mouseX += Input.GetAxis("Mouse X") * mouseSensitivity;
        mouseY -= Input.GetAxis("Mouse Y") * mouseSensitivity;
        mouseY = Mathf.Clamp(mouseY, cameraLimit.x, cameraLimit.y);

        transform.rotation = Quaternion.Euler(0, mouseX, 0);
        if (cameraTransform != null)
        {
            cameraTransform.localRotation = Quaternion.Euler(mouseY, 0, 0);
        }
    }

    private void UpdateCameraPosition()
    {
        if (cameraTransform == null) return;

        float verticalInput = Input.GetAxis("Vertical");
        float horizontalInput = Input.GetAxis("Horizontal");

        Vector3 targetLocalPosition = initialCameraLocalPosition;

        if (verticalInput > 0.1f)
            targetLocalPosition += Vector3.back * cameraBackwardAmount;

        if (Mathf.Abs(horizontalInput) > 0.1f)
            targetLocalPosition += Vector3.right * horizontalInput * cameraSideAmount;

        cameraTransform.localPosition = Vector3.Lerp(cameraTransform.localPosition, targetLocalPosition, cameraLerpSpeed * Time.deltaTime);
    }

    private void OnApplicationFocus(bool focus)
    {
        Cursor.lockState = focus ? CursorLockMode.Locked : CursorLockMode.None;
    }

    public bool IsGrounded() => characterController.isGrounded;

    public bool WasRecentlyGrounded() => Time.time - lastGroundedTime <= jumpButtonGracePeriod;

    public void ForceJumpByEnemy() => externalJumpTriggered = true;

    public void StartKnockbackLock()
    {
        isKnockbackActive = true;
        Invoke(nameof(EndKnockbackLock), 0.4f);
    }

    private void EndKnockbackLock() => isKnockbackActive = false;

    public void OnMouseSensitivityChanged(float value)
    {
        mouseSensitivity = value;

        if (mouseSensitivityText != null)
            mouseSensitivityText.text = value.ToString("F2");
    }
}
