using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class PlayerMovement : MonoBehaviour
{
    [SerializeField] public float maximumSpeed;
    [SerializeField] private float rotationSpeed;
    [SerializeField] private float jumpSpeed;
    [SerializeField] private Transform cameraTransform;
    [SerializeField] private float mouseSensitivity = 2f;
    [SerializeField] private float Gravity = -9.81f;
    [SerializeField] private float cameraBackwardAmount = 0.5f;
    [SerializeField] private float cameraLerpSpeed = 5f;
    [SerializeField] private float cameraSideAmount = 0.2f;
    [SerializeField] private float sprintMultiplier = 1.5f;
    [SerializeField] private float rollForce = 8f;
    [SerializeField] private Animator animator;
    [SerializeField] private ParticleSystem sprintEffect;
    [Header("Footstep Sounds")]
    [SerializeField] private AudioClip landingClip;
    [SerializeField] private float footstepVolume = 0.5f;
    [SerializeField] private float attackTurnSpeed = 720f; // ° לשנייה – כמו בגלגול
                                   // ─── Attack-Turn Settings ───
    [SerializeField] private float attackTurnSmoothTime = 0.12f; // כמה “רך” יהיה הסיבוב
    private float attackTurnVelocity;   // מומנטום פנימי ל-SmoothDampAngle
    private bool attackTurning;        // true בזמן שמבצעים סיבוב חלק
    private float attackTargetYaw;      // ה-Yaw שאליו מכוונים (מצלמה)


    [Header("Camera Rotation Limits")]
    [SerializeField] private Vector2 cameraLimit = new Vector2(-40, 40);

    [Header("Mouse Sensitivity UI")]
    [SerializeField] private Slider mouseSensitivitySlider;
    [SerializeField] private TextMeshProUGUI mouseSensitivityText;
    [SerializeField] private float minMouseSensitivity = 0f;
    [SerializeField] private float maxMouseSensitivity = 5f;
    private float attack2Cooldown = 1.2f; // cooldown נפרד לתקיפה ימנית

    [Header("Sword Activation")]
    [SerializeField] private GameObject swordObject;

    private bool attackBlocked = false;

    private Vector3 initialCameraLocalPosition;
    private CharacterController characterController;
    private float ySpeed;
    private float originalStepOffset;
    private float currentRotationY;
    private float mouseX;
    private float mouseY;
    private bool hasJumped = false;
    private bool wasGroundedLastFrame = false;
    private bool isRolling = false;
    private Vector3 rollDirection = Vector3.zero;
    private float rollTimer = 0f;
    private float rollDuration = 0.5f;

    private bool externalJumpTriggered = false;
    private bool isKnockbackActive = false;
    private bool wasSprintingLastFrame = false;
    private bool playLandingSoundOnGrounded = false;

    private float rollCooldown = 1f;
    private float nextRollTime = 0f;
    private float attackLockUntil = 0f; // זמן שבו מותר שוב לתקוף

    private float attackCooldown = 0.75f;
    private float nextAttackTime = 0f;

    private float attack3Cooldown = 3f; // זמן המתנה בין לחיצות על Q
    private float nextAttack3Time = 0f;

    [HideInInspector] public Vector3 moveDirection = Vector3.zero;

    // מוסיף פונקציה שמחזירה true אם הדמות זזה על הקרקע
    private bool IsMoving()
    {
        Vector3 horizontalVelocity = new Vector3(characterController.velocity.x, 0, characterController.velocity.z);
        return horizontalVelocity.magnitude > 0.1f;
    }

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        originalStepOffset = characterController.stepOffset;
        currentRotationY = transform.eulerAngles.y;

        if (cameraTransform != null)
            initialCameraLocalPosition = cameraTransform.localPosition;

        if (animator == null)
            animator = GetComponent<Animator>();

        if (mouseSensitivitySlider != null)
        {
            mouseSensitivitySlider.minValue = minMouseSensitivity;
            mouseSensitivitySlider.maxValue = maxMouseSensitivity;
            mouseSensitivitySlider.value = mouseSensitivity;
            mouseSensitivitySlider.onValueChanged.AddListener(OnMouseSensitivityChanged);
        }

        if (mouseSensitivityText != null)
        {
            mouseSensitivityText.text = mouseSensitivity.ToString("F2");
        }
    }

    void Update()
    {
        GameObject bomb = GameObject.FindGameObjectWithTag("Bomb");
        attackBlocked = bomb != null && bomb.activeSelf;

        HandleMovement();
        HandleJump();
        HandleRoll();
        RotateWithMouse();
        UpdateCameraPosition();
        HandleAttacks();
    }

    private void HandleMovement()
    {
        if (!characterController.enabled) return;

        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        if (isKnockbackActive)
            horizontalInput = 0f;

        Vector3 forward = cameraTransform.forward;
        Vector3 right = cameraTransform.right;
        forward.y = 0f;
        right.y = 0f;
        forward.Normalize();
        right.Normalize();

        moveDirection = forward * verticalInput + right * horizontalInput;

        float inputMagnitude = Mathf.Clamp01(moveDirection.magnitude);

        animator.SetFloat("Input Magnitude", inputMagnitude, 0.05f, Time.deltaTime);

        float speed = inputMagnitude * maximumSpeed;
        bool isSprinting = Input.GetKey(KeyCode.W) && (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift));
        if (isSprinting && !wasSprintingLastFrame)
        {
            if (sprintEffect != null) sprintEffect.Play();
            // אם זה AudioSource: sprintSound.Play();
        }
        else if (!isSprinting && wasSprintingLastFrame)
        {
            if (sprintEffect != null) sprintEffect.Stop();
            // אם זה AudioSource: sprintSound.Stop();
        }

        wasSprintingLastFrame = isSprinting;

        if (isSprinting)
            speed *= sprintMultiplier;

        moveDirection.Normalize();
        ySpeed += Gravity * Time.deltaTime;



        if (characterController.isGrounded)
        {
            if (!wasGroundedLastFrame)
            {
                wasGroundedLastFrame = true;
                hasJumped = false;
            }

            if (ySpeed < 0)
                ySpeed = -0.5f;

            if (Input.GetButtonDown("Jump") || externalJumpTriggered)
            {
                ySpeed = jumpSpeed;
                animator.SetTrigger("Jump");
                hasJumped = true;
                externalJumpTriggered = false;
            }

            characterController.stepOffset = originalStepOffset;
        }
        else
        {
            wasGroundedLastFrame = false;
            characterController.stepOffset = 0;
        }


        Vector3 velocity = moveDirection * speed;
        velocity.y = ySpeed;

        if (isRolling)
            velocity += rollDirection * rollForce;

        characterController.Move(velocity * Time.deltaTime);

        HandleAnimationStates(horizontalInput, verticalInput, isSprinting);

        if (moveDirection.magnitude > 0.1f)
        {
            Quaternion targetRotation = Quaternion.LookRotation(moveDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
    }

    private void HandleRoll()
    {
        if (Input.GetKeyDown(KeyCode.LeftControl) && !isRolling && Time.time >= nextRollTime)
        {
            // מחשב כיוון מהמבט של המצלמה + אינפוט
            Vector3 camForward = cameraTransform.forward;
            Vector3 camRight = cameraTransform.right;
            camForward.y = 0f;
            camRight.y = 0f;
            camForward.Normalize();
            camRight.Normalize();

            float horizontal = Input.GetAxisRaw("Horizontal");
            float vertical = Input.GetAxisRaw("Vertical");
            Vector3 inputDir = camForward * vertical + camRight * horizontal;

            // אם אין תנועה – רול קדימה לפי המצלמה
            if (inputDir.sqrMagnitude < 0.01f)
                inputDir = camForward;

            rollDirection = inputDir.normalized;

            // סובב את הדמות מיד לכיוון ה-roll
            if (rollDirection.sqrMagnitude > 0.01f)
            {
                Quaternion targetRotation = Quaternion.LookRotation(rollDirection);
                transform.rotation = targetRotation;
            }

            // טריגרים לפי אינפוט
            if (vertical > 0.1f)
                animator.SetTrigger("RollForward");
            else if (vertical < -0.1f)
                animator.SetTrigger("RollBackward");
            else if (horizontal < -0.1f)
                animator.SetTrigger("RollLeft");
            else if (horizontal > 0.1f)
                animator.SetTrigger("RollRight");
            else
                animator.SetTrigger("RollForward"); // ברירת מחדל

            attackLockUntil = Time.time + 0.5f;
            isRolling = true;
            rollTimer = rollDuration;
            nextRollTime = Time.time + rollCooldown;
        }

        if (isRolling)
        {
            rollTimer -= Time.deltaTime;
            if (rollTimer <= 0f)
            {
                isRolling = false;
                rollDirection = Vector3.zero;
            }
        }
    }


    // --- החליף את כל המתודה הישנה בזה ---
    private void HandleAttacks()
    {
        /* ───────── סיבוב חלק (כמו HandleRoll) ───────── */
        if (attackTurning)
        {
            float currentYaw = transform.eulerAngles.y;

            // SmoothDampAngle → מעבר רך אל היעד
            float newYaw = Mathf.SmoothDampAngle(
                currentYaw,
                attackTargetYaw,
                ref attackTurnVelocity,
                attackTurnSmoothTime);

            transform.rotation = Quaternion.Euler(0f, newYaw, 0f);

            // סיימנו להסתובב?
            if (Mathf.Abs(Mathf.DeltaAngle(newYaw, attackTargetYaw)) < 0.1f)
                attackTurning = false;
        }

        /* ───────── מגבלות זמן / נעילות ───────── */
        if (Time.time < nextAttackTime) return;
        if (Time.time < attackLockUntil) return;

        if (attackBlocked)
        {
            if (Input.GetMouseButtonDown(0))
                nextAttackTime = Time.time + attackCooldown;
            return;
        }

        bool isMoving = IsMoving();

        /* ───────── קלטי התקפה ───────── */
        if (Input.GetMouseButtonDown(0))
        {
            TriggerAttack(isMoving ? "AttackWalk1" : "Attack1", attackCooldown, isMoving);
        }
        else if (Input.GetMouseButtonDown(1))
        {
            TriggerAttack(isMoving ? "AttackWalk2" : "Attack2", attack2Cooldown, isMoving);
        }
        else if (Input.GetKeyDown(KeyCode.Q) && Time.time >= nextAttack3Time)
        {
            TriggerAttack(isMoving ? "AttackWalk3" : "Attack3", attack3Cooldown, isMoving);
            nextAttack3Time = Time.time + attack3Cooldown;
        }
        else if (Input.GetKeyDown(KeyCode.E) && Time.time >= nextAttack3Time)
        {
            TriggerAttack(isMoving ? "AttackWalk4" : "Attack4", attack3Cooldown, isMoving);
            nextAttack3Time = Time.time + attack3Cooldown;
        }
    }

    /* ───────── מפעיל אנימציה + מתחיל סיבוב חלק (רק כאשר עומדים) ───────── */
    private void TriggerAttack(string triggerName, float cooldown, bool isMoving)
    {
        animator.SetTrigger(triggerName);
        nextAttackTime = Time.time + cooldown;

        // אם לא זזים – מסתובבים בעדינות אל כיוון המצלמה
        if (!isMoving)
        {
            attackTargetYaw = cameraTransform.eulerAngles.y;
            attackTurnVelocity = 0f;  // איפוס המהירות של SmoothDampAngle
            attackTurning = true;
        }
    }






    private void HandleAnimationStates(float horizontalInput, float verticalInput, bool isSprinting)
    {
        float h = Input.GetAxis("Horizontal");
        float v = Input.GetAxis("Vertical");

        if (Input.GetKey(KeyCode.LeftShift) && v > 0f)
            v = 1.5f;

        // החלפת כיוונים באלכסון קדימה בצורה חלקה
        if (Input.GetKey(KeyCode.W) && Input.GetKey(KeyCode.A))
            h = Mathf.Lerp(h, Mathf.Abs(h), 0.2f);  // מעבר חלק לשמאל הפוך

        if (Input.GetKey(KeyCode.W) && Input.GetKey(KeyCode.D))
            h = Mathf.Lerp(h, -Mathf.Abs(h), 0.2f); // מעבר חלק לימין הפוך

        animator.SetFloat("Horizontal", h, 0.15f, Time.deltaTime);
        animator.SetFloat("Vertical", v, 0.15f, Time.deltaTime);
    }


    private void HandleJump() { }

    private void RotateWithMouse()
    {
        mouseX += Input.GetAxis("Mouse X") * mouseSensitivity;
        mouseY -= Input.GetAxis("Mouse Y") * mouseSensitivity;
        mouseY = Mathf.Clamp(mouseY, cameraLimit.x, cameraLimit.y);

        // רק אם הדמות זזה, סובב את השחקן
        if (IsMoving())
        {
            transform.rotation = Quaternion.Euler(0, mouseX, 0);
        }

        if (cameraTransform != null)
        {
            // סיבוב המצלמה לפי העכבר: X - למעלה/למטה, Y - סיבוב סביב הדמות
            cameraTransform.rotation = Quaternion.Euler(mouseY, mouseX, 0);
        }
    }



    private void UpdateCameraPosition()
    {
        if (cameraTransform == null) return;

        float verticalInput = Input.GetAxis("Vertical");
        float horizontalInput = Input.GetAxis("Horizontal");

        Vector3 targetLocalPosition = initialCameraLocalPosition;

        if (verticalInput > 0.1f)
            targetLocalPosition += Vector3.back * cameraBackwardAmount;

        if (Mathf.Abs(horizontalInput) > 0.1f)
            targetLocalPosition += Vector3.right * horizontalInput * cameraSideAmount;

        cameraTransform.localPosition = Vector3.Lerp(cameraTransform.localPosition, targetLocalPosition, cameraLerpSpeed * Time.deltaTime);
    }

    private void OnApplicationFocus(bool focus)
    {
        Cursor.lockState = focus ? CursorLockMode.Locked : CursorLockMode.None;
    }

    public bool IsGrounded() => characterController.isGrounded;


    public void ForceJump(float force)
    {
        ySpeed = force;
    }

    public void ForceJumpByEnemy() => externalJumpTriggered = true;




    public void StartKnockbackLock()
    {
        isKnockbackActive = true;
        Invoke(nameof(EndKnockbackLock), 0.4f);
    }

    private void EndKnockbackLock() => isKnockbackActive = false;

    public void OnMouseSensitivityChanged(float value)
    {
        mouseSensitivity = value;

        if (mouseSensitivityText != null)
            mouseSensitivityText.text = value.ToString("F2");
    }
    private void OnLand(AnimationEvent animationEvent)
    {
        if (animationEvent.animatorClipInfo.weight > 0.5f && landingClip != null)
        {
            if (characterController.isGrounded)
            {
                AudioSource.PlayClipAtPoint(landingClip, transform.position, footstepVolume);
            }
            else
            {
                playLandingSoundOnGrounded = true;
            }
        }
    }



}
