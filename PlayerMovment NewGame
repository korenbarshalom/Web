using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    [SerializeField]
    private float maximumSpeed;

    [SerializeField]
    private float rotationSpeed;

    [SerializeField]
    private float jumpSpeed;

    [SerializeField]
    private float jumpButtonGracePeriod;

    [SerializeField]
    private Transform cameraTransform;

    [SerializeField]
    private float mouseSensitivity = 2f;

    [SerializeField]
    private float Gravity = -9.81f;

    [SerializeField]
    private float cameraBackwardAmount = 0.5f;

    [SerializeField]
    private float cameraLerpSpeed = 5f;

    [SerializeField]
    private float cameraSideAmount = 0.2f;

    [SerializeField]
    private float sprintMultiplier = 1.5f;

    [SerializeField]
    private Animator animator; // ✅ שדה חדש - להכניס Animator ידנית

    private Vector3 initialCameraLocalPosition;
    private CharacterController characterController;
    private float ySpeed;
    private float originalStepOffset;
    private float? lastGroundedTime;
    private float? jumpButtonPressedTime;
    private float currentRotationY;
    private bool hasJumped = false;

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        originalStepOffset = characterController.stepOffset;
        currentRotationY = transform.eulerAngles.y;

        if (cameraTransform != null)
        {
            initialCameraLocalPosition = cameraTransform.localPosition;
        }

        // ✅ אם לא הכניסו Animator - נחפש אוטומטית
        if (animator == null)
        {
            animator = GetComponent<Animator>();
        }
    }

    void Update()
    {
        HandleMovement();
        HandleJump();
        RotateWithMouse();
        UpdateCameraPosition();
    }

    private void HandleMovement()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        Vector3 movementDirection = new Vector3(horizontalInput, 0, verticalInput);
        float inputMagnitude = Mathf.Clamp01(movementDirection.magnitude);

        animator.SetFloat("Input Magnitude", inputMagnitude, 0.05f, Time.deltaTime);

        float speed = inputMagnitude * maximumSpeed;

        bool isSprinting = Input.GetKey(KeyCode.W) && (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift));
        if (isSprinting)
        {
            speed *= sprintMultiplier;
        }

        movementDirection = Quaternion.Euler(0, transform.eulerAngles.y, 0) * movementDirection;
        movementDirection.Normalize();

        ySpeed += Gravity * Time.deltaTime;

        if (characterController.isGrounded)
        {
            lastGroundedTime = Time.time;
            if (ySpeed < 0)
            {
                ySpeed = -0.5f;
            }

            if (Input.GetButtonDown("Jump"))
            {
                jumpButtonPressedTime = Time.time;
            }

            hasJumped = false;
        }

        if (Time.time - lastGroundedTime <= jumpButtonGracePeriod)
        {
            characterController.stepOffset = originalStepOffset;

            if (Time.time - jumpButtonPressedTime <= jumpButtonGracePeriod && !hasJumped)
            {
                ySpeed = jumpSpeed;
                jumpButtonPressedTime = null;
                lastGroundedTime = null;

                animator.SetTrigger("Jump");
                hasJumped = true;
            }
        }
        else
        {
            characterController.stepOffset = 0;
        }

        Vector3 velocity = movementDirection * speed;
        velocity.y = ySpeed;

        characterController.Move(velocity * Time.deltaTime);

        HandleAnimationStates(horizontalInput, verticalInput, isSprinting);
    }

    private void HandleAnimationStates(float horizontalInput, float verticalInput, bool isSprinting)
    {
        bool isW = Input.GetKey(KeyCode.W);
        bool isA = Input.GetKey(KeyCode.A);
        bool isS = Input.GetKey(KeyCode.S);
        bool isD = Input.GetKey(KeyCode.D);

        animator.SetBool("RunForward", isW);
        animator.SetBool("RunBackward", isS);
        animator.SetBool("RunLeft", isA);
        animator.SetBool("RunRight", isD);
        animator.SetBool("Sprint", isSprinting);
    }

    private void HandleJump()
    {
        // ניהול קפיצה מטופל ב-HandleMovement
    }

    private void RotateWithMouse()
    {
        float mouseX = Input.GetAxis("Mouse X") * mouseSensitivity;
        currentRotationY += mouseX;
        transform.rotation = Quaternion.Euler(0, currentRotationY, 0);
    }

    private void UpdateCameraPosition()
    {
        if (cameraTransform == null) return;

        float verticalInput = Input.GetAxis("Vertical");
        float horizontalInput = Input.GetAxis("Horizontal");

        Vector3 targetLocalPosition = initialCameraLocalPosition;

        if (verticalInput > 0.1f)
        {
            targetLocalPosition += Vector3.back * cameraBackwardAmount;
        }

        if (Mathf.Abs(horizontalInput) > 0.1f)
        {
            targetLocalPosition += Vector3.right * horizontalInput * cameraSideAmount;
        }

        cameraTransform.localPosition = Vector3.Lerp(cameraTransform.localPosition, targetLocalPosition, cameraLerpSpeed * Time.deltaTime);
    }

    private void OnApplicationFocus(bool focus)
    {
        if (focus)
        {
            Cursor.lockState = CursorLockMode.Locked;
        }
        else
        {
            Cursor.lockState = CursorLockMode.None;
        }
    }

    public bool IsGrounded()
    {
        return characterController.isGrounded;
    }

    public bool WasRecentlyGrounded()
    {
        return Time.time - lastGroundedTime <= jumpButtonGracePeriod;
    }
}
