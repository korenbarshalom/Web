using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    [SerializeField]
    private float maximumSpeed;

    [SerializeField]
    private float rotationSpeed;

    [SerializeField]
    private float jumpSpeed;

    [SerializeField]
    private float jumpButtonGracePeriod;

    [SerializeField]
    private Transform cameraTransform;

    [SerializeField]
    private float mouseSensitivity = 2f;

    [SerializeField]
    private float Gravity = -9.81f; // ✅ משתנה גרביטציה חדש

    [SerializeField]
    private float cameraBackwardAmount = 0.5f; // ✅ כמה המצלמה תזוז אחורה כשזזים קדימה

    [SerializeField]
    private float cameraLerpSpeed = 5f; // ✅ מהירות החזרה של המצלמה

    private Vector3 initialCameraLocalPosition;
    private Animator animator;
    private CharacterController characterController;
    private float ySpeed;
    private float originalStepOffset;
    private float? lastGroundedTime;
    private float? jumpButtonPressedTime;
    private float currentRotationY;

    void Start()
    {
        animator = GetComponent<Animator>();
        characterController = GetComponent<CharacterController>();
        originalStepOffset = characterController.stepOffset;
        currentRotationY = transform.eulerAngles.y;

        if (cameraTransform != null)
        {
            initialCameraLocalPosition = cameraTransform.localPosition; // שומר את המיקום ההתחלתי של המצלמה
        }
    }

    void Update()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        Vector3 movementDirection = new Vector3(horizontalInput, 0, verticalInput);
        float inputMagnitude = Mathf.Clamp01(movementDirection.magnitude);

        if (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift))
        {
            inputMagnitude /= 2;
        }

        animator.SetFloat("Input Magnitude", inputMagnitude, 0.05f, Time.deltaTime);

        float speed = inputMagnitude * maximumSpeed;
        movementDirection = Quaternion.Euler(0, transform.eulerAngles.y, 0) * movementDirection;
        movementDirection.Normalize();

        ySpeed += Gravity * Time.deltaTime; // ✅ משתמשים בגרביטציה שהגדרת

        if (characterController.isGrounded)
        {
            lastGroundedTime = Time.time;
            if (ySpeed < 0)
            {
                ySpeed = -0.5f;
            }
        }

        if (Input.GetButtonDown("Jump"))
        {
            jumpButtonPressedTime = Time.time;
        }

        if (Time.time - lastGroundedTime <= jumpButtonGracePeriod)
        {
            characterController.stepOffset = originalStepOffset;

            if (Time.time - jumpButtonPressedTime <= jumpButtonGracePeriod)
            {
                ySpeed = jumpSpeed;
                jumpButtonPressedTime = null;
                lastGroundedTime = null;
            }
        }
        else
        {
            characterController.stepOffset = 0;
        }

        Vector3 velocity = movementDirection * speed;
        velocity.y = ySpeed;

        characterController.Move(velocity * Time.deltaTime);

        RotateWithMouse();
        UpdateCameraPosition(verticalInput);
    }

    private void RotateWithMouse()
    {
        float mouseX = Input.GetAxis("Mouse X") * mouseSensitivity;
        currentRotationY += mouseX;
        transform.rotation = Quaternion.Euler(0, currentRotationY, 0);
    }

    private void UpdateCameraPosition(float verticalInput)
    {
        if (cameraTransform == null) return;

        Vector3 targetLocalPosition = initialCameraLocalPosition;

        if (verticalInput > 0.1f) // זז קדימה
        {
            targetLocalPosition += Vector3.back * cameraBackwardAmount; // ✅ מתקנים: להזיז על ציר Z של המצלמה
        }

        cameraTransform.localPosition = Vector3.Lerp(cameraTransform.localPosition, targetLocalPosition, cameraLerpSpeed * Time.deltaTime);
    }

    private void OnApplicationFocus(bool focus)
    {
        if (focus)
        {
            Cursor.lockState = CursorLockMode.Locked;
        }
        else
        {
            Cursor.lockState = CursorLockMode.None;
        }
    }
}
