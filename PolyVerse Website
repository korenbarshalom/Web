<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Model Viewer -->
<script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>

  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>polyVerse – Low-Poly Rigged Models</title>

  <!-- Google Font -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Montserrat:wght@700;900&display=swap" rel="stylesheet">

  <style>
    html, body {
      overflow-x: hidden;
    }
    /* ---------- Reset ---------- */
    *,*::before,*::after { box-sizing:border-box; margin:0; padding:0 }
    body { font-family:"Inter",sans-serif; line-height:1.6; background:#1e1e20; color:#fff }
    a { text-decoration:none; color:inherit }
    section, footer { opacity:0; animation:fadeInUp 0.6s ease-out forwards }

    /* ---------- Design Tokens & Keyframes ---------- */
    :root {
      --bg:#1e1e20;
      --text:#ffffff;
      --card-bg:#2a2a2d;
      --accent:#ff9800;
      --radius:8px;
    }
    @keyframes fadeInUp {
      from { opacity:0; transform:translateY(20px) }
      to   { opacity:1; transform:translateY(0) }
    }
    @keyframes pulse {
      0%,100% { transform:scale(1) }
      50%     { transform:scale(1.05) }
    }

    /* ---------- Buttons ---------- */
    .btn {
      display:inline-flex; align-items:center; gap:.5rem;
      padding:.7rem 1.35rem; /* Reduced padding slightly */
      border:none; border-radius:var(--radius);
      font-weight:600; cursor:pointer; background:var(--accent);
      color:#fff; transition:transform .2s, box-shadow .2s;
      font-size:0.97rem; /* Slightly reduced font size */
    }
    .btn:hover { transform:scale(1.05); box-shadow:0 6px 14px rgba(0,0,0,.4) }
    .btn:active { transform:scale(.97) }
    .back-btn {
      margin-bottom: 3rem;
      padding: 0.3rem 1.5rem;
      font-size: 1.13rem;
      min-width: 140px;
      min-height: 48px;
      border-radius: 14px;
      letter-spacing: 0.01em;
    }
    @media (max-width: 600px) {
      .back-btn {
        font-size: 1rem;
        padding: 0.7rem 1.2rem;
        min-width: 110px;
        min-height: 40px;
      }
    }

    /* ---------- Buy-Now Button ---------- */
    .buy-btn {
      background: #e53935; /* Changed from var(--accent)/orange to red */
      color: #fff;
      font-size: 1.08rem; /* Slightly increased from 1rem */
      font-weight: 600;
      padding: 0.62rem 1.45rem; /* Slightly increased padding */
      border: none;
      border-radius: 8px;
      margin-left: auto;
      margin-top: 0.5rem;
      margin-bottom: 0;
      display: block;
      box-shadow: 0 2px 8px rgba(0,0,0,0.10);
      transition: background 0.18s, box-shadow 0.18s, transform 0.15s;
      min-width: 115px; /* Slightly increased min-width */
      max-width: 170px; /* Slightly increased max-width */
      text-align: center;
    }
    .buy-btn:hover {
      background: #ff5252; /* Lighter red on hover */
      box-shadow: 0 4px 16px rgba(0,0,0,0.13);
      transform: translateY(-2px) scale(1.03);
    }
    @media (max-width: 700px) {
      .buy-btn {
        margin-left: 0;
        width: 100%;
        max-width: 100%;
      }
    }

    /* ---------- Navbar ---------- */
    nav {
      position:sticky; top:0; z-index:10;
      display:flex; align-items:center; justify-content:space-between;
      padding:1rem 1.2rem; /* Reduced vertical and horizontal padding slightly */
      min-height:68px; /* Slightly reduced nav height */
      background:var(--card-bg);
      box-shadow:0 1px 3px rgba(0,0,0,.5);
    }
    .logo {
      display:flex; align-items:center; gap:0.75rem;
    }
    .logo img {
      height:40px !important;
      width:40px !important;
      border-radius:8px !important;
    }
    nav ul { display:flex; gap:1.25rem; list-style:none; align-items:center; }
    @media(max-width:600px){ nav ul{ display:none } }

    /* ---------- Hero Section (warm orange-red gradient) ---------- */
    .hero {
      background: linear-gradient(to right, #ff5f6d, #ffc371);
      padding: 4rem 1rem;
      text-align: center;
    }
    .hero-headline {
      font-family: 'Montserrat', 'Inter', Arial, sans-serif;
      font-size: 2.85rem;
      font-weight: 900;
      color: #fff;
      margin-bottom: 1.1rem;
      letter-spacing: 0.01em;
      text-shadow: 0 4px 18px rgba(0,0,0,0.18), 0 1px 4px rgba(0,0,0,0.22);
      animation: heroFadeInUp 0.8s cubic-bezier(.23,1.02,.47,.98);
      line-height: 1.13;
    }
    .hero-subline {
      font-size: 1.18rem;
      color: rgba(255,255,255,0.82);
      font-weight: 500;
      margin-bottom: 2.1rem;
      letter-spacing: 0.04em;
      text-align: center;
      animation: heroFadeInUp 1.1s cubic-bezier(.23,1.02,.47,.98) 0.15s both;
      text-shadow: 0 2px 8px rgba(0,0,0,0.10);
    }
    @keyframes heroFadeInUp {
      from { opacity:0; transform:translateY(30px); }
      to   { opacity:1; transform:translateY(0); }
    }
    @media (max-width: 700px) {
      .hero-headline { font-size: 2.1rem; }
      .hero-subline { font-size: 1.01rem; }
    }

    /* ---------- Search Bar Styling ---------- */
    .hero-search {
      margin-top: 1rem;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .hero-search .modern-search-wrapper {
      position: relative;
      width: 100%;
      max-width: 600px;
      background: linear-gradient(90deg, #ff7e5f 0%, #feb47b 100%);
      border-radius: 10px;
      box-shadow: 0 4px 32px rgba(255, 94, 87, 0.10), 0 1.5px 8px rgba(0,0,0,0.08);
      transition: box-shadow 0.32s cubic-bezier(.4,.01,.22,1), border 0.32s cubic-bezier(.4,.01,.22,1);
      padding: 0.12rem 0.12rem;
      display: flex;
      align-items: center;
    }
    .hero-search input#heroSearch {
      width: 100%;
      padding: 1.05rem 3.2rem 1.05rem 1.5rem;
      border: none;
      border-radius: 10px;
      outline: none;
      font-size: 1.08rem;
      background: rgba(255,255,255,0.98);
      color: #1e1e20;
      box-shadow: none;
      transition: box-shadow 0.32s, border 0.32s, background 0.32s;
      font-family: inherit;
      font-weight: 500;
      letter-spacing: 0.01em;
      position: relative;
      z-index: 2;
    }
    .hero-search .modern-search-wrapper:focus-within {
      box-shadow: 0 0 0 4px rgba(255,152,0,0.18), 0 8px 32px rgba(255, 94, 87, 0.13), 0 1.5px 8px rgba(0,0,0,0.10);
      background: linear-gradient(90deg, #ffb347 0%, #ff5f6d 100%);
    }
    .hero-search input#heroSearch::placeholder {
      color: #bdbdbd;
      opacity: 1;
      transition: opacity 0.28s cubic-bezier(.4,.01,.22,1);
    }
    .hero-search input#heroSearch:focus::placeholder {
      opacity: 0.25;
    }
    .hero-search .search-icon-right {
      position: absolute;
      right: 1.1rem;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      z-index: 3;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 1.7rem;
      width: 1.7rem;
    }
    .hero-search .search-icon-right svg {
      width: 1.7rem;
      height: 1.7rem;
      fill: none;
      stroke: #ff7e5f;
      stroke-width: 2.2;
      filter: drop-shadow(0 1px 2px rgba(255,94,87,0.10));
      transition: stroke 0.22s;
    }
    .hero-search .modern-search-wrapper:focus-within .search-icon-right svg {
      stroke: #ff9800;
    }
    @media (max-width: 700px) {
      .hero-search .modern-search-wrapper {
        max-width: 98vw;
        border-radius: 8px;
      }
      .hero-search input#heroSearch {
        font-size: 0.98rem;
        border-radius: 8px;
        padding: 0.85rem 2.7rem 0.85rem 1.1rem;
      }
      .hero-search .search-icon-right {
        right: 0.7rem;
        width: 1.3rem;
        height: 1.3rem;
      }
      .hero-search .search-icon-right svg {
        width: 1.3rem;
        height: 1.3rem;
      }
    }

    /* ---------- Gallery ---------- */
    main { max-width:1280px; margin:2rem auto; padding:0 1rem }
    .gallery {
      display:grid;
      grid-template-columns:repeat(auto-fill,minmax(280px,1fr));
      gap:1.5rem;
    }
    .card {
      background:var(--card-bg); border-radius:var(--radius);
      overflow:hidden; box-shadow:0 2px 6px rgba(0,0,0,.3);
      transition:transform .3s, box-shadow .3s;
      display:flex; flex-direction:column;
      cursor:pointer;
    }
    .card:hover {
      transform:scale(1.05);
      box-shadow:0 8px 24px rgba(255,152,0,0.5);
    }
    .card img { width:100% }
    .card .info { padding:1rem; flex-grow:1; display:flex; flex-direction:column }
    .card h3 { font-size:1rem; margin-bottom:.5rem }
    .card p  { font-size:.875rem; color:#aaa }

    /* ---------- Modals (overlay stays global) ---------- */
    .modal {
      position:fixed; inset:0;
      background:rgba(0,0,0,0.6);   /* semi-transparent dark overlay */
      display:none;
      align-items:center; justify-content:center;
      z-index:1000;
    }
    .modal.active { display:flex }

    /* Remove overlay for loginRequiredModal only */
    #loginRequiredModal {
      background: none !important;
    }

    #loginRequiredModal .modal-content {
      background: var(--card-bg);
      padding: 2.2rem 2.2rem 1.7rem 2.2rem !important;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.32);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-width: 320px;
      max-width: 98vw;
    }

    #loginRequiredModal .modal-content h2 {
      margin-bottom: 0.5rem;
    }
    #loginRequiredModal .modal-content p {
      margin-bottom: 1.3rem;
      text-align: center;
    }
    .login-required-btn-group {
      margin-top: 0.7rem !important;
      margin-bottom: 0.1rem !important;
      display: flex;
      justify-content: center;
      gap: 1.1rem;
      flex-wrap: wrap;
      width: 100%;
    }

    .modal-content {
      background:var(--card-bg);
      transform:scale(0.8); opacity:0;
      transition:.3s ease-out;
    }
    .modal.active .modal-content {
      transform:scale(1); opacity:1;
    }

    /* ---------- Model Detail Page ---------- */
    #modelPage {
      width: 100%;
      max-width: 100%;
      margin: 0;
      padding: 2rem 0 2rem 0;
      background: var(--bg);
      min-height: 100vh;
      display: none;
      color: #fff;
    }
    #modelPage .model-detail {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2rem;
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      position: relative;
    }
    @media (min-width: 900px) {
      #modelPage .model-detail {
        flex-direction: row;
        align-items: flex-start;
        gap: 3rem;
      }
    }
    #modelPage .model-viewer-container {
      width: 100%;
      max-width: 900px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex: 1 1 0%;
    }
    /* --- Model Card Layout Improvements --- */
    #modelPage .model-card-section {
      width: 100%;
      max-width: 900px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      gap: 0;
    }
    #modelPage .model-media {
      width: 100%;
      max-width: 900px;
      margin: 0 auto;
      display: block;
      background: var(--card-bg);
      border-radius: var(--radius);
      object-fit: contain;
      box-shadow: 0 4px 24px rgba(0,0,0,0.25);
    }
    #modelPage .model-info-row {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: flex-start;
      width: 100%;
      margin-top: 1.5rem;
      gap: 2rem;
    }
    #modelPage .model-info-left {
      flex: 2 1 0%;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    #modelPage .model-title {
      font-size: 1.65rem; /* Slightly reduced for balance */
      font-weight: 700;
      color: #fff;
      margin-bottom: 0.2rem;
      line-height: 1.1;
    }
    #modelPage .model-desc {
      font-size: 1.13rem;
      color: #ccc;
      margin-bottom: 0.2rem;
      line-height: 1.5;
    }
    #modelPage .model-info-right {
      flex: 1 1 0%;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 0.7rem;
      min-width: 180px;
    }
    #modelPage .buy-row {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 1.1rem;
      margin-bottom: 0.2rem;
    }
    #modelPage .price-label {
      display: inline-block;
      font-size: 1.32rem; /* Slightly increased for emphasis */
      font-weight: 700;
      color: #fff;
      margin-left: 1rem; /* Clean, balanced spacing from button */
      letter-spacing: 0.01em;
      vertical-align: middle;
      line-height: 1.1;
      text-shadow: 0 2px 8px rgba(0,0,0,0.13);
    }
    #modelPage .model-actions-row {
      display: flex;
      flex-direction: row;
      gap: 1.2rem;
      margin-top: 1.2rem;
      margin-bottom: 0.5rem;
      align-items: center;
      justify-content: flex-start;
    }
    #modelPage .model-actions-row .btn {
      min-width: 140px;
      font-size: 1.08rem;
      border-radius: 10px;
      border: 2px solid #FFA500;
      background: transparent;
      color: #FFA500;
      font-weight: 600;
      transition: background 0.18s, color 0.18s, box-shadow 0.18s, transform 0.15s;
      box-shadow: none;
      white-space: nowrap;
      padding-left: 1.5rem;
      padding-right: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    #modelPage .model-actions-row .btn#listBtn {
      min-width: 160px; /* Ensure Add to List never wraps */
      padding-left: 1.7rem;
      padding-right: 1.7rem;
    }
    #modelPage .model-actions-row .btn:hover, #modelPage .model-actions-row .btn:focus {
      background: rgba(255,165,0,0.10);
      color: #ffb74d;
      border-color: #ffb74d;
      box-shadow: 0 4px 16px rgba(255,165,0,0.13);
      transform: scale(1.04);
    }
    /* --- Comments Section Improvements --- */
    #modelPage .comments-section {
      margin-top: 2.5rem;
      width: 100%;
      max-width: 600px;
      align-self: flex-start;
    }
    #modelPage .comments-header {
      font-size: 1.25rem;
      font-weight: 700;
      color: #fff;
      margin-bottom: 1.1rem;
      letter-spacing: -0.01em;
    }
    @media (max-width: 900px) {
      #modelPage .model-info-row {
        flex-direction: column;
        gap: 1.5rem;
        align-items: stretch;
      }
      #modelPage .model-info-right {
        align-items: flex-start;
        min-width: 0;
      }
      #modelPage .comments-section {
        max-width: 98vw;
      }
    }
    #modelPage .model-viewer-container {
      width: 100%;
      max-width: 900px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex: 1 1 0%;
    }
    #modelPage model-viewer, #modelPage img {
      width: 100%;
      max-width: 900px;
      height: min(70vh, 600px);
      margin: 0 auto;
      display: block;
      background: var(--card-bg);
      border-radius: var(--radius);
      object-fit: contain;
      box-shadow: 0 4px 24px rgba(0,0,0,0.25);
    }
    #modelPage .desc {
      width: 100%;
      max-width: 500px;
      margin: 2.5rem auto 0 auto;
      padding: 1.5rem 0 0 0;
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
    }
    #modelPage .desc h2 {
      margin-bottom: 0.5rem;
    }
    #modelPage .desc p {
      line-height: 1.5;
      margin-bottom: 1rem;
    }
    /* Back to Shop button at top */
    #modelPage .back-btn {
      margin-bottom: 2rem;
      margin-top: 0;
      margin-left: 2.5rem; /* Slightly more inward for better alignment */
      align-self: flex-start;
    }
    @media (max-width: 700px) {
      #modelPage .model-detail {
        flex-direction: column;
        align-items: center;
      }
      #modelPage .desc {
        max-width: 100vw;
        margin-left: 0;
      }
      #modelPage .back-btn {
        margin-left: 1.2rem; /* Also slightly more inward on mobile */
      }
    }
    /* --- Suggested/Related Models Sidebar --- */
    #modelPage .suggested {
      flex: 1 1 0%;
      min-width: 300px;
      max-width: 420px;
      margin-left: 32px; /* Move slightly to the right for better alignment */
      background: var(--card-bg);
      border-radius: 18px;
      padding: 0.5rem 0.7rem 1.2rem 0.7rem;
      box-shadow: 0 4px 24px rgba(0,0,0,0.32);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      align-items: center;
      margin-top: -48px; /* Move container even higher up */
    }
    #modelPage .suggested h4 {
      font-size: 1.23rem; /* Increased font size */
      font-weight: 700;
      color: #FFA500; /* Strong orange */
      letter-spacing: -0.01em;
      text-align: center; /* Center horizontally */
      width: 100%;
      padding-left: 0;
      margin-bottom: 1.1rem;
      font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
      text-shadow: 0 2px 12px rgba(255, 165, 0, 0.18), 0 1px 4px rgba(0,0,0,0.22); /* Subtle orange glow and shadow */
      border: none;
      background: none;
      display: block;
    }
    /* --- Load More Button for Suggested Models --- */
    #suggestedLoadMoreBtn {
      margin: 0.7rem auto 0 auto;
      display: block;
      background: #FFA500;
      color: #fff;
      font-weight: 700;
      font-size: 1.08rem;
      border: none;
      border-radius: 14px;
      padding: 0.7rem 2.2rem;
      box-shadow: 0 2px 8px rgba(255,165,0,0.13), 0 2px 8px rgba(0,0,0,0.10);
      transition: background 0.18s, box-shadow 0.18s, transform 0.15s, filter 0.18s;
      cursor: pointer;
      outline: none;
      letter-spacing: 0.01em;
    }
    #suggestedLoadMoreBtn:hover, #suggestedLoadMoreBtn:focus {
      background: #ffb74d;
      box-shadow: 0 6px 24px rgba(255,165,0,0.22), 0 4px 16px rgba(0,0,0,0.18);
      transform: scale(1.045);
      filter: brightness(1.08);
    }
    #modelPage .suggested-card {
      display: flex;
      flex-direction: column;
      align-items: stretch;
      background: #232326;
      border-radius: 12px; /* Slightly reduced from 14px */
      padding: 0;
      cursor: pointer;
      transition: box-shadow 0.18s, transform 0.16s, background 0.16s, border 0.16s;
      min-height: 220px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.18);
      border: 1.5px solid #232326;
      width: 100%;
      max-width: 310px; /* Slightly reduced card width */
      margin: 0 auto 0.08rem auto; /* Slightly reduced bottom margin */
      overflow: hidden;
      transition: box-shadow 0.2s ease, transform 0.16s, background 0.16s, border 0.16s;
    }
    #modelPage .suggested-card:hover {
      background: #29292d;
      box-shadow: 0 0 0 0 rgba(0,0,0,0.0), 0 0 24px 6px rgba(255,165,0,0.22), 0 4px 16px rgba(0,0,0,0.22); /* Soft orange glow */
      border: 1.5px solid #FFA500;
      transform: translateY(-2px) scale(1.015);
    }
    #modelPage .suggested-thumb {
      width: 100%;
      height: 270px; /* Slightly increased height for full model visibility */
      object-fit: cover;
      background: #18181a;
      border: none;
      border-radius: 0;
      box-shadow: none;
      margin: 0;
      display: block;
    }
    #modelPage .suggested-card-content {
      padding: 0.6rem 0.7rem 0.7rem 0.7rem; /* Further reduced padding for a shorter card */
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      background: none;
    }
    #modelPage .suggested-title {
      font-size: 1.08rem;
      color: #fff;
      font-weight: 700;
      line-height: 1.2;
      margin-bottom: 0.18rem;
      word-wrap: break-word;
      overflow-wrap: break-word;
      hyphens: auto;
      letter-spacing: -0.01em;
      text-align: left;
      width: 100%;
    }
    #modelPage .suggested-desc {
      color: #ccc;
      font-size: 0.98rem;
      margin-top: 0.3rem;
      width: 100%;
      text-align: left;
    }
    #modelPage .suggested-creator-row {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      width: 100%;
      margin-bottom: 0.1rem;
    }
    #modelPage .suggested-creator-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      object-fit: cover;
      background: #18181a;
      border: 1.5px solid #232326;
    }
    #modelPage .suggested-creator {
      font-size: 0.97rem;
      color: #aaa;
      font-weight: 500;
      opacity: 0.82;
      letter-spacing: 0.01em;
      text-align: left;
    }
    @media (max-width: 900px) {
      #modelPage .suggested {
        min-width: 100vw;
        max-width: 100vw;
        border-radius: 0;
        padding: 1.2rem 0.2rem;
      }
      #modelPage .suggested-card {
        max-width: 98vw;
        min-height: 180px;
        padding: 0.6rem 0.7rem 1rem 0.7rem;
        border-radius: 10px;
      }
      #modelPage .suggested-thumb {
        max-width: 98vw;
        height: 120px;
        border-radius: 7px;
      }
    }
    @media (max-width: 600px) {
      #modelPage .suggested {
        display: none;
      }
    }

    /* ---------- Model Viewer Styling ---------- */
    model-viewer {
      width:100%;
      height:400px;
      border-radius:var(--radius);
      background:var(--card-bg);
      --poster-color: transparent;
    }

    .model-viewer-container {
      position:relative;
      border-radius:var(--radius);
      overflow:hidden;
    }

    .view-toggle {
      position:absolute;
      top:10px;
      right:10px;
      background:rgba(0,0,0,0.7);
      color:white;
      border:none;
      padding:8px 12px;
      border-radius:6px;
      cursor:pointer;
      font-size:12px;
      z-index:10;
    }

    .view-toggle:hover {
      background:rgba(0,0,0,0.9);
    }

    /* ---------- Checkout Page ---------- */
    #checkoutPage {
      display:none; padding:2rem; min-height:100vh;
      background:var(--bg); color:var(--text);
    }
    #checkoutPage form {
      max-width:500px; margin:auto; display:flex; flex-direction:column; gap:1rem;
    }
    #checkoutPage label { display:flex; flex-direction:column; font-weight:600 }
    #checkoutPage input {
      padding:.75rem 1rem; border:none; border-radius:var(--radius);
      background:var(--card-bg); color:#fff; outline:none;
    }

    /* ---------- Contact Footer ---------- */
    footer {
      padding:2rem 1rem; text-align:center; background:#111;
      margin-top:2rem;
    }
    footer p { margin:.5rem 0 }

    /* ---------- Redesigned Login / Register Modal ---------- */
    #loginModal .modal-content {
      position:relative;
      width:100%; max-width:380px;
      padding:2rem 2rem 2.5rem;
      border-radius:var(--radius);
      background:var(--card-bg);
      box-shadow:0 8px 24px rgba(255,152,0,0.5), 0 8px 24px rgba(0,0,0,0.4); /* Added orange glow as in card hover */
    }
    #loginModal .modal-header {
      position:relative;
      display:flex; justify-content:center; align-items:center;
      margin-bottom:1.5rem;
    }
    #loginModal .modal-header h2 {
      font-size:2rem; font-weight:600; color:var(--text);
    }
    #loginModal .modal-header .close {
      position:absolute; top:-0.5rem; right:-0.5rem;
      width:32px; height:32px;
      border:none; border-radius:50%;
      background:transparent;
      color:var(--text); font-size:1.5rem; line-height:1;
      cursor:pointer;
      transition:background .2s;
    }
    #loginModal .modal-header .close:hover {
      background:rgba(255,255,255,0.08);
    }

    #loginModal label {
      width:100%; display:block; font-size:.85rem; font-weight:600;
      margin-bottom:.25rem; color:#ccc;
    }
    #loginModal input.login-input {
      width:100%;
      padding:.75rem 1rem;
      border:none; border-radius:var(--radius);
      background:#202024;
      color:#fff;
      box-shadow:0 2px 6px rgba(0,0,0,0.3);
      margin-bottom:1.25rem;
      outline:none;
    }
    #loginModal input.login-input::placeholder { color:#888 }

    /* row that holds Continue + Create Account */
    #loginModal .action-row{
      display:flex; gap:1rem; margin-bottom:1rem;
    }
    #loginModal .action-row .btn{
      flex:1; justify-content:center;
    }

    #loginModal .login-btn,
    #loginModal .register-submit{
      width:100%;
      display:block;
      padding:.75rem 1rem;
      border:none; border-radius:var(--radius);
      background:var(--accent);
      color:#fff; font-weight:600; text-align:center;
      cursor:pointer;
      transition:background-color .2s,transform .2s;
    }
    #loginModal .login-btn:hover,
    #loginModal .register-submit:hover {
      background:#ffb74d;
      transform:translateY(-1px);
    }

    .google-btn {
      width:100%; display:block;
      margin-top:1rem;
      padding:.75rem 1rem;
      border:none; border-radius:var(--radius);
      background:#fff; color:#444; font-weight:600; text-align:center;
      cursor:pointer;
      box-shadow:0 2px 6px rgba(0,0,0,0.25);
      transition:background-color .2s,transform .2s;
    }
    .google-btn:hover {
      background:#f1f1f1;
      transform:translateY(-1px);
    }

    #loginModal p {
      margin-top:1.25rem;
      font-size:.825rem;
      color:#999;
      text-align:center;
    }

    /* hide register view by default */
    #registerView{ display:none; }

    /* --- Navbar Search Bar --- */
    .navbar-search-container {
      flex: 1;
      display: none; /* hidden by default */
      justify-content: center;
      align-items: center;
      background: none;
      box-shadow: none;
      border: none;
    }
    .searchbar-wrapper {
      background: #232326;
      border: 2px solid transparent;
      transition: border-color 0.2s ease, background 0.2s ease, box-shadow 0.2s ease;
      display: flex;
      align-items: center;
      border-radius: 7px;
      padding: 0 0.5rem;
      width: 100%;
      max-width: 420px;
      min-width: 120px;
      box-shadow: none;
      height: 44px;
    }
    .searchbar-wrapper:focus-within {
      border-color: #ff9900;
      box-shadow: none;
    }
    .searchbar-wrapper:hover {
      background: #3a3a3a;
    }
    .searchbar-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 28px;
      height: 28px;
      margin-right: 0.5rem;
      margin-left: 0.25rem;
      user-select: none;
      pointer-events: none;
    }
    .searchbar-icon svg {
      width: 22px;
      height: 22px;
      display: block;
      fill: #fff;
      stroke: #fff;
      stroke-width: 2.2;
    }
    .styled-search {
      flex: 1;
      background: transparent;
      border: none;
      outline: none;
      color: #fff;
      font-size: 1rem;
      padding: 0.7rem 0 0.7rem 0;
      border-radius: 12px;
      box-shadow: none;
      margin: 0;
      min-width: 0;
    }
    .styled-search::placeholder {
      color: #aaa;
      opacity: 1;
      font-weight: 400;
    }
    @media (max-width: 600px) {
      .searchbar-wrapper {
        max-width: 90vw;
      }
    }
    /* --- Hide hero search on model page --- */
    .hero-search.hide { display: none !important; }

    /* ---------- Download Dropdown Panel ---------- */
    .download-dropdown {
      position: absolute;
      bottom: 100%;
      right: 0;
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.4);
      border: 1px solid rgba(255,255,255,0.1);
      display: none;
      flex-direction: column;
      gap: 0.5rem;
      min-width: 140px;
      z-index: 100;
      margin-bottom: 0.5rem;
      backdrop-filter: blur(10px);
    }
    .download-dropdown.active {
      display: flex;
      animation: fadeInUp 0.2s ease-out;
    }
    .download-dropdown::after {
      content: '';
      position: absolute;
      top: 100%;
      right: 20px;
      width: 0;
      height: 0;
      border-left: 6px solid transparent;
      border-right: 6px solid transparent;
      border-top: 6px solid var(--card-bg);
    }
    .download-option {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1rem;
      background: #232326;
      border: none;
      border-radius: 8px;
      color: #fff;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      text-decoration: none;
      font-size: 0.9rem;
    }
    .download-option:hover {
      background: #2a2a2d;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    .download-option:active {
      transform: translateY(0);
    }
    .download-option .format-icon {
      font-size: 1.1rem;
      opacity: 0.8;
    }
    .download-option .format-name {
      font-weight: 600;
    }
    .download-option .format-ext {
      opacity: 0.6;
      font-size: 0.8rem;
    }

    /* Position the download button container */
    .download-container {
      position: relative;
      display: inline-block;
    }

    /* Update buy button to be download button for free models */
    .download-btn {
      background: var(--accent);
      color: #fff;
      font-size: 1rem;
      font-weight: 600;
      padding: 0.5rem 1.25rem;
      border: none;
      border-radius: 8px;
      margin-left: auto;
      margin-top: 0.5rem;
      margin-bottom: 0;
      display: block;
      box-shadow: 0 2px 8px rgba(0,0,0,0.10);
      transition: background 0.18s, box-shadow 0.18s, transform 0.15s;
      min-width: 110px;
      max-width: 160px;
      text-align: center;
      cursor: pointer;
    }
    .download-btn:hover {
      background: #ffb74d;
      box-shadow: 0 4px 16px rgba(0,0,0,0.13);
      transform: translateY(-2px) scale(1.03);
    }
    @media (max-width: 700px) {
      .download-btn {
        margin-left: 0;
        width: 100%;
        max-width: 100%;
      }
    }

    /* Add card appear animation */
    .card-appear {
      animation: cardFadeInUp 0.5s cubic-bezier(.23,1.02,.47,.98);
    }
    @keyframes cardFadeInUp {
      from { opacity: 0; transform: translateY(30px);}
      to   { opacity: 1; transform: translateY(0);}
    }

    .btn-outline, .btn.btn-outline, #loginBtn.btn {
      background: transparent;
      color: var(--accent);
      border: 2px solid var(--accent);
      box-shadow: none;
      font-weight: 600;
      border-radius: var(--radius);
      transition: all 0.2s ease-in-out;
    }
    .btn-outline:hover, .btn-outline:focus,
    #loginBtn.btn:hover, #loginBtn.btn:focus {
      background: rgba(255,153,0,0.10);
      color: #ffa833;
      border-color: #ffa833;
      box-shadow: none;
    }
    @media (max-width:600px) {
      nav ul { display: none; }
    }

    /* --- No Results Message --- */
    #no-results-message {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      font-size: 32px;
      font-weight: bold;
      height: 60vh;
      color: white;
      margin-top: 20px;
      margin-left: 2vw;
    }

    /* ---------- Form Validation & Error Styling ---------- */
    .input-error {
      border: 2px solid #ff4444 !important;
      background: rgba(255, 68, 68, 0.1) !important;
    }
    
    .input-success {
      border: 2px solid #4CAF50 !important;
      background: rgba(76, 175, 80, 0.1) !important;
    }
    
    .error-message {
      color: #ff4444;
      font-size: 0.8rem;
      margin-top: -1rem;
      margin-bottom: 1rem;
      display: none;
      animation: fadeIn 0.3s ease-in;
    }
    
    .error-message.show {
      display: block;
    }
    
    .success-message {
      color: #4CAF50;
      font-size: 0.9rem;
      margin-top: 1rem;
      text-align: center;
      display: none;
      animation: fadeIn 0.3s ease-in;
    }
    
    .success-message.show {
      display: block;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }
    
    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid transparent;
      border-top: 2px solid #fff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .password-strength {
      margin-top: -1rem;
      margin-bottom: 1rem;
      font-size: 0.8rem;
    }
    
    .password-strength-bar {
      height: 4px;
      background: #333;
      border-radius: 2px;
      margin-top: 0.5rem;
      overflow: hidden;
    }
    
    .password-strength-fill {
      height: 100%;
      transition: all 0.3s ease;
      border-radius: 2px;
    }
    
    .strength-weak { background: #ff4444; width: 25%; }
    .strength-fair { background: #ffa726; width: 50%; }
    .strength-good { background: #ffeb3b; width: 75%; }
    .strength-strong { background: #4CAF50; width: 100%; }
    
    .strength-text {
      margin-top: 0.25rem;
      font-size: 0.75rem;
    }
    
    .strength-weak-text { color: #ff4444; }
    .strength-fair-text { color: #ffa726; }
    .strength-good-text { color: #ffeb3b; }
    .strength-strong-text { color: #4CAF50; }

    .profile-avatar {
      width: 28px;
      height: 28px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 0.5em;
      background: #232326;
      display: inline-block;
      vertical-align: middle;
      /* Remove any scaling on hover */
      transition: none;
    }
    .profile-btn-combo {
      display: inline-flex;
      align-items: center;
      gap: .5rem;
      /* Inherit all sizing, padding, font, border, etc. from .btn and .btn-outline */
      /* No custom padding, font-size, or border overrides here */
    }
    .profile-btn-combo:hover, .profile-btn-combo:focus {
      /* Only color/outline changes, no transform or custom padding */
      background: rgba(255,153,0,0.10);
      color: #ffa833;
      border-color: #ffa833;
      outline: none;
      transform: none;
    }
    .profile-btn-combo .profile-name {
      font-size: 1rem;
      font-weight: 600;
      color: inherit;
      margin: 0;
      padding: 0;
      line-height: 1;
      display: inline-block;
      vertical-align: middle;
      /* Remove scaling on hover */
      transition: none;
    }
    .user-menu-header {
      display: flex;
      align-items: center;
      gap: 0.6em;
      padding: 0.5rem 0.2rem 0.5rem 0.2rem;
      border-bottom: 1px solid #444;
      margin-bottom: 0.2rem;
      /* Remove scaling on hover */
      transition: none;
    }
    .user-menu-header .profile-avatar {
      width: 32px;
      height: 32px;
      margin-right: 0.5em;
      transition: none;
    }
    .user-menu-header .profile-name {
      font-size: 1.08rem;
      font-weight: 600;
      color: #fff;
      margin: 0;
      padding: 0;
      transition: none;
    }
    /* Dropdown menu option hover highlight */
    .user-menu-option {
      width: 100%;
      padding: 0.5rem;
      background: none;
      border: none;
      color: #fff;
      cursor: pointer;
      text-align: left;
      font-size: 1rem;
      border-radius: 8px;
      transition: background 0.16s;
      margin-bottom: 2px;
    }
    .user-menu-option:hover, .user-menu-option:focus {
      background: #29292d;
      color: #ffb74d;
      outline: none;
    }

    /* --- Like/List Buttons --- */
    .like-btn, .list-btn {
      background: #232326;
      color: #ff9800;
      border: 2px solid #ff9800;
      font-size: 1rem;
      font-weight: 600;
      border-radius: 8px;
      padding: 0.5rem 1.25rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.10);
      transition: background 0.18s, box-shadow 0.18s, color 0.18s, border 0.18s, transform 0.15s;
      min-width: 110px;
      max-width: 160px;
      text-align: center;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transform-origin: center center; /* Ensure scaling is centered */
      margin-left: 4px; /* Nudge buttons slightly right to prevent overflow */
    }
    .like-btn:hover, .list-btn:hover {
      background: #ff9800;
      color: #fff;
      border: 2px solid #ffb74d;
      transform: scale(1.03); /* Remove translateY to prevent shifting */
    }
    .like-btn.liked, .list-btn.listed {
      background: #ff9800;
      color: #fff;
      border: 2px solid #ffb74d;
    }
    .like-btn.liked #likeIcon {
      color: #fff;
      font-weight: bold;
      font-size: 1.2em;
      text-shadow: 0 2px 8px rgba(255,152,0,0.18);
    }
    .list-btn.listed #listIcon {
      color: #fff;
      font-weight: bold;
      font-size: 1.2em;
      text-shadow: 0 2px 8px rgba(255,152,0,0.18);
    }
    .like-btn #likeIcon {
      font-size: 1.2em;
      color: #ff9800;
      transition: color 0.18s;
    }
    .list-btn #listIcon {
      font-size: 1.2em;
      color: #ff9800;
      transition: color 0.18s;
    }

    /* --- Likes/List Page Layout --- */
    #likesListPage {
      min-height: 80vh;
      background: var(--bg);
      color: var(--text);
      display: none;
      padding: 2.5rem 0 2.5rem 0;
      width: 100%;
    }
    .likes-list-container {
      max-width: 1280px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
    }
    #backLikesList {
      align-self: flex-start;
      margin-left: 2rem;
      margin-bottom: 1.5rem;
      margin-top: 0;
    }
    @media (max-width: 700px) {
      #backLikesList {
        margin-left: 1rem;
      }
    }
    #likesListTitle {
      text-align: center;
      margin-bottom: 2rem;
      width: 100%;
    }
    #likesListGallery.gallery {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      justify-content: center;
      width: 100%;
      max-width: 1000px;
      margin: 0 auto;
    }
    @media (max-width: 700px) {
      #likesListGallery.gallery {
        grid-template-columns: 1fr;
        max-width: 98vw;
      }
    }

    .login-required-btn-group {
      margin-top: 0.2rem !important;
      display: flex;
      justify-content: center;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    /* Responsive style for price label */
    @media (max-width: 700px) {
      #priceLabel {
        display: block !important;
        margin-left: 0;
        margin-top: 0.5rem;
        font-size: 1rem;
      }
    }

    /* --- Purchased Page Custom Styles --- */
    #purchasedListPage {
      min-height: 100vh;
      background: var(--bg);
      color: var(--text);
      display: none;
      padding: 2.5rem 0 2.5rem 0;
    }
    .purchased-list-container {
      max-width: 1280px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      position: relative;
    }
    #backPurchasedList {
      position: absolute;
      top: 1.5rem;
      left: 1.5rem;
      margin: 0;
      z-index: 2;
      padding: 0.7rem 1.4rem;
      font-size: 1.08rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.10);
    }
    #purchasedListTitle {
      font-size: 2.1rem;
      font-weight: 700;
      text-align: center;
      margin-top: 0.7rem;
      margin-bottom: 2.2rem;
      letter-spacing: -0.01em;
    }
    @media (max-width: 700px) {
      .purchased-list-container {
        padding: 0 0.5rem;
      }
      #backPurchasedList {
        top: 1rem;
        left: 1rem;
        font-size: 1rem;
        padding: 0.6rem 1.1rem;
      }
      #purchasedListTitle {
        font-size: 1.35rem;
        margin-top: 0.5rem;
        margin-bottom: 1.3rem;
      }
    }
    @media (max-width: 500px) {
      #purchasedListTitle {
        font-size: 1.1rem;
        margin-top: 0.3rem;
        margin-bottom: 1rem;
      }
      #backPurchasedList {
        top: 0.5rem;
        left: 0.5rem;
        padding: 0.5rem 0.8rem;
      }
    }
    /* Add responsive style for download-btn on purchased page */
    @media (max-width: 700px) {
      .download-btn {
        width: 100%;
        max-width: 100%;
        margin-left: 0;
      }
    }

    #signupBtn, #loginBtn.btn {
      font-size: 1.05rem;
      padding: 0.45rem 1.8rem;
      border-radius: 14px;
      min-width: 112px;
      min-height: 44px;
      letter-spacing: 0.01em;
    }
    @media (max-width: 600px) {
      #signupBtn, #loginBtn.btn {
        font-size: 0.97rem;
        padding: 0.4rem 1rem;
        min-width: 90px;
        min-height: 36px;
      }
    }

    /* --- Login Modal Animation Additions --- */
    .modal.login-animate {
      /* Ensure modal is visible for animation */
      display: flex !important;
      pointer-events: auto;
    }
    .modal.login-animate .modal-content {
      /* Start hidden for animation */
      opacity: 0;
      transform: translateY(40px) scale(0.98);
      transition: opacity 0.45s cubic-bezier(.4,.01,.22,1), transform 0.45s cubic-bezier(.4,.01,.22,1);
    }
    .modal.login-animate.active .modal-content {
      /* Animate in: fade and slide up */
      opacity: 1;
      transform: translateY(0) scale(1);
      transition: opacity 0.45s cubic-bezier(.4,.01,.22,1), transform 0.45s cubic-bezier(.4,.01,.22,1);
    }
    .modal.login-animate.closing .modal-content {
      /* Animate out: fade and slide down */
      opacity: 0;
      transform: translateY(40px) scale(0.98);
      transition: opacity 0.38s cubic-bezier(.4,.01,.22,1), transform 0.38s cubic-bezier(.4,.01,.22,1);
    }
    /* Prevent pointer events during closing animation */
    .modal.login-animate.closing {
      pointer-events: none;
    }
    /* Responsive: ensure modal-content stays centered and scales well */
    @media (max-width: 600px) {
      .modal.login-animate .modal-content {
        width: 98vw !important;
        max-width: 98vw !important;
        min-width: 0 !important;
        padding: 1.2rem 0.5rem 2rem 0.5rem !important;
      }
    }
    /* --- Enlarged Log In and Sign Up Buttons for Usability --- */
    .btn.enlarged, .btn.btn-outline.enlarged, #loginBtn.btn.enlarged, #signupBtn.enlarged {
      font-size: 1.13rem !important; /* Reduced from 1.23rem */
      padding: 0.6rem 2.2rem !important; /* Reduced padding slightly */
      min-width: 132px !important; /* Slightly reduced min-width */
      min-height: 50px !important; /* Slightly reduced min-height */
      border-radius: 16px !important;
      letter-spacing: 0.01em;
    }
    @media (max-width: 600px) {
      .btn.enlarged, .btn.btn-outline.enlarged, #loginBtn.btn.enlarged, #signupBtn.enlarged {
        font-size: 1.03rem !important; /* Reduced from 1.08rem */
        padding: 0.5rem 1rem !important; /* Reduced padding slightly */
        min-width: 100px !important; /* Slightly reduced min-width */
        min-height: 40px !important; /* Slightly reduced min-height */
      }
    }
    /* --- Subtle shadow for modal for more polish --- */
    .modal.login-animate .modal-content {
      box-shadow: 0 12px 48px rgba(0,0,0,0.38), 0 2px 8px rgba(0,0,0,0.10);
    }
    /* --- Overlay fade-in/out for modal background --- */
    .modal.login-animate {
      background: rgba(0,0,0,0.0);
      transition: background 0.45s cubic-bezier(.4,.01,.22,1);
    }
    .modal.login-animate.active {
      background: rgba(0,0,0,0.6);
      transition: background 0.45s cubic-bezier(.4,.01,.22,1);
    }
    .modal.login-animate.closing {
      background: rgba(0,0,0,0.0);
      transition: background 0.38s cubic-bezier(.4,.01,.22,1);
    }
    /* --- Prevent scroll when modal is open --- */
    body.login-modal-open {
      overflow: hidden !important;
    }

    /* Add underline hover effect for orange links in login/signup modals */
    #loginModal a,
    #loginModal a:visited {
      color: var(--accent);
      font-weight: 600;
      text-decoration: none;
      transition: color 0.18s;
      position: relative;
    }
    #loginModal a:hover, #loginModal a:focus {
      text-decoration: underline;
    }

    .checkout-order-card {
      background: #232326;
      border-radius: 18px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.25);
      max-width: 420px;
      margin: 0 auto 0 auto;
      padding: 2.1rem 2.1rem 2.1rem 2.1rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .checkout-order-content {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: 2.2rem;
      width: 100%;
    }
    .checkout-order-text {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      justify-content: center;
      min-width: 160px;
      flex: 1 1 0%;
    }
    .checkout-model-name {
      font-size: 1.25rem;
      font-weight: 700;
      color: #fff;
      text-align: right;
      margin-bottom: 0.7rem;
    }
    .checkout-model-price {
      font-size: 1.18rem;
      font-weight: 700;
      color: #fff;
      text-align: right;
      margin-bottom: 0.5rem;
    }
    .checkout-model-meta {
      font-size: 0.98rem;
      color: #bbb;
      text-align: right;
      margin-top: 0.2rem;
      font-weight: 500;
    }
    .checkout-order-img-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .checkout-model-img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 12px;
      box-shadow: 0 2px 6px rgba(0,0,0,.3);
      background: #18181a;
      transition: transform 0.18s cubic-bezier(.4,.01,.22,1), box-shadow 0.18s;
      cursor: pointer;
    }
    .checkout-model-img:hover {
      transform: scale(1.07);
      box-shadow: 0 8px 24px rgba(255,152,0,0.18), 0 4px 16px rgba(0,0,0,0.22);
    }
    .checkout-secure-line {
      text-align: center;
      color: #aaa;
      font-size: 0.98rem;
      margin-top: 2.2rem;
      margin-bottom: 0.5rem;
      letter-spacing: 0.01em;
      opacity: 0.85;
    }
    @media (max-width: 600px) {
      .checkout-order-card {
        max-width: 98vw;
        padding: 1.2rem 0.5rem 1.2rem 0.5rem;
      }
      .checkout-order-content {
        flex-direction: column-reverse;
        gap: 1.2rem;
        align-items: center;
      }
      .checkout-order-text {
        align-items: center;
        text-align: center;
        min-width: 0;
      }
      .checkout-model-name, .checkout-model-price, .checkout-model-meta {
        text-align: center !important;
        align-items: center !important;
      }
      .checkout-model-img {
        width: 110px;
        height: 110px;
      }
    }

    /* --- Custom Login/Signup Button Adjustments --- */
    .login-btn-custom {
      color: #e0e0e0 !important;
      border: 2px solid #e0e0e0 !important;
      background: transparent !important;
      font-weight: 600;
      min-width: 100px !important;
      min-height: 44px;
      font-size: 1.05rem;
      padding: 0.45rem 1.3rem !important;
      letter-spacing: 0.01em;
      transition: background 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s, transform 0.2s;
    }
    .login-btn-custom:hover, .login-btn-custom:focus {
      background: #232326 !important;
      color: #fafafa !important;
      border-color: #bdbdbd !important;
      box-shadow: none;
      transform: none;
    }
    .signup-btn-custom {
      min-width: 100px !important;
      min-height: 44px;
      font-size: 1.05rem;
      padding: 0.45rem 1.3rem !important;
      letter-spacing: 0.01em;
      transition: background 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s, transform 0.2s;
    }
    .signup-btn-custom:hover, .signup-btn-custom:focus {
      background: rgba(255,153,0,0.10);
      color: #ffa833;
      border-color: #ffa833;
      box-shadow: none;
      transform: none;
    }
    /* Remove enlarge-on-hover for signup */
    .signup-btn-custom.enlarged, .signup-btn-custom:active, .signup-btn-custom:hover {
      font-size: 1.05rem !important;
      padding: 0.45rem 1.3rem !important;
      min-width: 100px !important;
      min-height: 44px !important;
      border-radius: 14px !important;
    }
    @media (max-width: 600px) {
      .login-btn-custom, .signup-btn-custom {
        font-size: 0.97rem !important;
        padding: 0.4rem 0.8rem !important;
        min-width: 80px !important;
        min-height: 36px !important;
      }
    }
  </style>
</head>
<body>

  <!-- NAVBAR -->
  <nav id="navbar">
    <div class="logo">
     <img src="https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjI1NTkzNy5wbmc=/250x600/8NDQ9Y.png"
     alt="  polyVerse logo"
           alt="polyVerse logo" style="height:32px;width:32px;border-radius:6px">
      <span style="font-weight:600;font-size:1.1rem">polyVerse</span>
    </div>
    <div class="navbar-search-container" id="top-searchbar">
      <div class="searchbar-wrapper">
        <span class="searchbar-icon">
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <circle cx="11" cy="11" r="7" stroke="#fff" stroke-width="2.2" fill="none"/>
            <line x1="16.2" y1="16.2" x2="21" y2="21" stroke="#fff" stroke-width="2.2" stroke-linecap="round"/>
          </svg>
        </span>
        <input
          id="navbarSearch"
          name="nohistory"
          type="search"
          placeholder="Search"
          class="navbar-search styled-search"
          autocomplete="off"
          autocorrect="off"
          autocapitalize="off"
          spellcheck="false"
        />
      </div>
    </div>
    <ul>
      <li><button class="btn btn-outline login-btn-custom" id="loginBtn">Login</button></li>
      <li><button class="btn btn-outline signup-btn-custom" id="signupBtn">Sign Up</button></li>
    </ul>
  </nav>

  <!-- HERO -->
  <section class="hero" id="homepage-banner">
    <div class="hero-headline">Grab a rigged low-poly character in seconds.</div>
    <div class="hero-subline">Over 20 unique models. Download and create instantly.</div>
    <div class="hero-search">
      <div class="modern-search-wrapper">
        <input
          id="heroSearch"
          type="search"
          placeholder="Search for anything"
          autocomplete="off"
          autocorrect="off"
          autocapitalize="off"
          spellcheck="false"
        />
        <span class="search-icon-right">
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <circle cx="11" cy="11" r="7" stroke="#ff7e5f" stroke-width="2.2" fill="none"/>
            <line x1="16.2" y1="16.2" x2="21" y2="21" stroke="#ff7e5f" stroke-width="2.2" stroke-linecap="round"/>
          </svg>
        </span>
      </div>
    </div>
  </section>

  <!-- GALLERY -->
  <main id="mainContent">
    <button class="btn back-btn" id="backToShopSearch" style="display:none;position:absolute;top:120px;left:2vw;z-index:20;font-size:1.09rem;padding:0.62rem 1.7rem;min-width:124px;min-height:44px;">← Back to Shop</button>
    <section class="gallery" id="gallery"></section>
  </main>

  <!-- MODEL DETAIL PAGE -->
  <section id="modelPage">
    <button class="btn back-btn" id="backModel">← Back to Shop</button>
    <div class="model-detail">
      <div class="model-viewer-container">
        <div class="model-card-section">
          <button class="view-toggle" id="viewToggle">3D View</button>
          <img id="modelImg" class="model-media" src="" alt="Model preview">
          <model-viewer 
            id="modelViewer"
            class="model-media"
            camera-controls 
            auto-rotate 
            shadow-intensity="1"
            environment-image="neutral"
            exposure="0.5"
            shadow-softness="0.5"
            style="display:none;">
          </model-viewer>
          <div class="model-info-row">
            <div class="model-info-left">
              <div class="model-title" id="modelTitle"></div>
              <div class="model-desc" id="modelDesc"></div>
            </div>
            <div class="model-info-right">
              <div class="buy-row">
                <button class="btn buy-btn" id="buyNowBtn">Buy Now</button>
                <span class="price-label" id="priceLabel" style="display:none;"></span>
                <button class="download-btn" id="downloadBtn" style="display:none;">Download</button>
              </div>
              <div class="download-dropdown" id="downloadDropdown">
                <a href="#" class="download-option" data-format="fbx">
                  <span class="format-icon">📦</span>
                  <span class="format-name">FBX</span>
                  <span class="format-ext">.fbx</span>
                </a>
              </div>
            </div>
          </div>
          <div class="model-actions-row" id="modelActions" style="display:none;">
            <button class="btn like-btn" id="likeBtn" title="Like this model">
              <span id="likeIcon">♡</span> <span>Like</span>
            </button>
            <button class="btn list-btn" id="listBtn" title="Add to My List">
              <span id="listIcon">＋</span> <span>Add to List</span>
            </button>
          </div>
          <div class="comments-section">
            <div class="comments-header" id="commentsHeader"></div>
            <div id="commentsSection"></div>
          </div>
        </div>
      </div>
      <aside class="suggested" id="suggestedModels">
        <h4>Suggested Models</h4>
        <!-- Suggested models will be rendered here -->
      </aside>
    </div>
  </section>

  <!-- CHECKOUT PAGE -->
  <section id="checkoutPage">
    <button class="btn back-btn" id="backCheckout">← Back</button>
    <h2 style="text-align:center;margin-bottom:1rem;">Checkout</h2>
    <!-- Order summary card -->
    <div id="checkoutOrderCard" class="checkout-order-card">
      <div class="checkout-order-content">
        <div class="checkout-order-text">
          <div id="checkoutModelName" class="checkout-model-name">Model Name</div>
          <div id="checkoutModelPrice" class="checkout-model-price">$1.00 USD</div>
          <div id="checkoutModelMeta" class="checkout-model-meta">Formats: FBX, GLTF | Rigged</div>
        </div>
        <div class="checkout-order-img-wrapper">
          <img id="checkoutModelImg" src="" alt="Model preview" class="checkout-model-img">
        </div>
      </div>
    </div>
    <!-- End order summary card -->
    <div style="height:2.2rem;"></div>
    <div id="paypal-button-container" style="max-width:400px;margin:2rem auto 0 auto;"></div>
    <button class="btn" id="paidDownloadBtn" style="display:none;background:#ff9800;color:#fff;font-weight:600;font-size:1.1rem;margin:2rem auto 0 auto;max-width:400px;width:100%;border-radius:10px;box-shadow:0 2px 8px rgba(0,0,0,0.10);padding:0.85rem 0;">Download FBX Model</button>
    <div class="checkout-secure-line">🔒 Secure checkout powered by PayPal</div>
  </section>

  <!-- CONTACT INFO FOOTER -->
  <footer>
    <h3>Contact Us</h3>
    <p>Email: korenbarshalom@gmail.com</p>
    <p>Phone: 052-221-5113</p>
  </footer>

  <!-- LOGIN / REGISTER MODAL -->
  <div class="modal" id="loginModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle">Log In</h2>
        <button class="close" data-close>&times;</button>
      </div>

      <!-- ===== LOGIN VIEW ===== -->
      <div id="loginView">
        <label>Username</label>
        <input type="text" class="login-input" id="loginUsername" placeholder="Your username" required>
        <div class="error-message" id="loginUsernameError"></div>

        <label>Password</label>
        <input type="password" class="login-input" id="loginPassword" placeholder="Your password" required>
        <div class="error-message" id="loginPasswordError"></div>

        <div class="action-row" id="loginActionRow">
          <button class="login-btn" id="loginSubmitBtn">Continue</button>
        </div>
        <div id="loginSignupText" style="text-align:center; margin-bottom:1rem; font-size:0.93rem; color:#aaa;">
          Not have an account yet? <a href="#" id="loginToSignup" style="color:var(--accent); font-weight:600;">Sign up</a>
        </div>

        <div class="success-message" id="loginSuccess"></div>

        <!-- Google Sign-In button container -->
        <div id="g_id_signin" style="display:flex;justify-content:center;margin-top:1.2rem;margin-bottom:0.5rem;"></div>
        <p id="googleLoginMsg" style="text-align:center;font-size:0.92rem;color:#888;margin-top:0.5rem;">Or sign in with Google</p>
      </div>

      <!-- ===== REGISTER VIEW ===== -->
      <div id="registerView">
        <label>Full Name</label>
        <input type="text" class="login-input" id="registerName" placeholder="Your Name" required>
        <div class="error-message" id="nameError"></div>

        <label>Username</label>
        <input type="text" class="login-input" id="registerUsername" placeholder="Choose a username" required>
        <div class="error-message" id="usernameError"></div>

        <label>Password</label>
        <input type="password" class="login-input" id="registerPassword" placeholder="Choose a strong password" required>
        <div class="password-strength" id="passwordStrength">
          <div class="password-strength-bar">
            <div class="password-strength-fill" id="strengthFill"></div>
          </div>
          <div class="strength-text" id="strengthText"></div>
        </div>
        <div class="error-message" id="passwordError"></div>

        <button class="register-submit" id="registerSubmitBtn">Create Account</button>
        <div class="success-message" id="registerSuccess"></div>

        <!-- Google Sign-Up button container -->
        <div id="g_id_signup" style="display:flex;justify-content:center;margin-top:1.2rem;margin-bottom:0.5rem;"></div>
        <p id="googleSignupMsg" style="text-align:center;font-size:0.92rem;color:#888;margin-top:0.5rem;">Or sign up with Google</p>
        <p style="margin-top:.75rem;">Already have an account? <a href="#" id="backToLogin" style="color:var(--accent);">Log In</a></p>
      </div>
    </div>
  </div>

  <!-- Add a login-required modal if not present -->
  <div class="modal" id="loginRequiredModal">
    <div class="modal-content" style="max-width:340px;text-align:center;">
      <div style="font-size:2.2rem;margin-bottom:0.5rem;">🔒</div>
      <h2 style="margin-bottom:0.1rem;">Login Required</h2>
      <p style="margin-bottom:0.5rem;">You need to log in to like models or add them to your list.</p>
      <div class="login-required-btn-group" style="margin-top:0.2rem; display:flex; justify-content:center; gap:0.75rem; flex-wrap:wrap;">
        <button class="btn" id="loginRequiredBtn">Log In</button>
        <button class="btn btn-outline" id="loginRequiredClose">Cancel</button>
      </div>
    </div>
  </div>

  <script src="https://www.paypal.com/sdk/js?client-id=AWOtXB5c_Nnjr1Um-H3SWsgG3M5yaRAjK3uWrNU5WpkBFW7XoN9G_3USs5dpDEWyRJRne1sqPh9giL_J&currency=USD"></script>
  <!-- Google Identity Services -->
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <!-- jwt-decode for Google login -->
  <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js"></script>
  <script type="module">
    // === DATA & HOOKS ===
    const DEFAULT_PROFILE_IMAGE = 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk1ODQ0MS5wbmc=/250x600/j0omjw.png';
    const models = [
      { id: 1, title: 'Human Character Base', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg5NTQwMy5wbmc=/250x600/vaWBiI.png', desc: 'A versatile low-poly human base mesh, ready for your animations and rigs.', src: 'A20.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx1.fbx', glb: 'A20.glb', gltf: 'A20.gltf' },
      { id: 2, title: 'Human Character Base', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg5NTM1NS5wbmc=/250x600/iV5gql.png', desc: 'Alternate low-poly human model optimized for mobile and VR.', src: '3DHuman11.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx.fbx', glb: '3DHuman11.glb', gltf: '3DHuman11.gltf' },
      { id: 3, title: 'Player Model', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg5NTQ4NC5wbmc=/250x600/FAM6Ft.png', desc: 'A stylized player avatar with simple topology for game characters.', src: 'A19.glb', availableFormats: ['glb', 'fbx', 'gltf'], fbx: '3DCustomBean.fbx', glb: 'A19.glb', gltf: 'A19.gltf' },
      { id: 4, title: 'Farmer', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg1NTgzNy5wbmc=/250x600/xUXRMO.png', desc: 'A medieval knight in low-poly style.', src: 'AFramer.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx6.fbx', glb: 'AFramer.glb', gltf: 'AFramer.gltf' },
      { id: 5, title: 'Space Marine', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg1NTgzOC5wbmc=/250x600/ATA380.png', desc: 'A ready-to-animate archer character.', src: 'Aspacemarine.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx7.fbx', glb: 'Aspacemarine.glb', gltf: 'Aspacemarine.gltf' },
      { id: 6, title: 'Police Officer', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg1NTgzOS5wbmc=/250x600/tht5cv.png', desc: 'Low-poly steampunk robot NPC.', src: 'Police.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx8.fbx', glb: 'Police.glb', gltf: 'Police.gltf' },
      { id: 7, title: 'Scientist', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg1NTg0MC5wbmc=/250x600/iZBPRT.png', desc: 'Blocky mage perfect for voxel games.', src: '3Dcharcter4.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3D1characterfbx4.fbx', glb: 'AS.glb', gltf: 'AS.gltf' },
      { id: 8, title: 'Astronaut', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTg1NTg0MS5wbmc=/250x600/lZnMKc.png', desc: 'Futuristic soldier rigged for animation.', src: 'AS1.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DHumanfbx10.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 9, title: 'Chef', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE4MC5wbmc=/250x600/89K1oc.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter9.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter9.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 10, title: 'Samurai', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE3OC5wbmc=/250x600/0DKTnv.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter6.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter6.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 11, title: 'Builder', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE4MS5wbmc=/250x600/%2BXIu8o.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter111.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter3.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 12, title: 'Medic', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE3OS5wbmc=/250x600/yLs1Oq.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter1.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter1.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'Human Model', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE3Ni5wbmc=/250x600/YWf1vV.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter10.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter10.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 14, title: 'Fire Fighter', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMTk0NTE3Ny5wbmc=/250x600/S%2FDg5u.png', desc: 'Futuristic soldier rigged for animation.', src: '3Dcharcter5.gltf', availableFormats: ['gltf', 'fbx', 'glb'], fbx: '3DLowPolyCharacter5.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'SteelGuard', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMTU2MS5wbmc=/250x600/NCG7Kb.png', desc: 'Armored robot with drill arm, rigged and ready for animation.', src: 'Villan11.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan1.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'InfernoBot', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMTgwNy5wbmc=/250x600/IJYtyS.png', desc: 'Flaming armored bot rigged and ready for animation.', src: 'Villan12.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan2.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'Emerald Mage', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMTk2NS5wbmc=/250x600/ky9C0L.png', desc: ' Mystic green sorcerer rigged for animation.', src: 'Villan13.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan3.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'Frost King', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMjA2OS5wbmc=/250x600/%2F0h3XD.png', desc: ' Ice-armored mage rigged for animation.', src: 'Villan14.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan4.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
      { id: 13, title: 'Nightblade', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMjEzNy5wbmc=/250x600/OD1IR5.png', desc: ' Shadow assassin rigged for animation.', src: 'Villan15.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan5.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
       { id: 13, title: 'Cinderblade', price: 1, thumb: 'https://img.itch.zone/aW1hZ2UvMzY3MzAwMi8yMjIwMjIxMy5wbmc=/250x600/tJjTaP.png', desc: 'Flame rogue rigged for animation.', src: 'Villan16.glb', availableFormats: ['gltf', 'fbx', 'glb'], fbx: 'Villan6.fbx', glb: 'AS1.glb', gltf: 'AS1.gltf' },
    ];

    // DOM refs
    const gallery      = document.getElementById('gallery');
    const homepageBanner = document.getElementById('homepage-banner');
    const topSearchbar   = document.getElementById('top-searchbar');
    const heroSearch     = document.getElementById('heroSearch');
    const loginBtn     = document.getElementById('loginBtn');
    const loginModal   = document.getElementById('loginModal');
    const modelPage    = document.getElementById('modelPage');
    const modelImg     = document.getElementById('modelImg');
    const modelTitle   = document.getElementById('modelTitle');
    const modelDesc    = document.getElementById('modelDesc');
    const modelViewer  = document.getElementById('modelViewer');
    const viewToggle   = document.getElementById('viewToggle');
    const backModel    = document.getElementById('backModel');
    const buyNowBtn    = document.getElementById('buyNowBtn');
    const mainContent  = document.getElementById('mainContent');
    const checkoutPage = document.getElementById('checkoutPage');
    const backCheckout = document.getElementById('backCheckout');
    // NEW: Like/List buttons
    const modelActions = document.getElementById('modelActions');
    const likeBtn = document.getElementById('likeBtn');
    const listBtn = document.getElementById('listBtn');
    const likeIcon = document.getElementById('likeIcon');
    const listIcon = document.getElementById('listIcon');

    // NEW refs for login/register toggle
    const loginView   = document.getElementById('loginView');
    const registerView= document.getElementById('registerView');
    const modalTitle  = document.getElementById('modalTitle');
    const createAccBtn= document.getElementById('createAccountBtn');
    const backToLogin = document.getElementById('backToLogin');
    const loginToSignup = document.getElementById('loginToSignup');

    const navbarSearch   = document.getElementById('navbarSearch');
    const suggestedModels = document.getElementById('suggestedModels');

    // NEW refs for download functionality
    const downloadBtn = document.getElementById('downloadBtn');
    const downloadDropdown = document.getElementById('downloadDropdown');

    // Track last opened model for context-aware back
    let lastOpenedModel = null;
    
    // Track if we're coming from homepage (for suggestion randomization)
    let comingFromHomepage = true;

    // Track currently rendered model IDs
    let lastRenderedIds = new Set();
    // Track last search query to control animation
    let lastSearchQuery = '';

    // --- Gallery ---
    function renderGallery(list, animateAll = false){
      // Hide purchased page if present
      const purchasedListPage = document.getElementById('purchasedListPage');
      if (purchasedListPage) purchasedListPage.style.display = 'none';
      // Get IDs of new results
      const newIds = new Set(list.map(m => m.id));
      // Cards that are new (not in lastRenderedIds)
      const newlyAddedIds = list.filter(m => !lastRenderedIds.has(m.id)).map(m => m.id);

      gallery.innerHTML='';
      if (list.length === 0) {
        // Show centered no-results message with correct structure and style
        gallery.innerHTML = `
          <div id="no-results-message">
            <div>¯\\_(ツ)_/¯</div>
            <div>No results</div>
          </div>
        `;
        lastRenderedIds = newIds;
        return;
      }
      list.forEach(m=>{
        const card=document.createElement('div');
        card.className='card';
        card.innerHTML=`
          <img src="${m.thumb}" alt="${m.title}">
          <div class="info">
            <h3>${m.title}</h3>
            <p>${m.price?`$${m.price.toFixed(2)}`:'Free'}</p>
          </div>`;
        card.onclick=()=>openModelPage(m, true);

        // Animate all cards if requested (e.g. on new search or homepage reset)
        if (animateAll || newlyAddedIds.includes(m.id)) {
          card.classList.add('card-appear');
          card.addEventListener('animationend', () => {
            card.classList.remove('card-appear');
          }, { once: true });
        }

        gallery.appendChild(card);
      });

      // Update the set for next render
      lastRenderedIds = newIds;
    }
    // Initial homepage render with animation
    renderGallery(models, true);

    // --- Search Bar Logic ---
    function doSearch(q, animate = false) {
      const query = q.toLowerCase();
      const filtered = models.filter(m =>
        m.title.toLowerCase().includes(query) ||
        (m.desc && m.desc.toLowerCase().includes(query))
      );
      renderGallery(filtered, animate);
    }
    // Only trigger search on Enter for homepage search
    heroSearch.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        const value = heroSearch.value.trim();
        // Hide homepage banner, show top searchbar
        homepageBanner.style.display = 'none';
        topSearchbar.style.display = 'flex';
        navbarSearch.value = value;
        // Show gallery, hide model/checkout pages
        modelPage.style.display = 'none';
        checkoutPage.style.display = 'none';
        mainContent.style.display = 'block';
        window.scrollTo(0,0);
        doSearch(value, true);
        lastSearchQuery = value;
        showBackToShopButton();
      }
    });
    // Only trigger search on Enter for top searchbar
    navbarSearch.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        const value = navbarSearch.value.trim();
        // Show gallery, hide model/checkout pages
        modelPage.style.display = 'none';
        checkoutPage.style.display = 'none';
        mainContent.style.display = 'block';
        window.scrollTo(0,0);
        doSearch(value, true);
        lastSearchQuery = value;
        showBackToShopButton();
      }
    });
    // Clear search logic for top searchbar
    navbarSearch.addEventListener('input', e => {
      if (e.target.value.trim() === '') {
        hideBackToShopButton();
      }
    });

    // --- Model detail & checkout navigation ---
    function openModelPage(m, fromHomepage = true){
      // Hide hero search, show navbar search
      heroSearch.parentElement.classList.add('hide');
      topSearchbar.style.display = 'flex';
      navbarSearch.value = lastSearchQuery || '';
      // Hide main content, show model page
      mainContent.style.display = 'none';
      checkoutPage.style.display = 'none';
      modelPage.style.display = 'block';
      // Hide purchased page if present
      const purchasedListPage = document.getElementById('purchasedListPage');
      if (purchasedListPage) purchasedListPage.style.display = 'none';
      // Hide hero banner
      if(homepageBanner) homepageBanner.style.display = 'none';
      // Set model details
      modelImg.src = m.thumb;
      modelTitle.textContent = m.title;
      modelDesc.textContent = m.desc;
      if (m.src) {
        modelViewer.src = m.src;
        // Reset camera orbit after model loads
        modelViewer.removeEventListener('load', modelViewer._resetCameraOrbitHandler);
        modelViewer._resetCameraOrbitHandler = function() {
          modelViewer.cameraOrbit = '0deg 90deg auto';
        };
        modelViewer.addEventListener('load', modelViewer._resetCameraOrbitHandler, { once: true });
      }
      // Show 3D model by default, hide image and toggle
      modelImg.style.display = 'none';
      modelViewer.style.display = 'block';
      viewToggle.style.display = 'none';
      window.scrollTo(0,0);
      
      // Only randomize suggestions when coming from homepage
      if (fromHomepage) {
        renderSuggestedModels(m.id);
        comingFromHomepage = false;
      }
      
      // Remember last opened model for checkout back
      lastOpenedModel = m;
      
      // Handle free vs paid models
      if (m.price === 0) {
        buyNowBtn.style.display = 'none';
        downloadBtn.style.display = 'block';
        priceLabel.style.display = 'none';
      } else {
        buyNowBtn.style.display = 'block';
        downloadBtn.style.display = 'none';
        priceLabel.style.display = 'inline-block';
        priceLabel.textContent = `$${Number(m.price).toFixed(2)} USD`;
      }
      // Always show Like/List buttons
      modelActions.style.display = 'flex';
      // Store the current model's ID on the buttons
      likeBtn.setAttribute('data-model-id', m.id);
      listBtn.setAttribute('data-model-id', m.id);
      updateLikeListUI(m);
      // Hide likes/list page and clear gallery if present
      const likesListPage = document.getElementById('likesListPage');
      if (likesListPage) {
        likesListPage.style.display = 'none';
        const likesListGallery = document.getElementById('likesListGallery');
        if (likesListGallery) likesListGallery.innerHTML = '';
      }
    }

    // --- Suggested Models Logic ---
    function renderSuggestedModels(currentId) {
      if (!suggestedModels) return;
      suggestedModels.innerHTML = '<h4>Suggested Models</h4>';
      // Filter out the current model and create a shuffled array
      const availableModels = models.filter(mod => mod.id !== currentId);
      // Track which models are currently shown in suggested
      let suggestedIndices = [];
      // Helper to get 3 random models, not repeating the last set
      function getRandomModels(excludeIndices = []) {
        const pool = availableModels.filter((_, idx) => !excludeIndices.includes(idx));
        const shuffled = shuffleArray([...pool]);
        return shuffled.slice(0, 3);
      }
      // Store the last shown indices in a closure
      if (!renderSuggestedModels._lastIndices) renderSuggestedModels._lastIndices = [];
      // Get 3 models to show
      const modelsToShow = getRandomModels(renderSuggestedModels._lastIndices.map(i => i));
      // Save their indices for next time
      renderSuggestedModels._lastIndices = modelsToShow.map(m => availableModels.indexOf(m));
      // Render cards
      modelsToShow.forEach(mod => {
        const card = document.createElement('div');
        card.className = 'suggested-card';
        card.innerHTML = `
          <img class="suggested-thumb" src="${mod.thumb}" alt="${mod.title}">
          <div class="suggested-card-content">
            <div class="suggested-title">${mod.title}</div>
            <div class="suggested-desc">${mod.desc || ''}</div>
          </div>
        `;
        card.onclick = () => openModelPage(mod, false);
        suggestedModels.appendChild(card);
      });
      // Add Load More button
      const loadMoreBtn = document.createElement('button');
      loadMoreBtn.id = 'suggestedLoadMoreBtn';
      loadMoreBtn.textContent = 'Load More';
      loadMoreBtn.onclick = function() {
        // Animate out old cards
        const cards = Array.from(suggestedModels.querySelectorAll('.suggested-card'));
        cards.forEach(card => {
          card.style.transition = 'opacity 0.32s cubic-bezier(.4,.01,.22,1), transform 0.32s cubic-bezier(.4,.01,.22,1)';
          card.style.opacity = '0';
          card.style.transform = 'translateY(30px) scale(0.98)';
        });
        loadMoreBtn.disabled = true;
        setTimeout(() => {
          // Remove old cards
          cards.forEach(card => card.remove());
          // Get new models (avoid showing the same as last time)
          const newModels = getRandomModels(renderSuggestedModels._lastIndices.map(i => i));
          renderSuggestedModels._lastIndices = newModels.map(m => availableModels.indexOf(m));
          // Render new cards with appear animation
          newModels.forEach(mod => {
            const card = document.createElement('div');
            card.className = 'suggested-card card-appear';
            card.innerHTML = `
              <img class="suggested-thumb" src="${mod.thumb}" alt="${mod.title}">
              <div class="suggested-card-content">
                <div class="suggested-title">${mod.title}</div>
                <div class="suggested-desc">${mod.desc || ''}</div>
              </div>
            `;
            card.onclick = () => openModelPage(mod, false);
            suggestedModels.insertBefore(card, loadMoreBtn);
            card.addEventListener('animationend', () => {
              card.classList.remove('card-appear');
            }, { once: true });
          });
          loadMoreBtn.disabled = false;
        }, 320);
      };
      suggestedModels.appendChild(loadMoreBtn);
    }

    // Helper function to shuffle array (Fisher-Yates algorithm)
    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    // Toggle between image and 3D view
    viewToggle.addEventListener('click', () => {
      if (modelImg.style.display === 'none') {
        // Switch to image view
        modelImg.style.display = 'block';
        modelViewer.style.display = 'none';
        viewToggle.textContent = '3D View';
      } else {
        // Switch to 3D view
        modelImg.style.display = 'none';
        modelViewer.style.display = 'block';
        viewToggle.textContent = 'Image View';
      }
    });
    
    backModel.onclick=()=>{
      modelPage.style.display='none';
      mainContent.style.display='block';
      // Hide navbar search, show hero search
      navbarSearch.value = '';
      heroSearch.parentElement.classList.remove('hide');
      topSearchbar.style.display = 'none';
      // Show hero banner
      if(homepageBanner) homepageBanner.style.display = '';
      // Hide likes/list page and clear gallery
      const likesListPage = document.getElementById('likesListPage');
      likesListPage.style.display = 'none';
      document.getElementById('likesListGallery').innerHTML = '';
      // Reset the flag when returning to homepage
      comingFromHomepage = true;
      window.scrollTo(0,0);
      // --- Reset homepage state ---
      heroSearch.value = '';
      lastSearchQuery = '';
      renderGallery(models, true);
      // In openLikesOrListPage, after hiding other pages:
      const purchasedListPage = document.getElementById('purchasedListPage');
      if (purchasedListPage) purchasedListPage.style.display = 'none';
    };
    buyNowBtn.onclick=()=>{
      // Store paid model ID in sessionStorage for post-payment download
      if (lastOpenedModel) {
        sessionStorage.setItem('paidModelId', lastOpenedModel.id);
      }
      modelPage.style.display='none';
      mainContent.style.display='none';
      checkoutPage.style.display='block';
      // Show navbar search, hide hero search and hero banner
      navbarSearch.value = '';
      heroSearch.parentElement.classList.add('hide');
      if(homepageBanner) homepageBanner.style.display = 'none';
      window.scrollTo(0,0);
      // Render PayPal button for the selected model
      if (lastOpenedModel) {
        renderPayPalButton(lastOpenedModel);
      }
      // Update checkout preview with selected model info
      document.getElementById('checkoutModelImg').src = lastOpenedModel.thumb;
      document.getElementById('checkoutModelName').textContent = lastOpenedModel.title;
      document.getElementById('checkoutModelPrice').textContent = `$${Number(lastOpenedModel.price).toFixed(2)} USD`;
      // Compose metadata line
      let meta = [];
      if (lastOpenedModel.availableFormats) meta.push('Formats: ' + lastOpenedModel.availableFormats.map(f=>f.toUpperCase()).join(', '));
      if (lastOpenedModel.desc && /rigged/i.test(lastOpenedModel.desc)) meta.push('Rigged');
      document.getElementById('checkoutModelMeta').textContent = meta.join(' | ');
    };
    backCheckout.onclick=()=>{
      // Return to previous model page if available
      if (lastOpenedModel) {
        checkoutPage.style.display = 'none';
        openModelPage(lastOpenedModel);
      } else {
        // Fallback: go to home/shop
        checkoutPage.style.display = 'none';
        modelPage.style.display = 'none';
        mainContent.style.display = 'block';
        navbarSearch.value = '';
        heroSearch.parentElement.classList.remove('hide');
        topSearchbar.style.display = 'none';
        if(homepageBanner) homepageBanner.style.display = '';
        window.scrollTo(0,0);
      }
    };

    // === SIMULATED AUTHENTICATION SYSTEM ===
    // User state management
    let currentUser = null;
    
    // DOM refs for auth
    const registerName = document.getElementById('registerName');
    const registerUsername = document.getElementById('registerUsername');
    const registerPassword = document.getElementById('registerPassword');
    const registerSubmitBtn = document.getElementById('registerSubmitBtn');
    const loginUsername = document.getElementById('loginUsername');
    const loginPassword = document.getElementById('loginPassword');
    const loginSubmitBtn = document.getElementById('loginSubmitBtn');
    
    // Error message elements
    const nameError = document.getElementById('nameError');
    const usernameError = document.getElementById('usernameError');
    const passwordError = document.getElementById('passwordError');
    const loginUsernameError = document.getElementById('loginUsernameError');
    const loginPasswordError = document.getElementById('loginPasswordError');
    const registerSuccess = document.getElementById('registerSuccess');
    const loginSuccess = document.getElementById('loginSuccess');
    
    // Password strength elements
    const passwordStrength = document.getElementById('passwordStrength');
    const strengthFill = document.getElementById('strengthFill');
    const strengthText = document.getElementById('strengthText');
    
    // === VALIDATION FUNCTIONS ===
    function validateName(name) {
      if (!name.trim()) return 'Full name is required';
      if (name.trim().length < 2) return 'Name must be at least 2 characters';
      if (name.trim().length > 50) return 'Name must be less than 50 characters';
      if (!/^[a-zA-Z\s]+$/.test(name.trim())) return 'Name can only contain letters and spaces';
      return null;
    }
    function validateUsername(username) {
      if (!username.trim()) return 'Username is required';
      if (username.trim().length < 3) return 'Username must be at least 3 characters';
      if (username.trim().length > 20) return 'Username must be less than 20 characters';
      if (!/^[a-zA-Z0-9_]+$/.test(username.trim())) return 'Username can only contain letters, numbers, and underscores';
      return null;
    }
    function validatePassword(password) {
      if (!password) return 'Password is required';
      if (password.length < 8) return 'Password must be at least 8 characters';
      if (!/(?=.*[a-z])/.test(password)) return 'Password must contain at least one lowercase letter';
      if (!/(?=.*[A-Z])/.test(password)) return 'Password must contain at least one uppercase letter';
      if (!/(?=.*\d)/.test(password)) return 'Password must contain at least one number';
      if (!/(?=.*[@$!%*?&])/.test(password)) return 'Password must contain at least one special character (@$!%*?&)';
      return null;
    }
    function getPasswordStrength(password) {
      let score = 0;
      let feedback = [];
      if (password.length >= 8) score += 1;
      if (password.length >= 12) score += 1;
      if (/[a-z]/.test(password)) score += 1;
      if (/[A-Z]/.test(password)) score += 1;
      if (/\d/.test(password)) score += 1;
      if (/[@$!%*?&]/.test(password)) score += 1;
      if (password.length > 0) {
        if (password.length < 8) feedback.push('Too short');
        if (!/[a-z]/.test(password)) feedback.push('Add lowercase');
        if (!/[A-Z]/.test(password)) feedback.push('Add uppercase');
        if (!/\d/.test(password)) feedback.push('Add number');
        if (!/[@$!%*?&]/.test(password)) feedback.push('Add symbol');
      }
      return { score, feedback };
    }
    function updatePasswordStrength(password) {
      const strength = getPasswordStrength(password);
      const strengthClasses = ['strength-weak', 'strength-fair', 'strength-good', 'strength-strong'];
      const strengthTexts = ['Weak', 'Fair', 'Good', 'Strong'];
      const strengthTextClasses = ['strength-weak-text', 'strength-fair-text', 'strength-good-text', 'strength-strong-text'];
      if (password.length === 0) {
        passwordStrength.style.display = 'none';
        return;
      }
      passwordStrength.style.display = 'block';
      const index = Math.min(Math.floor(strength.score / 2), 3);
      strengthFill.className = `password-strength-fill ${strengthClasses[index]}`;
      strengthText.className = `strength-text ${strengthTextClasses[index]}`;
      strengthText.textContent = strengthTexts[index];
    }
    // === ERROR HANDLING ===
    function showError(element, message) {
      element.textContent = message;
      element.classList.add('show');
      element.previousElementSibling.classList.add('input-error');
      element.previousElementSibling.classList.remove('input-success');
    }
    function hideError(element) {
      element.classList.remove('show');
      element.previousElementSibling.classList.remove('input-error');
    }
    function showSuccess(element, message) {
      element.textContent = message;
      element.classList.add('show');
      setTimeout(() => element.classList.remove('show'), 3000);
    }
    function clearAllErrors() {
      [nameError, usernameError, passwordError, loginUsernameError, loginPasswordError].forEach(el => {
        hideError(el);
      });
      [registerName, registerUsername, registerPassword, loginUsername, loginPassword].forEach(el => {
        el.classList.remove('input-error', 'input-success');
      });
    }
    // === LOCALSTORAGE USER DB ===
    function getUsers() {
      return JSON.parse(localStorage.getItem('users') || '[]');
    }
    function saveUsers(users) {
      localStorage.setItem('users', JSON.stringify(users));
    }
    // Helper: find user by username (regular) or google sub/email (Google)
    function findUser({ provider, username, sub, email }) {
      const users = getUsers();
      if (provider === 'google') {
        // Prefer sub (Google ID), fallback to email
        return users.find(u => u.provider === 'google' && (u.sub === sub || u.email === email));
      } else {
        return users.find(u => u.username === username && !u.provider);
      }
    }
    // Helper: update user in users array
    function updateUserInUsers(user) {
      let users = getUsers();
      if (user.provider === 'google') {
        users = users.map(u => (u.provider === 'google' && (u.sub === user.sub || u.email === user.email)) ? user : u);
      } else {
        users = users.map(u => (u.username === user.username && !u.provider) ? user : u);
      }
      saveUsers(users);
    }
    // === EVENT LISTENERS ===
    // Password strength indicator
    registerPassword.addEventListener('input', (e) => {
      updatePasswordStrength(e.target.value);
      hideError(passwordError);
    });
    // Registration form submission
    registerSubmitBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      clearAllErrors();
      const name = registerName.value.trim();
      const username = registerUsername.value.trim();
      const password = registerPassword.value;
      // Validate inputs
      const nameErrorMsg = validateName(name);
      const usernameErrorMsg = validateUsername(username);
      const passwordErrorMsg = validatePassword(password);
      if (nameErrorMsg) showError(nameError, nameErrorMsg);
      if (usernameErrorMsg) showError(usernameError, usernameErrorMsg);
      if (passwordErrorMsg) showError(passwordError, passwordErrorMsg);
      if (nameErrorMsg || usernameErrorMsg || passwordErrorMsg) {
        return;
      }
      // Simulate backend: check for duplicate username
      const users = getUsers();
      if (users.some(u => u.username === username)) {
        showError(usernameError, 'An account with this username already exists.');
        return;
      }
      // Simulate user creation
      users.push({ name, username, password });
      saveUsers(users);
      showSuccess(registerSuccess, 'Account created successfully! Redirecting to login...');
      registerName.value = '';
      registerUsername.value = '';
      registerPassword.value = '';
      passwordStrength.style.display = 'none';
      setTimeout(() => {
        showLogin();
        clearAllErrors();
      }, 2000);
    });
    // Login form submission
    loginSubmitBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      clearAllErrors();
      const username = loginUsername.value.trim();
      const password = loginPassword.value;
      const usernameErrorMsg = validateUsername(username);
      if (!password) {
        showError(loginPasswordError, 'Password is required');
        return;
      }
      if (usernameErrorMsg) {
        showError(loginUsernameError, usernameErrorMsg);
        return;
      }
      const users = getUsers();
      const user = users.find(u => u.username === username && u.password === password);
      if (!user) {
        showError(loginPasswordError, 'Invalid username or password.');
        return;
      }
      currentUser = user;
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      showSuccess(loginSuccess, 'Login successful! Welcome back!');
      setTimeout(() => {
        closeModal(loginModal);
        updateAuthUI();
        clearAllErrors();
      }, 1500);
    });
    // Clear errors on input
    [registerName, registerUsername, registerPassword, loginUsername, loginPassword].forEach(input => {
      input.addEventListener('input', () => {
        let errorElement = null;
        if (input.id === 'registerName') errorElement = nameError;
        else if (input.id === 'registerUsername') errorElement = usernameError;
        else if (input.id === 'registerPassword') errorElement = passwordError;
        else if (input.id === 'loginUsername') errorElement = loginUsernameError;
        else if (input.id === 'loginPassword') errorElement = loginPasswordError;
        if (errorElement) hideError(errorElement);
        input.classList.remove('input-error');
      });
    });
    // === MODAL MANAGEMENT ===
    function openModal(m){ 
      m.classList.add('active'); 
      showLogin();
      clearAllErrors();
    }
    function closeModal(m){ 
      m.classList.remove('active'); 
      clearAllErrors();
    }
    document.querySelectorAll('[data-close]').forEach(btn=>{
      btn.onclick=()=>closeModal(btn.closest('.modal'));
    });
    loginBtn.onclick=()=>openModal(loginModal);
    window.addEventListener('keydown',e=>{
      if(e.key==='Escape') document.querySelectorAll('.modal.active').forEach(closeModal);
    });
    // Toggle helpers
    function showLogin(){
      loginView.style.display='block';
      registerView.style.display='none';
      modalTitle.textContent='Log In';
      clearAllErrors();
      // Hide create account button if present
      const createAccBtn = document.getElementById('createAccountBtn');
      if (createAccBtn) createAccBtn.style.display = 'none';
      // Show the login-signup text
      const loginSignupText = document.getElementById('loginSignupText');
      if (loginSignupText) loginSignupText.style.display = 'block';
      // Focus first input after animation
      setTimeout(() => {
        const firstInput = loginView.querySelector('input');
        if (firstInput) firstInput.focus();
      }, 500);
    }
    function showRegister(){
      loginView.style.display='none';
      registerView.style.display='block';
      modalTitle.textContent='Create Account';
      clearAllErrors();
      // Attach event listener for 'Log In' link in register view
      setTimeout(() => {
        const backToLogin = document.getElementById('backToLogin');
        if (backToLogin) {
          backToLogin.onclick = function(e) {
            e.preventDefault();
            // Animate transition back to login
            animateModalSwitch('register', 'login');
          };
        }
      }, 0);
      // Focus first input after animation
      setTimeout(() => {
        const firstInput = registerView.querySelector('input');
        if (firstInput) firstInput.focus();
      }, 500);
    }

    // --- Modal Switch Animation Logic ---
    function animateModalSwitch(from, to) {
      // from: 'login' or 'register', to: 'login' or 'register'
      // Only animate if modal is open and has login-animate class
      if (!loginModal.classList.contains('login-animate')) {
        if (to === 'login') showLogin();
        else showRegister();
        return;
      }
      // Animate out
      addClass(loginModal, 'closing');
      removeClass(loginModal, 'active');
      setTimeout(() => {
        removeClass(loginModal, 'closing');
        // Switch view
        if (to === 'login') showLogin();
        else showRegister();
        // Animate in
        addClass(loginModal, 'active');
      }, 420);
    }

    // Remove createAccBtn event (now handled by link below Continue)
    if (loginToSignup) {
      loginToSignup.onclick = function(e) {
        e.preventDefault();
        // Animate transition from login to register
        animateModalSwitch('login', 'register');
      };
    }
    // === INITIALIZATION ===
    window.addEventListener('DOMContentLoaded', () => {
      // Simulate session
      const user = localStorage.getItem('currentUser');
      if (user) {
        currentUser = JSON.parse(user);
      }
      updateAuthUI();
    });
    // === UI UPDATES ===
    function updateAuthUI() {
      const loginBtn = document.getElementById('loginBtn');
      if (currentUser) {
        // Remove all children
        loginBtn.innerHTML = '';
        // Get image (fallback if not set)
        const imgSrc = currentUser.image || DEFAULT_PROFILE_IMAGE;
        // Create avatar+name row
        const avatar = document.createElement('img');
        avatar.src = imgSrc;
        avatar.alt = 'Profile';
        avatar.className = 'profile-avatar';
        const nameSpan = document.createElement('span');
        nameSpan.className = 'profile-name';
        nameSpan.textContent = currentUser.name || 'Account';
        loginBtn.appendChild(avatar);
        loginBtn.appendChild(nameSpan);
        document.getElementById('signupBtn').style.display = 'none';
        loginBtn.onclick = () => showUserMenu();
        if (!currentUser.likes) currentUser.likes = [];
        if (!currentUser.myList) currentUser.myList = [];
      } else {
        loginBtn.innerHTML = 'Log In';
        document.getElementById('signupBtn').style.display = 'block';
        loginBtn.onclick = () => openModal(loginModal);
      }
    }
    function showUserMenu() {
      const menu = document.createElement('div');
      menu.style.cssText = `
        position: absolute;
        top: 100%;
        right: 0;
        background: var(--card-bg);
        border-radius: var(--radius);
        padding: 0.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 1000;
        min-width: 180px;
      `;
      // Avatar + name row
      const imgSrc = currentUser.image || DEFAULT_PROFILE_IMAGE;
      menu.innerHTML = `
        <div class="user-menu-header">
          <img class="profile-avatar" src="${imgSrc}" alt="Profile">
          <span class="profile-name">${currentUser.name}</span>
        </div>
        <button id="homeBtn" class="user-menu-option">Home</button>
        <button id="profileBtn" class="user-menu-option">Profile</button>
        <button id="myLikesBtn" class="user-menu-option">My Likes</button>
        <button id="myListBtn" class="user-menu-option">My List</button>
        <button id="myPurchasedBtn" class="user-menu-option">My Purchased</button>
        <button id="logoutBtn" class="user-menu-option">Logout</button>
      `;
      const loginBtn = document.getElementById('loginBtn');
      loginBtn.style.position = 'relative';
      loginBtn.appendChild(menu);
      setTimeout(() => {
        document.addEventListener('click', function closeMenu(e) {
          if (!loginBtn.contains(e.target)) {
            menu.remove();
            document.removeEventListener('click', closeMenu);
          }
        });
      }, 0);
      document.getElementById('logoutBtn').onclick = () => {
        localStorage.removeItem('currentUser');
        currentUser = null;
        updateAuthUI();
        menu.remove();
      };
      document.getElementById('profileBtn').onclick = () => {
        menu.remove();
        openProfilePage();
      };
      document.getElementById('homeBtn').onclick = () => {
        menu.remove();
        // Redirect to homepage
        window.location.href = '/';
      };
      // NEW: My Likes and My List
      document.getElementById('myLikesBtn').onclick = () => {
        menu.remove();
        openLikesOrListPage('likes');
      };
      document.getElementById('myListBtn').onclick = () => {
        menu.remove();
        openLikesOrListPage('list');
      };
      // My Purchased
      document.getElementById('myPurchasedBtn').onclick = () => {
        menu.remove();
        openPurchasedPage();
      };
    }

    // --- Fake checkout ---
    // document.getElementById('checkoutForm').addEventListener('submit',e=>{
    //   e.preventDefault();
    //   window.open('https://www.paypal.com/paypalme/korenbar1', '_blank', 'noopener');
    // });

    // --- Download functionality ---
    downloadBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      downloadDropdown.classList.toggle('active');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!downloadBtn.contains(e.target) && !downloadDropdown.contains(e.target)) {
        downloadDropdown.classList.remove('active');
      }
    });

    // Handle format downloads
    document.querySelectorAll('.download-option').forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        const format = e.currentTarget.dataset.format;
        const modelName = lastOpenedModel ? lastOpenedModel.title.replace(/\s+/g, '_') : 'model';
        
        // Check what formats are actually available for this model
        const availableFormats = getAvailableFormats(lastOpenedModel);
        
        if (!availableFormats.includes(format)) {
          // Format not available - show message
          alert(`Sorry, ${format.toUpperCase()} format is not available for this model yet.\n\nAvailable formats: ${availableFormats.map(f => f.toUpperCase()).join(', ')}`);
          downloadDropdown.classList.remove('active');
          return;
        }
        
        // Get the correct file URL for this format
        const fileUrl = getFileUrlForFormat(lastOpenedModel, format);
        
        if (!fileUrl) {
          alert(`Download not available for ${format.toUpperCase()} format.`);
          downloadDropdown.classList.remove('active');
          return;
        }
        
        // Create download link
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = `${modelName}.${format}`;
        link.style.display = 'none';
        
        // Trigger download
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Close dropdown
        downloadDropdown.classList.remove('active');
        
        // Show success message
        alert(`Downloading ${modelName}.${format}...`);
      });
    });

    // Helper function to get available formats for a model
    function getAvailableFormats(model) {
      if (!model) return [];
      
      // Only FBX is available now
      return ['fbx'];
    }

    // Helper function to get the correct file URL for a format
    function getFileUrlForFormat(model, format) {
      if (!model) return null;
      // Check if this format is available for this model
      const availableFormats = getAvailableFormats(model);
      if (!availableFormats.includes(format)) {
        return null;
      }
      // Only FBX is available now
      if (model.fbx) {
        return model.fbx;
      }
      return null;
    }

    // --- On page load, ensure modelPage is hidden to prevent flash ---
    window.addEventListener('DOMContentLoaded', () => {
      modelPage.style.display = 'none';
      topSearchbar.style.display = 'none';
      homepageBanner.style.display = '';
      heroSearch.value = '';
    });

    const signupBtn = document.getElementById('signupBtn');
    signupBtn.onclick = () => {
      openModal(loginModal);
      showRegister();
    };

    // --- Profile Page ---
    // Add profile page HTML before footer if not present
    if (!document.getElementById('profilePage')) {
      const profileSection = document.createElement('section');
      profileSection.id = 'profilePage';
      profileSection.style.display = 'none';
      profileSection.innerHTML = `
        <div class="profile-container">
          <button class="btn back-btn" id="backProfile">← Back</button>
          <div class="profile-card">
            <div class="profile-image-wrapper">
              <img id="profileImage" src="" alt="Profile Image" class="profile-image">
              <input type="file" id="profileImageInput" accept="image/*" style="display:none;">
              <button class="btn profile-img-btn" id="changeImageBtn">Change Image</button>
            </div>
            <div class="profile-fields">
              <label for="profileUsername" class="profile-label">Username</label>
              <input type="text" id="profileUsername" class="profile-input" maxlength="50">
              <button class="btn profile-save-btn" id="saveProfileBtn">Save</button>
              <div class="success-message" id="profileSaveSuccess"></div>
            </div>
          </div>
        </div>
      `;
      // Insert before footer
      const footer = document.querySelector('footer');
      document.body.insertBefore(profileSection, footer);
    }
    // Add profile page styles
    if (!document.getElementById('profilePageStyles')) {
      const style = document.createElement('style');
      style.id = 'profilePageStyles';
      style.textContent = `
        #profilePage {
          min-height: 100vh;
          background: var(--bg);
          color: var(--text);
          display: none;
          padding: 2.5rem 0 2.5rem 0;
        }
        .profile-container {
          max-width: 520px;
          margin: 0 auto;
          background: var(--card-bg);
          border-radius: 18px;
          box-shadow: 0 8px 32px rgba(0,0,0,0.25);
          padding: 2.5rem 2rem 2.5rem 2rem;
          display: flex;
          flex-direction: column;
          align-items: center;
        }
        .profile-card {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 2.5rem;
          width: 100%;
        }
        .profile-image-wrapper {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 1rem;
        }
        .profile-image {
          width: 120px;
          height: 120px;
          object-fit: cover;
          border-radius: 18px;
          background: #232326;
          box-shadow: 0 4px 18px rgba(0,0,0,0.18);
          border: 2px solid #ff9800;
        }
        .profile-img-btn {
          background: #232326;
          color: #ff9800;
          border: 2px solid #ff9800;
          font-size: 0.95rem;
          padding: 0.5rem 1.2rem;
          border-radius: 8px;
          margin-top: 0.2rem;
          transition: background 0.18s, color 0.18s;
        }
        .profile-img-btn:hover {
          background: #ff9800;
          color: #fff;
        }
        .profile-fields {
          width: 100%;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          gap: 1.2rem;
        }
        .profile-label {
          font-size: 1.1rem;
          font-weight: 600;
          margin-bottom: 0.3rem;
        }
        .profile-input {
          padding: 0.8rem 1rem;
          border-radius: 10px;
          border: 2px solid #232326;
          background: #232326;
          color: #fff;
          font-size: 1.05rem;
          margin-bottom: 0.5rem;
          outline: none;
          transition: border 0.18s;
        }
        .profile-input:focus {
          border: 2px solid #ff9800;
        }
        .profile-save-btn {
          margin-top: 0.5rem;
          width: 100%;
          justify-content: center;
        }
        @media (max-width: 600px) {
          .profile-container {
            padding: 1.2rem 0.5rem;
          }
          .profile-card {
            gap: 1.5rem;
          }
        }
      `;
      document.head.appendChild(style);
    }

    // --- Profile Page Logic ---
    function openProfilePage() {
      // Hide all other pages
      modelPage.style.display = 'none';
      mainContent.style.display = 'none';
      checkoutPage.style.display = 'none';
      homepageBanner.style.display = 'none';
      topSearchbar.style.display = 'none';
      // Hide likes/list page and clear gallery
      const likesListPage = document.getElementById('likesListPage');
      if (likesListPage) {
        likesListPage.style.display = 'none';
        const likesListGallery = document.getElementById('likesListGallery');
        if (likesListGallery) likesListGallery.innerHTML = '';
      }
      // Hide purchased page if present
      const purchasedListPage = document.getElementById('purchasedListPage');
      if (purchasedListPage) purchasedListPage.style.display = 'none';
      // Show profile page
      const profilePage = document.getElementById('profilePage');
      profilePage.style.display = 'block';
      window.scrollTo(0,0);
      // Load current user data (from localStorage, not yet saved changes)
      let user = JSON.parse(localStorage.getItem('currentUser'));
      // Use a temp state for unsaved changes
      let tempProfile = {
        name: user.name,
        image: user.image || ''
      };
      // Set username field
      const usernameInput = document.getElementById('profileUsername');
      usernameInput.value = tempProfile.name;
      // Set profile image
      const profileImage = document.getElementById('profileImage');
      if (tempProfile.image) {
        profileImage.src = tempProfile.image;
      } else {
        profileImage.src = DEFAULT_PROFILE_IMAGE;
      }
      // Change image logic
      const imageInput = document.getElementById('profileImageInput');
      const changeImageBtn = document.getElementById('changeImageBtn');
      changeImageBtn.onclick = () => imageInput.click();
      imageInput.onchange = (e) => {
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = function(ev) {
            profileImage.src = ev.target.result;
            tempProfile.image = ev.target.result;
          };
          reader.readAsDataURL(file);
        }
      };
      // Username edit
      usernameInput.oninput = (e) => {
        tempProfile.name = e.target.value;
      };
      // Save logic
      const saveBtn = document.getElementById('saveProfileBtn');
      const saveSuccess = document.getElementById('profileSaveSuccess');
      saveBtn.onclick = () => {
        // Save to localStorage and update UI
        user.name = tempProfile.name;
        user.image = tempProfile.image;
        localStorage.setItem('currentUser', JSON.stringify(user));
        // Also update in users DB
        updateUserInUsers(user);
        // Show success
        saveSuccess.textContent = 'Profile updated!';
        saveSuccess.classList.add('show');
        setTimeout(() => saveSuccess.classList.remove('show'), 2000);
        // Update UI (navbar, etc)
        currentUser = user;
        updateAuthUI();
      };
      // Back button
      document.getElementById('backProfile').onclick = () => {
        profilePage.style.display = 'none';
        mainContent.style.display = 'block';
        homepageBanner.style.display = '';
        topSearchbar.style.display = 'none';
        window.scrollTo(0,0);
      };
      // In openProfilePage, after hiding other pages:
      if (purchasedListPage) purchasedListPage.style.display = 'none';
    }

    // --- Like/List logic ---
    function getUserLikes() {
      if (!currentUser) return [];
      return (currentUser.likes || []);
    }
    function getUserList() {
      if (!currentUser) return [];
      return (currentUser.myList || []);
    }
    function saveUserLikes(likes) {
      if (!currentUser) return;
      currentUser.likes = likes;
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      // Also update in users DB
      updateUserInUsers(currentUser);
    }
    function saveUserList(myList) {
      if (!currentUser) return;
      currentUser.myList = myList;
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      // Also update in users DB
      updateUserInUsers(currentUser);
    }
    function updateLikeListUI(model) {
      // Like state
      const likes = getUserLikes();
      const liked = likes && likes.includes(model.id);
      likeIcon.textContent = liked ? '♥' : '♡';
      likeBtn.classList.toggle('liked', liked);
      likeBtn.querySelector('span:last-child').textContent = liked ? 'Liked' : 'Like';
      // List state
      const myList = getUserList();
      const listed = myList && myList.includes(model.id);
      listIcon.textContent = listed ? '✔' : '＋';
      listBtn.classList.toggle('listed', listed);
      listBtn.querySelector('span:last-child').textContent = listed ? 'Added' : 'Add to List';
    }
    likeBtn.addEventListener('click', (e) => {
      const modelId = parseInt(likeBtn.getAttribute('data-model-id'), 10);
      if (!modelId) return;
      if (!currentUser) {
        showLoginRequiredModal(() => likeBtn.click());
        return;
      }
      let likes = getUserLikes();
      if (!likes.includes(modelId)) {
        likes.push(modelId);
      } else {
        likes = likes.filter(id => id !== modelId);
      }
      saveUserLikes(likes);
      // Find the model by ID and update UI
      const model = models.find(m => m.id === modelId);
      if (model) updateLikeListUI(model);
    });
    listBtn.addEventListener('click', (e) => {
      const modelId = parseInt(listBtn.getAttribute('data-model-id'), 10);
      if (!modelId) return;
      if (!currentUser) {
        showLoginRequiredModal(() => listBtn.click());
        return;
      }
      let myList = getUserList();
      if (!myList.includes(modelId)) {
        myList.push(modelId);
      } else {
        myList = myList.filter(id => id !== modelId);
      }
      saveUserList(myList);
      // Find the model by ID and update UI
      const model = models.find(m => m.id === modelId);
      if (model) updateLikeListUI(model);
    });

    // --- Add Likes/List pages HTML if not present ---
    if (!document.getElementById('likesListPage')) {
      const likesListSection = document.createElement('section');
      likesListSection.id = 'likesListPage';
      likesListSection.style.display = 'none';
      likesListSection.innerHTML = `
        <div class="likes-list-container">
          <button class="btn back-btn" id="backLikesList">← Back</button>
          <h2 id="likesListTitle"></h2>
          <div id="likesListGallery" class="gallery"></div>
        </div>
      `;
      // Insert before footer
      const footer = document.querySelector('footer');
      document.body.insertBefore(likesListSection, footer);
    }
    // --- Likes/List page logic ---
    function openLikesOrListPage(type) {
      // Hide all other pages
      modelPage.style.display = 'none';
      mainContent.style.display = 'none';
      checkoutPage.style.display = 'none';
      homepageBanner.style.display = 'none';
      topSearchbar.style.display = 'none';
      // Hide profile page if present
      const profilePage = document.getElementById('profilePage');
      if (profilePage) profilePage.style.display = 'none';
      // Hide purchased page if present
      const purchasedListPage = document.getElementById('purchasedListPage');
      if (purchasedListPage) purchasedListPage.style.display = 'none';
      // Show likes/list page
      const likesListPage = document.getElementById('likesListPage');
      likesListPage.style.display = 'block';
      window.scrollTo(0,0);
      // Set title
      const title = type === 'likes' ? 'My Likes' : 'My List';
      document.getElementById('likesListTitle').textContent = title;
      // Get model IDs
      let ids = [];
      if (type === 'likes') ids = getUserLikes();
      else ids = getUserList();
      // Get models
      const filtered = models.filter(m => ids.includes(m.id));
      // Render
      const galleryDiv = document.getElementById('likesListGallery');
      if (filtered.length === 0) {
        galleryDiv.innerHTML = `<div id=\"no-results-message\"><div>¯\\_(ツ)_/¯</div><div>No models yet</div></div>`;
      } else {
        galleryDiv.innerHTML = '';
        filtered.forEach(m => {
          const card = document.createElement('div');
          card.className = 'card';
          card.innerHTML = `
            <img src=\"${m.thumb}\" alt=\"${m.title}\">
            <div class=\"info\">
              <h3>${m.title}</h3>
              <p>${m.price?`$${m.price.toFixed(2)}`:'Free'}</p>
            </div>`;
          card.onclick = () => openModelPage(m, false);
          galleryDiv.appendChild(card);
        });
      }
      // Back button
      document.getElementById('backLikesList').onclick = () => {
        likesListPage.style.display = 'none';
        // Clear the gallery content to prevent bleed-through
        document.getElementById('likesListGallery').innerHTML = '';
        mainContent.style.display = 'block';
        homepageBanner.style.display = '';
        topSearchbar.style.display = 'none';
        // Ensure the hero search bar is visible again
        heroSearch.parentElement.classList.remove('hide');
        window.scrollTo(0,0);
      };
    }

    // --- Purchased logic ---
    function getUserPurchased() {
      if (!currentUser) return [];
      return (currentUser.purchased || []);
    }
    function saveUserPurchased(purchased) {
      if (!currentUser) return;
      currentUser.purchased = purchased;
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      // Also update in users DB
      updateUserInUsers(currentUser);
    }
    function openPurchasedPage() {
      if (!currentUser) {
        showLoginRequiredModal(() => openPurchasedPage());
        return;
      }
      // Hide all other pages
      modelPage.style.display = 'none';
      mainContent.style.display = 'none';
      checkoutPage.style.display = 'none';
      homepageBanner.style.display = 'none';
      topSearchbar.style.display = 'none';
      // Hide profile page if present
      const profilePage = document.getElementById('profilePage');
      if (profilePage) profilePage.style.display = 'none';
      // Hide likes/list page if present
      const likesListPage = document.getElementById('likesListPage');
      if (likesListPage) likesListPage.style.display = 'none';
      // Show purchased page
      const purchasedListPage = document.getElementById('purchasedListPage');
      purchasedListPage.style.display = 'block';
      window.scrollTo(0,0);
      // Get purchased model IDs
      let ids = getUserPurchased();
      // Get models
      const filtered = models.filter(m => ids.includes(m.id));
      // Render
      const galleryDiv = document.getElementById('purchasedListGallery');
      if (filtered.length === 0) {
        galleryDiv.innerHTML = `<div id=\"no-results-message\"><div>¯\\_(ツ)_/¯</div><div>No purchased models yet</div></div>`;
      } else {
        galleryDiv.innerHTML = '';
        filtered.forEach(m => {
          const cardWrapper = document.createElement('div');
          cardWrapper.style.display = 'flex';
          cardWrapper.style.flexDirection = 'column';
          cardWrapper.style.alignItems = 'center';
          cardWrapper.style.marginBottom = '2.5rem';

          const card = document.createElement('div');
          card.className = 'card';
          card.innerHTML = `
            <img src=\"${m.thumb}\" alt=\"${m.title}\">
            <div class=\"info\">
              <h3>${m.title}</h3>
              <p>${m.price?`$${m.price.toFixed(2)}`:'Free'}</p>
            </div>`;
          card.onclick = () => openModelPage(m, false);
          cardWrapper.appendChild(card);

          // Download button below card
          const downloadBtn = document.createElement('button');
          downloadBtn.className = 'download-btn';
          downloadBtn.style.marginTop = '20px';
          downloadBtn.style.display = 'block';
          downloadBtn.style.alignSelf = 'center';
          downloadBtn.textContent = 'Download';
          downloadBtn.onclick = (e) => {
            e.stopPropagation();
            const format = 'fbx';
            const modelName = m.title.replace(/\s+/g, '_');
            const availableFormats = getAvailableFormats(m);
            if (!availableFormats.includes(format)) {
              alert(`Sorry, ${format.toUpperCase()} format is not available for this model yet.\n\nAvailable formats: ${availableFormats.map(f => f.toUpperCase()).join(', ')}`);
              return;
            }
            const fileUrl = getFileUrlForFormat(m, format);
            if (!fileUrl) {
              alert(`Download not available for ${format.toUpperCase()} format.`);
              return;
            }
            const link = document.createElement('a');
            link.href = fileUrl;
            link.download = `${modelName}.${format}`;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            alert(`Downloading ${modelName}.${format}...`);
          };
          cardWrapper.appendChild(downloadBtn);

          galleryDiv.appendChild(cardWrapper);
        });
      }
      // Back button
      document.getElementById('backPurchasedList').onclick = () => {
        purchasedListPage.style.display = 'none';
        document.getElementById('purchasedListGallery').innerHTML = '';
        mainContent.style.display = 'block';
        homepageBanner.style.display = '';
        topSearchbar.style.display = 'none';
        heroSearch.parentElement.classList.remove('hide');
        window.scrollTo(0,0);
      };
    }

    // --- Add Purchased page HTML if not present ---
    if (!document.getElementById('purchasedListPage')) {
      const purchasedListSection = document.createElement('section');
      purchasedListSection.id = 'purchasedListPage';
      purchasedListSection.style.display = 'none';
      purchasedListSection.innerHTML = `
        <div class="likes-list-container purchased-list-container">
          <button class="btn back-btn" id="backPurchasedList">← Back</button>
          <h2 id="purchasedListTitle">My Purchased</h2>
          <div id="purchasedListGallery" class="gallery"></div>
        </div>
      `;
      // Insert before footer
      const footer = document.querySelector('footer');
      document.body.insertBefore(purchasedListSection, footer);
    }

    // Modal logic for login required
    function showLoginRequiredModal(afterLoginAction) {
      const modal = document.getElementById('loginRequiredModal');
      modal.classList.add('active');
      // Focus Log In button
      setTimeout(() => document.getElementById('loginRequiredBtn').focus(), 100);
      // Log In button opens login modal, then runs afterLoginAction after successful login
      document.getElementById('loginRequiredBtn').onclick = () => {
        modal.classList.remove('active');
        openModal(loginModal);
        // After login, run the action
        const loginHandler = () => {
          if (currentUser) {
            setTimeout(() => afterLoginAction && afterLoginAction(), 200);
            window.removeEventListener('storage', loginHandler);
          }
        };
        // Listen for login (localStorage change)
        window.addEventListener('storage', loginHandler);
        // Also check after login modal closes
        const closeCheck = setInterval(() => {
          if (currentUser) {
            afterLoginAction && afterLoginAction();
            clearInterval(closeCheck);
          }
        }, 300);
        // Remove listeners after 10s
        setTimeout(() => {
          window.removeEventListener('storage', loginHandler);
          clearInterval(closeCheck);
        }, 10000);
      };
      document.getElementById('loginRequiredClose').onclick = () => {
        modal.classList.remove('active');
      };
      // Also close on outside click
      modal.onclick = (e) => {
        if (e.target === modal) modal.classList.remove('active');
      };
    }

    // --- PayPal Smart Payment Button Integration ---
    function renderPayPalButton(model) {
      const container = document.getElementById('paypal-button-container');
      const paidDownloadBtn = document.getElementById('paidDownloadBtn');
      if (!container) return;
      container.innerHTML = '';
      paidDownloadBtn.style.display = 'none'; // Hide by default

      // --- SESSION PURCHASE STATE ---
      // Use a session variable to track purchased model IDs (not persistent)
      window._sessionPurchasedModels = window._sessionPurchasedModels || {};
      // Helper to check if purchased in this session
      function isModelPurchasedSession(id) {
        return !!window._sessionPurchasedModels[id];
      }
      // Helper to set purchased in this session
      function setModelPurchasedSession(id) {
        window._sessionPurchasedModels[id] = true;
        // Also save to user purchase history if logged in
        if (currentUser) {
          let purchased = getUserPurchased();
          if (!purchased.includes(id)) {
            purchased.push(id);
            saveUserPurchased(purchased);
          }
        }
      }

      // If already purchased in this session, show download button immediately
      if (isModelPurchasedSession(model.id)) {
        paidDownloadBtn.style.display = 'block';
        // Hide PayPal button
        container.innerHTML = '<div style="color:#4CAF50;font-weight:600;font-size:1.1rem;text-align:center;margin:1.5rem 0;">Purchased ✔</div>';
        return;
      }

      paidDownloadBtn.onclick = function() {
        // Always use the current model (from payment context)
        const format = 'fbx';
        const modelName = model ? model.title.replace(/\s+/g, '_') : 'model';
        // Check what formats are actually available for this model
        const availableFormats = getAvailableFormats(model);
        if (!availableFormats.includes(format)) {
          alert(`Sorry, ${format.toUpperCase()} format is not available for this model yet.\n\nAvailable formats: ${availableFormats.map(f => f.toUpperCase()).join(', ')}`);
          return;
        }
        // Get the correct file URL for this format
        const fileUrl = getFileUrlForFormat(model, format);
        if (!fileUrl) {
          alert(`Download not available for ${format.toUpperCase()} format.`);
          return;
        }
        // Create download link
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = `${modelName}.${format}`;
        link.style.display = 'none';
        // Trigger download
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        // Show success message (same as free download)
        alert(`Downloading ${modelName}.${format}...`);
      };
      // Remove any previous PayPal button if present
      if (window.paypal && container) {
        window.paypal.Buttons({
          style: {
            color: 'gold',
            shape: 'rect',
            label: 'paypal',
            layout: 'vertical',
            height: 45,
          },
          createOrder: function(data, actions) {
            return actions.order.create({
              purchase_units: [{
                amount: {
                  value: Number(model.price).toFixed(2),
                  currency_code: 'USD',
                },
                description: model.title,
                shipping_preference: 'NO_SHIPPING',
              }],
              application_context: {
                shipping_preference: 'NO_SHIPPING',
              }
            });
          },
          onApprove: function(data, actions) {
            return actions.order.capture().then(function(details) {
              // After successful payment, show the download button and mark as purchased in session
              if (model && model.fbx) {
                setModelPurchasedSession(model.id);
                paidDownloadBtn.style.display = 'block';
                // Hide PayPal button and show Purchased label
                container.innerHTML = '<div style="color:#4CAF50;font-weight:600;font-size:1.1rem;text-align:center;margin:1.5rem 0;">Purchased ✔</div>';
              } else {
                paidDownloadBtn.style.display = 'none';
                alert('No FBX file available for this model.');
              }
            });
          },
          onError: function(err) {
            alert('Payment could not be completed. Please try again.');
          }
        }).render('#paypal-button-container');
      }
    }

    // --- Update Buy Now button on model page for session-purchased state ---
    function updateModelPagePurchaseUI(model) {
      // Only for paid models
      if (!model || !model.price || model.price === 0) return;
      window._sessionPurchasedModels = window._sessionPurchasedModels || {};
      const purchased = !!window._sessionPurchasedModels[model.id];
      if (purchased) {
        buyNowBtn.style.display = 'none';
        // Insert or show a Purchased label in the same place
        let purchasedLabel = document.getElementById('purchasedLabel');
        if (!purchasedLabel) {
          purchasedLabel = document.createElement('span');
          purchasedLabel.id = 'purchasedLabel';
          purchasedLabel.textContent = 'Purchased';
          purchasedLabel.style.cssText = buyNowBtn.style.cssText + ';background:#4CAF50;opacity:0.95;cursor:default;pointer-events:none;display:block;text-align:center;font-weight:600;font-size:1rem;border-radius:8px;margin-left:auto;margin-top:0.5rem;min-width:110px;max-width:160px;padding:0.5rem 1.25rem;box-shadow:0 2px 8px rgba(0,0,0,0.10);';
          buyNowBtn.parentNode.insertBefore(purchasedLabel, buyNowBtn);
        } else {
          purchasedLabel.style.display = 'block';
        }
        // Show Download FBX button
        downloadBtn.style.display = 'block';
        priceLabel.style.display = 'none';
      } else {
        // Not purchased: restore normal state
        buyNowBtn.style.display = 'block';
        let purchasedLabel = document.getElementById('purchasedLabel');
        if (purchasedLabel) purchasedLabel.style.display = 'none';
        downloadBtn.style.display = 'none';
        priceLabel.style.display = 'inline-block';
        priceLabel.textContent = `$${Number(model.price).toFixed(2)} USD`;
      }
    }

    // Patch openModelPage to call updateModelPagePurchaseUI
    const _originalOpenModelPage = openModelPage;
    openModelPage = function(m, fromHomepage = true) {
      _originalOpenModelPage(m, fromHomepage);
      updateModelPagePurchaseUI(m);
    };

    // Patch buyNowBtn.onclick to also update model page UI after purchase
    const _originalRenderPayPalButton = renderPayPalButton;
    renderPayPalButton = function(model) {
      _originalRenderPayPalButton(model);
      // After rendering PayPal, also update model page UI if returning
      updateModelPagePurchaseUI(model);
    };

    // When returning to checkout page, update UI for session-purchased state
    const _originalBackCheckout = backCheckout.onclick;
    backCheckout.onclick = function() {
      if (lastOpenedModel) {
        checkoutPage.style.display = 'none';
        openModelPage(lastOpenedModel);
        // If purchased, and user goes back to checkout, show download button and purchased label
        if (window._sessionPurchasedModels && window._sessionPurchasedModels[lastOpenedModel.id]) {
          renderPayPalButton(lastOpenedModel);
        }
      } else {
        // Fallback: go to home/shop
        checkoutPage.style.display = 'none';
        modelPage.style.display = 'none';
        mainContent.style.display = 'block';
        navbarSearch.value = '';
        heroSearch.parentElement.classList.remove('hide');
        topSearchbar.style.display = 'none';
        if(homepageBanner) homepageBanner.style.display = '';
        window.scrollTo(0,0);
      }
    };

    // --- Comments Logic ---
    function renderComments(modelId) {
      const section = document.getElementById('commentsSection');
      const header = document.getElementById('commentsHeader');
      if (!section || !header) return;
      section.innerHTML = '';
      // Get comments from localStorage (per model)
      const comments = JSON.parse(localStorage.getItem('comments_' + modelId) || '[]');
      // Comments header
      header.textContent = `${comments.length} Comment${comments.length === 1 ? '' : 's'}`;
      // Comments list
      const list = document.createElement('div');
      list.id = 'commentsList';
      comments.forEach(c => {
        const item = document.createElement('div');
        item.style = 'display:flex;align-items:flex-start;gap:0.7rem;margin-bottom:1.1rem;';
        item.innerHTML = `
          <div style="width:38px;height:38px;border-radius:50%;background:#232326;display:flex;align-items:center;justify-content:center;">
            <img src="${c.avatar || DEFAULT_PROFILE_IMAGE}" alt="avatar" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
          </div>
          <div style="flex:1;">
            <div style="font-weight:600;font-size:1rem;color:#ffb74d;">${c.name || 'User'}</div>
            <div style="color:#fff;font-size:0.98rem;margin-top:0.1rem;">${c.text}</div>
            <div style="color:#aaa;font-size:0.78rem;margin-top:0.2rem;">${new Date(c.time).toLocaleString()}</div>
          </div>
        `;
        list.appendChild(item);
      });
      section.appendChild(list);
      // Only show comment box if logged in
      if (currentUser) {
        const box = document.createElement('div');
        box.style = 'display:flex;align-items:flex-start;gap:0.7rem;margin-top:0.5rem;';
        box.innerHTML = `
          <div style="width:38px;height:38px;border-radius:50%;background:#232326;display:flex;align-items:center;justify-content:center;">
            <img src="${currentUser.image || DEFAULT_PROFILE_IMAGE}" alt="avatar" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
          </div>
          <form id="commentForm" style="flex:1;display:flex;align-items:center;gap:0.7rem;">
            <input id="commentInput" type="text" maxlength="300" placeholder="Like this model? Let the creator know!" style="flex:1;padding:0.7rem 1rem;border-radius:8px;border:1.5px solid #444;background:#232326;color:#fff;font-size:1.05rem;outline:none;transition:border 0.18s;" required />
            <button class="btn" style="padding:0.6rem 1.2rem;font-size:1rem;" type="submit">Send</button>
          </form>
        `;
        section.appendChild(box);
        // Add submit handler
        box.querySelector('#commentForm').onsubmit = function(e) {
          e.preventDefault();
          const input = box.querySelector('#commentInput');
          const text = input.value.trim();
          if (!text) return;
          // Save comment
          const newComment = {
            name: currentUser.name || 'User',
            avatar: currentUser.image || DEFAULT_PROFILE_IMAGE,
            text,
            time: Date.now()
          };
          comments.push(newComment);
          localStorage.setItem('comments_' + modelId, JSON.stringify(comments));
          input.value = '';
          renderComments(modelId);
        };
      }
    }
    // Call renderComments when opening a model page
    const originalOpenModelPage = openModelPage;
    openModelPage = function(m, fromHomepage = true) {
      originalOpenModelPage(m, fromHomepage);
      renderComments(m.id);
    };
    // Also update comments when login/logout
    const originalUpdateAuthUI = updateAuthUI;
    updateAuthUI = function() {
      originalUpdateAuthUI();
      if (lastOpenedModel) renderComments(lastOpenedModel.id);
    };

   // --- Google Identity Services Login ---
function handleGoogleCredentialResponse(response) {
  try {
    const decoded = jwt_decode(response.credential);
    let users = getUsers();
    let user = users.find(u => u.provider === 'google' && (u.sub === decoded.sub || u.email === decoded.email));
    if (!user) {
      user = {
        name: decoded.name,
        email: decoded.email,
        image: decoded.picture,
        sub: decoded.sub,
        provider: 'google',
        likes: [],
        myList: [],
        purchased: []
      };
      users.push(user);
      saveUsers(users);
    }
    localStorage.setItem('user', JSON.stringify(user));
    localStorage.setItem('currentUser', JSON.stringify(user));
    window.location.href = 'index.html';
  } catch (err) {
    alert('Google login failed: ' + (err?.message || err));
  }
}

// --- Initialize Google Sign-In buttons ---
window.addEventListener('DOMContentLoaded', () => {
  if (window.google?.accounts?.id) {
    window.google.accounts.id.initialize({
      client_id: '665196132587-cbo8bflq7cstp7mjjcudoa1k5fu1ftss.apps.googleusercontent.com', // ← זה ה־Client ID שלך
      callback: handleGoogleCredentialResponse,
      ux_mode: 'popup' // Using popup, so no redirect_uri needed
    });

    // Render login button
    const loginBtn = document.getElementById('g_id_signin');
    if (loginBtn) {
      window.google.accounts.id.renderButton(loginBtn, {
        theme: 'outline',
        size: 'large',
        width: 280,
        text: 'signin_with',
        shape: 'rectangular',
        logo_alignment: 'left'
      });
    }

    // Render sign-up button
    const signupBtn = document.getElementById('g_id_signup');
    if (signupBtn) {
      window.google.accounts.id.renderButton(signupBtn, {
        theme: 'outline',
        size: 'large',
        width: 280,
        text: 'signup_with',
        shape: 'rectangular',
        logo_alignment: 'left'
      });
    }
  }
});


    // --- LOGIN MODAL ANIMATION LOGIC ---
    // Utility: add/remove class helpers
    function addClass(el, cls) { if (el && !el.classList.contains(cls)) el.classList.add(cls); }
    function removeClass(el, cls) { if (el && el.classList.contains(cls)) el.classList.remove(cls); }

    // Patch openModal and closeModal for login modal animation
    const _originalOpenModal = openModal;
    openModal = function(m) {
      if (m === loginModal) {
        // Add animation class
        addClass(m, 'login-animate');
        // Remove closing state if present
        removeClass(m, 'closing');
        // Add active to trigger animation
        setTimeout(() => addClass(m, 'active'), 10);
        // Prevent scroll on body
        addClass(document.body, 'login-modal-open');
        // Focus first input after animation
        setTimeout(() => {
          const firstInput = m.querySelector('input');
          if (firstInput) firstInput.focus();
        }, 500);
        showLogin();
        clearAllErrors();
      } else {
        _originalOpenModal(m);
      }
    };
    const _originalCloseModal = closeModal;
    closeModal = function(m) {
      if (m === loginModal && m.classList.contains('login-animate')) {
        // Animate out
        addClass(m, 'closing');
        removeClass(m, 'active');
        // Remove scroll lock after animation
        setTimeout(() => {
          removeClass(m, 'closing');
          removeClass(m, 'login-animate');
          removeClass(document.body, 'login-modal-open');
          // Actually hide modal (display:none)
          m.classList.remove('active');
        }, 420);
      } else {
        _originalCloseModal(m);
      }
    };
    // --- ENLARGE LOG IN AND SIGN UP BUTTONS ---
    // Add enlarged class on DOMContentLoaded
    window.addEventListener('DOMContentLoaded', () => {
      addClass(document.getElementById('loginBtn'), 'enlarged');
      addClass(document.getElementById('signupBtn'), 'enlarged');
    });

    const backToShopSearch = document.getElementById('backToShopSearch');

    // Show the button after a search is performed
    function showBackToShopButton() {
      backToShopSearch.style.display = 'block';
    }
    function hideBackToShopButton() {
      backToShopSearch.style.display = 'none';
    }

    // Update search logic to show/hide the button
    heroSearch.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        // ... existing code ...
        showBackToShopButton();
      }
    });
    navbarSearch.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        // ... existing code ...
        showBackToShopButton();
      }
    });
    // Hide the button when returning to homepage
    navbarSearch.addEventListener('input', e => {
      if (e.target.value.trim() === '') {
        hideBackToShopButton();
      }
    });
    // Also hide when navigating away from search results
    function hideSearchResultsAndBackButton() {
      hideBackToShopButton();
    }
    // Attach to all navigation that returns to homepage
    backToShopSearch.onclick = () => {
      // Hide search results and button, show homepage
      mainContent.style.display = 'block';
      homepageBanner.style.display = '';
      topSearchbar.style.display = 'none';
      heroSearch.parentElement.classList.remove('hide');
      navbarSearch.value = '';
      renderGallery(models, true);
      hideBackToShopButton();
      window.scrollTo(0,0);
    };
    // Also hide on initial load
    window.addEventListener('DOMContentLoaded', () => {
      hideBackToShopButton();
    });
  </script>
</body>
</html>
