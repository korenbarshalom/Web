using UnityEngine;
using System.Collections;
using TMPro; // TextMesh Pro
using System.Collections.Generic;

public class WeaponSwitcher : MonoBehaviour
{
    // --- Weapon Switching & Shooting Settings ---
    public GameObject gun;         // Weapon 1 (e.g., Rifle)
    public GameObject ak47;        // AK47
    public GameObject knife;       // Knife
    public GameObject pistol;      // Pistol
    public GameObject extraWeapon; // נשק נוסף – יוצג בגלגלת רק לאחר פתיחה

    // General shooting settings for the rifle
    public GameObject bulletPrefab; // Bullet prefab
    public Transform firePoint;     // Fire point for the rifle
    public float bulletSpeed = 20f; // Bullet speed
    public float fireRate = 0.5f;   // Fire rate for the rifle
    public ParticleSystem muzzleFlash; // Muzzle flash Particle System for the rifle

    // שדות סאונד הירי
    public AudioClip gunShootSound;
    public float gunShootVolume = 1f;
    public AudioSource gunAudioSource;

    // שדות סאונד הרילוד
    public AudioClip reloadSound;
    public float reloadVolume = 1f;
    public AudioSource reloadAudioSource;

    // שדות סאונד לקיחת הנשק (Gun Pick Up)
    public AudioClip gunPickupSound;
    public AudioSource gunPickupAudioSource;

    // Shooting settings for the AK47
    public Transform akFirePoint;
    public float akFireRate = 0.3f;
    public ParticleSystem akMuzzleFlash;

    public Transform bulletsParent;

    // ניהול ירי
    private float nextFireTime = 0f;
    private bool isReloading = false;

    // ניהול כדורים – הגדרות של מאגר וקליפ
    public int maxAmmo = 90;    // סך כל הכדורים (כולל קליפ + מאגר)
    public int clipSize = 30;   // מספר כדורים בכל קליפ
    private int gunCurrentAmmo; // כדורים בקליפ של הגאן
    private int gunReserveAmmo; // כדורים במאגר של הגאן
    private int ak47CurrentAmmo; // כדורים בקליפ של ה-AK47
    private int ak47ReserveAmmo; // כדורים במאגר של ה-AK47

    // Recoil settings for shooting weapons
    public float recoilAmount = 0.1f;
    public float recoilSpeed = 5f;
    private Vector3 initialGunPosition;
    private Vector3 initialAK47Position;

    // הגדרת אנימציית הזזת ה־slides (לרילוד)
    public Transform[] slides;
    public float slideBackDistance = 0.2f;
    public float slideAnimDuration = 0.2f;
    private Vector3[] initialSlidePositions;
    public Vector3 slideDirection = new Vector3(1f, 0f, 0f);

    // מערך הנשקים והאינדקס של הנשק הפעיל
    private int currentWeaponIndex = 0;
    private GameObject[] weapons;

    // Weapon sway settings
    [Header("Weapon Sway Settings")]
    public float swayAmount = 0.05f;
    public float swaySmoothing = 5f;
    private Vector3[] initialPositions;
    private Quaternion[] initialRotations;  // שמירת סיבובי הנשקים ההתחלתיים

    // Unlock settings for AK47
    private bool akUnlocked = false;
    public Transform akPickupObject;

    // Pickup object for Extra Weapon
    // האובייקט הזה מופיע בעולם עד שהשחקן לוחץ עליו
    public Transform extraWeaponPickupObject;
    private bool extraWeaponUnlocked = false;

    // No-shoot zone
    public Transform noShootObject;
    public Transform player;

    // TextMesh Pro for ammo countdown
    public TMP_Text ammoCountdownText;

    // Ammo pickups – כל אחד מוסיף 15 כדורים למאגר
    public GameObject[] ammoPickupObjects;
    private bool[] ammoPickupUsedFlags;

    // שדות לבוסט
    public float backwardBoost = 10f;
    public float upwardBoost = 5f;
    public float boostCooldown = 15f;
    private float lastBoostTime = -15f;
    public PlayerMovement playerMovement;

    // מעבר חלק בין הנשקים
    [Header("Weapon Switch Smooth Transition")]
    public float switchOutDuration = 0.25f;
    public float switchInDuration = 0.25f;
    private bool isSwitching = false;

    private void Start()
    {
        // אתחול מערך הנשקים – הסדר חשוב: gun, ak47, knife, pistol, extraWeapon
        weapons = new GameObject[] { gun, ak47, knife, pistol, extraWeapon };

        // שמירת המיקום והסיבוב ההתחלתי לכל נשק לצורך אנימציות sway והחלפה
        initialPositions = new Vector3[weapons.Length];
        initialRotations = new Quaternion[weapons.Length];
        for (int i = 0; i < weapons.Length; i++)
        {
            if (weapons[i] != null)
            {
                initialPositions[i] = weapons[i].transform.localPosition;
                initialRotations[i] = weapons[i].transform.localRotation;
            }
        }

        // הפעלה מיידית של הנשק הראשון (index 0)
        SwitchWeaponImmediate(0);

        // שמירת מיקום התחלתי עבור הנשקים עם recoil
        if (gun != null)
        {
            initialGunPosition = gun.transform.localPosition;
        }
        if (ak47 != null)
        {
            initialAK47Position = ak47.transform.localPosition;
        }

        // שמירת המיקום ההתחלתי של כל slide במערך (אם הוגדר)
        if (slides != null && slides.Length > 0)
        {
            initialSlidePositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                if (slides[i] != null)
                    initialSlidePositions[i] = slides[i].localPosition;
            }
        }

        // אתחול משתני כדורים לנשקים – קליפ מלא ומאגר בהתאם
        gunCurrentAmmo = clipSize;
        gunReserveAmmo = maxAmmo - clipSize;
        ak47CurrentAmmo = clipSize;
        ak47ReserveAmmo = maxAmmo - clipSize;

        // אתחול דגלי אחסון לאמפאפים
        if (ammoPickupObjects != null && ammoPickupObjects.Length > 0)
        {
            ammoPickupUsedFlags = new bool[ammoPickupObjects.Length];
        }
    }

    private void Update()
    {
        // --- פתיחת AK47 ---
        if (!akUnlocked && akPickupObject != null && Input.GetKeyDown(KeyCode.F))
        {
            float distance = Vector3.Distance(transform.position, akPickupObject.position);
            if (distance <= 3f)
            {
                akUnlocked = true;
                Debug.Log("AK47 unlocked!");

                // השמעת סאונד לקיחת הנשק (gun pick up)
                if (gunPickupSound != null && gunPickupAudioSource != null)
                {
                    gunPickupAudioSource.PlayOneShot(gunPickupSound);
                }

                Destroy(akPickupObject.gameObject);
                if (currentWeaponIndex != 1)
                {
                    StartCoroutine(SmoothSwitchWeapon(1));
                }
            }
        }

        // --- Extra Weapon Pickup ---
        // כאשר השחקן לוחץ על מקש E במרחק 5 מטר מהאובייקט, נסמן את extraWeaponUnlocked,
        // ונפעיל מעבר חלק ל-extraWeapon (באינדקס 4), בדומה להחלפות האחרות.
        if (!extraWeaponUnlocked && extraWeaponPickupObject != null && Input.GetKeyDown(KeyCode.F))
        {
            float dist = Vector3.Distance(player.position, extraWeaponPickupObject.position);
            if (dist <= 5f)
            {
                extraWeaponUnlocked = true;
                Debug.Log("Extra Weapon unlocked!");
                StartCoroutine(SmoothSwitchWeapon(4));
                Destroy(extraWeaponPickupObject.gameObject);
            }
        }

        // --- החלפת נשקים בגלגלת העכבר ---
        float scroll = Input.GetAxis("Mouse ScrollWheel");
        if (scroll != 0f && !isSwitching)
        {
            int direction = scroll > 0f ? 1 : -1;
            int nextIndex = currentWeaponIndex;
            int attempts = 0;
            do
            {
                nextIndex = (nextIndex + direction + weapons.Length) % weapons.Length;
                attempts++;
                if (attempts > weapons.Length) break;
            }
            // דילוג על נשקים שלא נפתחו (AK47 ו-extraWeapon)
            while ((weapons[nextIndex] == ak47 && !akUnlocked) || (weapons[nextIndex] == extraWeapon && !extraWeaponUnlocked));

            if (nextIndex != currentWeaponIndex)
            {
                StartCoroutine(SmoothSwitchWeapon(nextIndex));
            }
        }

        // --- בדיקה האם מותר לירות ---
        bool canShoot = true;
        if (noShootObject != null && player != null)
        {
            float distanceToNoShoot = Vector3.Distance(player.position, noShootObject.position);
            if (distanceToNoShoot <= 5f)
            {
                canShoot = false;
            }
        }

        // --- ירי בגאן ---
        if (gun.activeSelf && Input.GetButton("Fire1") && !isReloading && canShoot)
        {
            if (gunCurrentAmmo > 0)
            {
                if (Time.time >= nextFireTime)
                {
                    Shoot(firePoint, muzzleFlash);
                    if (gunShootSound != null && gunAudioSource != null)
                    {
                        gunAudioSource.volume = gunShootVolume;
                        gunAudioSource.PlayOneShot(gunShootSound, gunShootVolume);
                    }
                    nextFireTime = Time.time + fireRate;
                    gunCurrentAmmo--;
                    if (gunCurrentAmmo == 0 && gunReserveAmmo > 0)
                    {
                        StartCoroutine(Reload());
                    }
                }
            }
            else
            {
                Debug.Log("No more ammo in the gun!");
            }
        }
        // --- ירי ב־AK47 ---
        else if (ak47.activeSelf && Input.GetButton("Fire1") && !isReloading && canShoot)
        {
            if (ak47CurrentAmmo > 0)
            {
                if (Time.time >= nextFireTime)
                {
                    Shoot(akFirePoint, akMuzzleFlash);
                    if (gunShootSound != null && gunAudioSource != null)
                    {
                        gunAudioSource.volume = gunShootVolume;
                        gunAudioSource.PlayOneShot(gunShootSound, gunShootVolume);
                    }
                    nextFireTime = Time.time + akFireRate;
                    ak47CurrentAmmo--;
                    if (ak47CurrentAmmo == 0 && ak47ReserveAmmo > 0)
                    {
                        StartCoroutine(Reload());
                    }
                }
            }
            else
            {
                Debug.Log("No more ammo in the AK47!");
            }
        }

        // --- בוסט במקשי C לנשק הגאן ---
        if (gun.activeSelf && Input.GetKeyDown(KeyCode.C))
        {
            if (Time.time >= lastBoostTime + boostCooldown)
            {
                if (playerMovement != null)
                {
                    Vector3 boost = (-playerMovement.transform.forward * backwardBoost) + (Vector3.up * upwardBoost);
                    playerMovement.ApplyBoost(boost);
                    lastBoostTime = Time.time;
                    Debug.Log("Boost applied to the player!");
                }
                else
                {
                    Debug.LogWarning("PlayerMovement not assigned!");
                }
            }
            else
            {
                float timeLeft = (lastBoostTime + boostCooldown) - Time.time;
                Debug.Log("Boost on cooldown. Try again in " + timeLeft.ToString("F1") + " seconds.");
            }
        }

        // --- Recoil & Weapon Sway ---
        if (gun.activeSelf)
        {
            Vector3 recoilTarget = initialGunPosition + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            gun.transform.localPosition = Vector3.Lerp(gun.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (ak47.activeSelf)
        {
            Vector3 recoilTarget = initialAK47Position + (Input.GetButton("Fire1") ? -Vector3.forward * recoilAmount : Vector3.zero);
            Vector3 swayOffset = new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            Vector3 combinedTarget = recoilTarget + swayOffset;
            ak47.transform.localPosition = Vector3.Lerp(ak47.transform.localPosition, combinedTarget, Time.deltaTime * recoilSpeed);
        }
        if (knife.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, knife);
            Vector3 target = initialPositions[index] + new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            knife.transform.localPosition = Vector3.Lerp(knife.transform.localPosition, target, Time.deltaTime * swaySmoothing);
        }
        if (pistol.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, pistol);
            Vector3 target = initialPositions[index] + new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            pistol.transform.localPosition = Vector3.Lerp(pistol.transform.localPosition, target, Time.deltaTime * swaySmoothing);
        }
        if (extraWeapon != null && extraWeapon.activeSelf)
        {
            int index = System.Array.IndexOf(weapons, extraWeapon);
            Vector3 target = initialPositions[index] + new Vector3(-Input.GetAxis("Mouse X") * swayAmount, -Input.GetAxis("Mouse Y") * swayAmount, 0);
            extraWeapon.transform.localPosition = Vector3.Lerp(extraWeapon.transform.localPosition, target, Time.deltaTime * swaySmoothing);
        }

        // --- שימוש ב־Knife ---
        if (knife.activeSelf && Input.GetButtonDown("Fire2"))
        {
            UseKnife();
        }

        // --- עדכון תצוגת כדורים ---
        if (gun.activeSelf)
        {
            ammoCountdownText.text = gunCurrentAmmo.ToString() + " / " + gunReserveAmmo.ToString();
        }
        else if (ak47.activeSelf)
        {
            ammoCountdownText.text = ak47CurrentAmmo.ToString() + " / " + ak47ReserveAmmo.ToString();
        }
        else
        {
            ammoCountdownText.text = "";
        }

        // --- טיפול באספני כדורים (Ammo Pickups) ---
        if (ammoPickupObjects != null && ammoPickupUsedFlags != null)
        {
            for (int i = 0; i < ammoPickupObjects.Length; i++)
            {
                if (!ammoPickupUsedFlags[i] && ammoPickupObjects[i] == null)
                {
                    // מוסיפים 15 כדורים למאגר, עד למקסימום (maxAmmo - clipSize)
                    gunReserveAmmo = Mathf.Min(gunReserveAmmo + 15, maxAmmo - clipSize);
                    ak47ReserveAmmo = Mathf.Min(ak47ReserveAmmo + 15, maxAmmo - clipSize);
                    ammoPickupUsedFlags[i] = true;
                    Debug.Log("Ammo pickup applied: +15 bullets to both gun and AK47");
                }
            }
        }
    }

    private void Shoot(Transform point, ParticleSystem flash)
    {
        Quaternion adjustedRotation = point.rotation * Quaternion.Euler(90f, 0f, 0f);
        GameObject bullet = Instantiate(bulletPrefab, point.position, adjustedRotation);

        if (bulletsParent != null)
        {
            bullet.transform.SetParent(bulletsParent);
        }

        Rigidbody rb = bullet.GetComponent<Rigidbody>();
        rb.linearVelocity = point.forward * bulletSpeed;

        Destroy(bullet, 4f);

        if (flash != null)
        {
            flash.Play();
        }
    }

    private IEnumerator Reload()
    {
        isReloading = true;
        Debug.Log("Reloading...");

        if (gun.activeSelf)
        {
            if (reloadSound == null)
            {
                Debug.LogWarning("Reload sound clip is not assigned!");
            }
            if (reloadAudioSource == null)
            {
                Debug.LogWarning("Reload AudioSource is not assigned!");
            }
            else if (reloadSound != null)
            {
                reloadAudioSource.PlayOneShot(reloadSound, reloadVolume);
            }
        }

        if (slides != null && slides.Length > 0)
        {
            Vector3[] targetPositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                targetPositions[i] = initialSlidePositions[i] + slideDirection.normalized * slideBackDistance;
            }
            float elapsed = 0f;
            while (elapsed < slideAnimDuration)
            {
                for (int i = 0; i < slides.Length; i++)
                {
                    slides[i].localPosition = Vector3.Lerp(initialSlidePositions[i], targetPositions[i], elapsed / slideAnimDuration);
                }
                elapsed += Time.deltaTime;
                yield return null;
            }
            for (int i = 0; i < slides.Length; i++)
            {
                slides[i].localPosition = targetPositions[i];
            }
        }

        yield return new WaitForSeconds(0.05f);

        if (slides != null && slides.Length > 0)
        {
            Vector3[] targetPositions = new Vector3[slides.Length];
            for (int i = 0; i < slides.Length; i++)
            {
                targetPositions[i] = initialSlidePositions[i] + slideDirection.normalized * slideBackDistance;
            }
            float elapsed = 0f;
            while (elapsed < slideAnimDuration)
            {
                for (int i = 0; i < slides.Length; i++)
                {
                    slides[i].localPosition = Vector3.Lerp(targetPositions[i], initialSlidePositions[i], elapsed / slideAnimDuration);
                }
                elapsed += Time.deltaTime;
                yield return null;
            }
            for (int i = 0; i < slides.Length; i++)
            {
                slides[i].localPosition = initialSlidePositions[i];
            }
        }

        if (gun.activeSelf)
        {
            int needed = clipSize - gunCurrentAmmo;
            if (gunReserveAmmo >= needed)
            {
                gunCurrentAmmo = clipSize;
                gunReserveAmmo -= needed;
            }
            else
            {
                gunCurrentAmmo += gunReserveAmmo;
                gunReserveAmmo = 0;
            }
        }
        else if (ak47.activeSelf)
        {
            int needed = clipSize - ak47CurrentAmmo;
            if (ak47ReserveAmmo >= needed)
            {
                ak47CurrentAmmo = clipSize;
                ak47ReserveAmmo -= needed;
            }
            else
            {
                ak47CurrentAmmo += ak47ReserveAmmo;
                ak47ReserveAmmo = 0;
            }
        }

        nextFireTime = Time.time;
        isReloading = false;
    }

    // מעבר מיידי ללא אנימציה (למשל בהתחלה)
    private void SwitchWeaponImmediate(int weaponIndex)
    {
        for (int i = 0; i < weapons.Length; i++)
        {
            if (weapons[i] != null)
                weapons[i].SetActive(i == weaponIndex);
        }
        currentWeaponIndex = weaponIndex;
    }

    // מעבר חלק בין הנשקים – כולל שינוי מיקום וסיבוב (בדומה לאנימציה שבה מרימים את הנשק)
    private IEnumerator SmoothSwitchWeapon(int newIndex)
    {
        if (isSwitching)
            yield break;
        isSwitching = true;

        if (newIndex == currentWeaponIndex)
        {
            isSwitching = false;
            yield break;
        }

        // אנימציה של הוצאת הנשק הנוכחי
        GameObject currentWeapon = weapons[currentWeaponIndex];
        Vector3 startPos = currentWeapon.transform.localPosition;
        Quaternion startRot = currentWeapon.transform.localRotation;
        Vector3 exitPos = startPos + new Vector3(0, -0.5f, 0);
        Quaternion exitRot = Quaternion.Euler(0, 0, -30) * startRot;
        float timer = 0f;
        while (timer < switchOutDuration)
        {
            timer += Time.deltaTime;
            float t = timer / switchOutDuration;
            currentWeapon.transform.localPosition = Vector3.Lerp(startPos, exitPos, t);
            currentWeapon.transform.localRotation = Quaternion.Slerp(startRot, exitRot, t);
            yield return null;
        }
        currentWeapon.transform.localPosition = exitPos;
        currentWeapon.transform.localRotation = exitRot;
        currentWeapon.SetActive(false);

        // מעבר לנשק החדש
        currentWeaponIndex = newIndex;
        GameObject newWeapon = weapons[newIndex];
        newWeapon.SetActive(true);
        Vector3 newInitialPos = initialPositions[newIndex];
        Quaternion newInitialRot = initialRotations[newIndex];
        Vector3 entryPos = newInitialPos + new Vector3(0, -0.5f, 0);
        Quaternion entryRot = Quaternion.Euler(0, 0, 30) * newInitialRot;
        newWeapon.transform.localPosition = entryPos;
        newWeapon.transform.localRotation = entryRot;

        timer = 0f;
        while (timer < switchInDuration)
        {
            timer += Time.deltaTime;
            float t = timer / switchInDuration;
            newWeapon.transform.localPosition = Vector3.Lerp(entryPos, newInitialPos, t);
            newWeapon.transform.localRotation = Quaternion.Slerp(entryRot, newInitialRot, t);
            yield return null;
        }
        newWeapon.transform.localPosition = newInitialPos;
        newWeapon.transform.localRotation = newInitialRot;

        isSwitching = false;
    }

    private void UseKnife()
    {
        Debug.Log("Used Knife");
    }
}
