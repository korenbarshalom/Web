using System;
using System.Collections;
using UnityEngine;

public class GrapplingGun : MonoBehaviour
{
    [Header("Rope Settings")]
    public GameObject ropePrefab;
    public Transform gunTip;
    public float ropeSpeed = 10f;
    public Material ropeMaterial;

    [Header("Layers & Tags")]
    public LayerMask wallLayer;

    [Header("Player & Camera")]
    public GameObject playerGun; // האקדח של השחקן
    public Camera mainCamera;

    [Header("Swing Settings")]
    public float swingAcceleration = 2f; // שמורה לשימוש עתידי, אך לא בשימוש במצב הסווינג הפיזיקלי

    [Header("Fling Settings")]
    public float flingForce = 10f;
    public float flingSensitivity = 0.1f;
    public float hitOffset = 0.5f;
    public float minDistance = 1f;

    [Header("Zipline Hit Indicator")]
    public GameObject redDotPrefab; // prefab של הנקודה האדומה

    [Header("Initial Rotation Reference")]
    public Transform initialRotationReference; // אובייקט ריק שמייצג את הרוטציה ההתחלתית (למשל, (0,180,0))

    [Header("Gun Rotation Settings")]
    public float gunRotationSpeed = 100f; // מהירות סיבוב האקדח בזמן הסווינג (במעלות לשנייה)

    // משתנים פנימיים לניהול החבל והגרבינג
    private GameObject currentRope;
    private Vector3 targetPoint;
    private GameObject currentRedDot;

    // משתנים לסווינג
    public bool isSwinging = false;
    public bool justLanded = false;
    private float currentSwingSpeed = 0f;

    // משתנים עבור לחיצה שמאלית (גרבינג על עצם)
    private bool isLeftRope = false;
    private Rigidbody targetRigidbody;
    private Vector3 lastMousePositionLeftFling;
    private Vector3 targetLocalOffsetLeftRope;

    // משתנים לשמירת הכוח האחרון ולעקוב אחרי תנועת המצלמה
    private Vector3 lastFlingForce;
    private Vector3 lastCameraPosition;
    private Vector3 lastGunForward;
    private Vector3 grapplePoint;

    private SpringJoint joint;

    [Header("Swing Options")]
    public float damper = 0.5f;              // דמפר נמוך לקבלת תנועה חלקה
    public float swing = 70f;                // כוח קפיץ גבוה לסווינג מהיר
    public float massScale = 1f;
    public float swingMaxDistance = 1f;
    public float swingMinDistance = 0.5f;

    [Header("Boost Settings On Stop")]
    public float upwardBoostOnStop = 0.5f;   // בוסט קטן כלפי מעלה
    public float forwardBoostOnStop = 1f;    // בוסט קטן כלפי קדימה

    // משתנים לצבירת מומנטום בסווינג
    [Header("Momentum Accumulation Settings")]
    public float momentumIncreaseRate = 1f;  // קצב עליית המומנטום
    public float maxMomentumBoost = 10f;     // מומנטום מקסימלי
    private float accumulatedMomentumBoost = 0f; // משתנה פנימי לצבירת מומנטום

    // משתנים להוספת כוח כבידה נוסף במצב סווינג
    [Header("Extra Gravity Settings")]
    public float extraGravity = 5f; // כוח כבידה נוסף במהלך הסווינג

    // משתנים להאצת נפילה גם לאחר סיום הסווינג
    [Header("Post-Swing Extra Gravity")]
    public float extraDownwardBoost = 5f; // בוסט נוסף כלפי מטה לאחר סיום הסווינג

    // הפניות לרכיבים
    private PlayerMovement playerMovement;
    private CharacterController controller;
    private Rigidbody rb;

    // משתנה לשמירת מצב הגרביטציה המקורי
    private bool originalUseGravity;

    // ניהול קורוטינות לניתוק אוטומטי
    private Coroutine autoDetachCoroutine;
    private Coroutine movementCoroutine;

    public bool isAttached = false;

    // משתנה לשמירת זמן ההתחברות של החבל
    private float ropeAttachTime = 0f;

    private void Awake()
    {
        playerMovement = GetComponent<PlayerMovement>();
        controller = GetComponent<CharacterController>();
        rb = GetComponent<Rigidbody>();
        rb.isKinematic = false;
        originalUseGravity = rb.useGravity;
    }

    void Update()
    {
        if (playerGun == null || !playerGun.activeInHierarchy)
        {
            if (isAttached)
                DetachRope();
            return;
        }

        if (Input.GetMouseButtonDown(1) && !isAttached)
        {
            ShootRope();
        }
        if (Input.GetMouseButtonUp(1) && isAttached)
        {
            DetachRope();
        }
        if (Input.GetMouseButton(1) && isAttached)
        {
            // לוגיקה אפשרית לתנועה בזמן החיבור
        }

        if (Input.GetMouseButtonDown(0) && !isAttached)
        {
            ShootRopeLeft();
        }
        if (Input.GetMouseButtonUp(0) && isAttached && isLeftRope)
        {
            DetachRope();
        }

        if (isLeftRope && isAttached && targetRigidbody != null && currentRope != null)
        {
            targetPoint = targetRigidbody.transform.TransformPoint(targetLocalOffsetLeftRope);
            Vector3 cameraMovement = mainCamera.transform.position - lastCameraPosition;
            lastCameraPosition = mainCamera.transform.position;
            if (cameraMovement.sqrMagnitude > 0.0001f)
            {
                Vector3 appliedCameraForce = cameraMovement * flingForce * flingSensitivity;
                targetRigidbody.AddForce(appliedCameraForce, ForceMode.Impulse);
                Debug.Log("Applying camera movement force: " + appliedCameraForce);
            }
            Vector3 mouseDelta = Input.mousePosition - lastMousePositionLeftFling;
            lastMousePositionLeftFling = Input.mousePosition;
            if (mouseDelta.sqrMagnitude > 1f)
            {
                Vector3 forceDir = (-mainCamera.transform.right * mouseDelta.x - mainCamera.transform.up * mouseDelta.y).normalized;
                Vector3 appliedForce = forceDir * flingForce * flingSensitivity;
                targetRigidbody.AddForce(appliedForce, ForceMode.Impulse);
                lastFlingForce = appliedForce;
                Debug.Log("Flinging object with mouse force: " + appliedForce);
            }
        }

        if (currentRedDot != null)
        {
            currentRedDot.transform.LookAt(mainCamera.transform.position);
        }

        // סיבוב האקדח בהתאם לכיוון הגרפל, אך רק כאשר מדובר בגרבינג באמצעות לחצן ימין
        if (isAttached && !isLeftRope)
        {
            Vector3 direction = grapplePoint - playerGun.transform.position;
            if (direction != Vector3.zero)
            {
                // מחשבים את ה-Quaternion שמצביע לעבר הגרפל
                Quaternion rawRotation = Quaternion.LookRotation(direction);
                // מכפילים ב-offset של 180 מעלות סביב ציר Y כדי לתקן את הכיוון (אם הדגם מוצג הפוך)
                Quaternion correctedRotation = rawRotation * Quaternion.Euler(0, 180, 0);
                // משתמשים ב-Quaternion.RotateTowards לקבלת סיבוב חלק ומבוקרת
                playerGun.transform.rotation = Quaternion.RotateTowards(playerGun.transform.rotation, correctedRotation, gunRotationSpeed * Time.deltaTime);
            }
        }
    }

    private void FixedUpdate()
    {
        if (isSwinging && isAttached)
        {
            accumulatedMomentumBoost += momentumIncreaseRate * Time.fixedDeltaTime;
            accumulatedMomentumBoost = Mathf.Clamp(accumulatedMomentumBoost, 0f, maxMomentumBoost);
            rb.AddForce(Vector3.down * extraGravity, ForceMode.Acceleration);
        }
    }

    private void StartGrapple()
    {
        if (IsGrounded())
        {
            Debug.Log("לא ניתן להתחיל סווינג כאשר נוגעים במשטח.");
            return;
        }

        if (redDotPrefab != null)
        {
            rb.linearVelocity = playerMovement.moveDirection;
            controller.enabled = false;
            playerMovement.isSwinging = true;
            justLanded = true;
            isSwinging = true;
            rb.useGravity = false;

            joint = gameObject.AddComponent<SpringJoint>();
            joint.autoConfigureConnectedAnchor = false;
            joint.connectedAnchor = grapplePoint;
            Debug.Log(grapplePoint + " grapple position");
            float distanceFromPoint = Vector3.Distance(transform.position, grapplePoint);
            joint.maxDistance = distanceFromPoint * swingMaxDistance;
            joint.minDistance = distanceFromPoint * swingMinDistance;
            joint.spring = swing;
            joint.damper = damper;
            joint.massScale = massScale;
            accumulatedMomentumBoost = 0f;
            ropeAttachTime = Time.time;
        }
    }

    void ShootRope()
    {
        if (mainCamera == null)
        {
            Debug.LogError("Main camera is not assigned!");
            return;
        }
        Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;
        if (Physics.Raycast(ray, out hit, 100f, wallLayer))
        {
            Debug.Log("Raycast hit at: " + hit.point);

            // בדיקה האם יש חסימה בין gunTip לנקודת הפגיעה
            if (((1 << hit.collider.gameObject.layer) & wallLayer) != 0)
            {
                RaycastHit obstruction;
                if (Physics.Linecast(gunTip.position, hit.point, out obstruction))
                {
                    if (obstruction.collider != hit.collider)
                    {
                        Debug.Log("Obstruction detected: " + obstruction.collider.name + " is blocking the view to the wall. Cannot shoot rope.");
                        return;
                    }
                }
            }

            targetPoint = hit.point;
            grapplePoint = hit.point;

            if (redDotPrefab != null)
            {
                Vector3 redDotPosition = hit.point - ray.direction.normalized * 1f;
                Vector3 directionToCamera = (mainCamera.transform.position - redDotPosition).normalized;
                currentRedDot = Instantiate(redDotPrefab, redDotPosition, Quaternion.LookRotation(directionToCamera));
            }

            StartGrapple();
            if (isSwinging)
            {
                Debug.Log("Rope hit – swing mode activated!");
            }
            isAttached = true;
            autoDetachCoroutine = StartCoroutine(AutoDetachRoutine());
        }
        else
        {
            Debug.Log("No hit detected.");
        }
    }

    void ShootRopeLeft()
    {
        if (mainCamera == null)
        {
            Debug.LogError("Main camera is not assigned!");
            return;
        }
        Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;
        if (Physics.Raycast(ray, out hit, 100f))
        {
            if (!hit.collider.CompareTag("cube"))
            {
                Debug.Log("Hit object is not tagged as 'cube'. Not instantiating rope for left click.");
                return;
            }
            targetRigidbody = hit.collider.GetComponent<Rigidbody>();
            if (targetRigidbody == null)
            {
                Debug.Log("Hit object tagged 'cube' does not have a Rigidbody. Not instantiating rope for left click.");
                return;
            }
            Debug.Log("Left click hit: " + hit.collider.name + " at " + hit.point);
            isLeftRope = true;
            lastMousePositionLeftFling = Input.mousePosition;
            lastCameraPosition = mainCamera.transform.position;
            lastGunForward = gunTip.forward;
            Vector3 direction = (targetRigidbody.transform.position - gunTip.position).normalized;
            targetPoint = targetRigidbody.transform.position + direction * hitOffset;
            Debug.Log("Using target Rigidbody center with offset, targetPoint: " + targetPoint);
            if (redDotPrefab != null)
            {
                Vector3 redDotPosition = targetPoint - direction * 1f;
                Vector3 directionToCamera = (mainCamera.transform.position - redDotPosition).normalized;
                currentRedDot = Instantiate(redDotPrefab, redDotPosition, Quaternion.LookRotation(directionToCamera));
            }
            if (Vector3.Distance(gunTip.position, targetPoint) < minDistance)
            {
                Debug.Log("Calculated targetPoint is too close. Not instantiating rope.");
                return;
            }
            targetLocalOffsetLeftRope = targetRigidbody.transform.InverseTransformPoint(targetPoint);
            currentRope = Instantiate(ropePrefab, gunTip.position, Quaternion.identity);
            LineRenderer line = currentRope.GetComponent<LineRenderer>();
            line.SetPosition(0, gunTip.position);
            line.SetPosition(1, targetPoint);
            if (ropeMaterial != null)
                line.material = ropeMaterial;
            isAttached = true;
        }
        else
        {
            Debug.Log("No hit detected on left click.");
        }
    }

    public Vector3 GetGrapplePoint()
    {
        return targetPoint;
    }

    void DetachRope()
    {
        bool wasSwing = !isLeftRope;
        if (autoDetachCoroutine != null)
        {
            StopCoroutine(autoDetachCoroutine);
            autoDetachCoroutine = null;
        }
        if (isLeftRope && targetRigidbody != null)
        {
            Vector3 forceDirection = gunTip.forward;
            if (forceDirection.y > 0)
            {
                forceDirection.y = 0;
                forceDirection = forceDirection.normalized;
            }
            targetRigidbody.AddForce(forceDirection * flingForce, ForceMode.Impulse);
            Debug.Log("Applying force in gun's forward direction: " + (forceDirection * flingForce));
        }
        else if (!isLeftRope)
        {
            Destroy(joint);
            justLanded = false;
            Vector3 currentMomentum = rb.linearVelocity;
            currentMomentum.y = 0;
            rb.linearVelocity = Vector3.zero;
            controller.enabled = true;
            float holdDuration = Time.time - ropeAttachTime;
            if (holdDuration >= 0.65f && !IsGrounded())
            {
                Vector3 boostVelocity = currentMomentum + transform.forward * forwardBoostOnStop + Vector3.up * upwardBoostOnStop;
                boostVelocity += transform.forward * accumulatedMomentumBoost;
                boostVelocity += Vector3.down * extraDownwardBoost;
                playerMovement.moveDirection = boostVelocity;
                Debug.Log("Detaching with boost (held for " + holdDuration + "s): " + boostVelocity);
            }
            else
            {
                Debug.Log("Rope was not held long enough for boost (" + holdDuration + "s) or player is grounded. No boost applied.");
            }
            accumulatedMomentumBoost = 0f;
        }
        rb.useGravity = originalUseGravity;
        playerMovement.isSwinging = false;
        isAttached = false;
        isLeftRope = false;
        targetRigidbody = null;
        if (movementCoroutine != null)
        {
            StopCoroutine(movementCoroutine);
            movementCoroutine = null;
        }
        if (currentRope != null)
        {
            Destroy(currentRope);
        }
        if (currentRedDot != null)
        {
            Destroy(currentRedDot);
            currentRedDot = null;
        }
        // אם מדובר בגרבינג מסוג Swing (לחיצה ימנית), מאפסים את סיבוב האקדח לרוטציה של האובייקט הריק
        if (wasSwing)
        {
            if (initialRotationReference != null)
                playerGun.transform.rotation = initialRotationReference.rotation;
            else
                playerGun.transform.rotation = Quaternion.Euler(0, 180, 0);
        }
    }

    public bool IsGrounded()
    {
        return Physics.Raycast(new Ray(transform.position - new Vector3(0, 1, 0), Vector3.down), 2f);
    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawRay(transform.position - new Vector3(0, 1, 0), Vector3.down * 0.5f);
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (isSwinging && isAttached)
        {
            Debug.Log("Collision with " + collision.gameObject.name + " detected during swing. Detaching rope.");
            DetachRope();
        }
    }

    private IEnumerator AutoDetachRoutine()
    {
        yield return new WaitForSeconds(1.4f);
        if (isAttached)
        {
            Debug.Log("Auto detaching rope after 1.3 seconds.");
            DetachRope();
        }
    }
}
